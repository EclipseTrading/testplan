{"version":3,"sources":["Common/defaults.js","Toolbar/FilterBox.js","Toolbar/Toolbar.js","Nav/NavEntry.js","Nav/NavBreadcrumbs.js","Nav/TagList.js","Nav/navUtils.js","Nav/Column.js","Nav/NavList.js","Nav/Nav.js","AssertionPane/DescriptionPane.js","AssertionPane/InfiniteScroll.js","Common/utils.js","AssertionPane/AssertionTypes/basicAssertionUtils.js","AssertionPane/AssertionTypes/BasicAssertion.js","AssertionPane/AssertionTypes/CopyButton.js","AssertionPane/AssertionTypes/TableAssertions/tableAssertionUtils.js","AssertionPane/AssertionTypes/TableAssertions/TableBaseAssertion.js","AssertionPane/AssertionTypes/TableAssertions/TableLogAssertion.js","AssertionPane/AssertionTypes/TableAssertions/TableMatchAssertion.js","AssertionPane/AssertionTypes/TableAssertions/ColumnContainAssertion.js","AssertionPane/AssertionTypes/DictAssertions/dictAssertionUtils.js","AssertionPane/AssertionTypes/DictAssertions/DictBaseAssertion.js","AssertionPane/AssertionTypes/DictAssertions/DictCellRenderer.js","AssertionPane/AssertionTypes/DictAssertions/DictButtonGroup.js","AssertionPane/AssertionTypes/DictAssertions/DictLogAssertion.js","AssertionPane/AssertionTypes/DictAssertions/FixCellRenderer.js","AssertionPane/AssertionTypes/DictAssertions/FixLogAssertion.js","AssertionPane/AssertionTypes/DictAssertions/DictMatchAssertion.js","AssertionPane/AssertionTypes/DictAssertions/FixMatchAssertion.js","AssertionPane/AssertionTypes/NotImplementedAssertion.js","AssertionPane/AssertionHeader.js","AssertionPane/AssertionTypes/GraphAssertions/graphUtils.js","AssertionPane/AssertionTypes/GraphAssertions/XYGraphAssertion.js","AssertionPane/AssertionTypes/GraphAssertions/DiscreteChartAssertion.js","AssertionPane/AssertionSummary.js","AssertionPane/AssertionTypes/TextAttachment.js","AssertionPane/AssertionTypes/AttachmentAssertions.js","AssertionPane/Assertion.js","AssertionPane/AssertionGroup.js","AssertionPane/LogGroup.js","AssertionPane/AssertionPane.js","Common/Message.js","Report/reportUtils.js","Common/fakeReport.js","Report/BatchReport.js","Nav/InteractiveNavEntry.js","Nav/InteractiveNavList.js","Nav/InteractiveNav.js","Common/sampleReports.js","Report/InteractiveReport.js","Report/EmptyReport.js","index.js"],"names":["GREEN","RED","COLUMN_WIDTH","INTERACTIVE_COL_WIDTH","CATEGORY_ICONS","testplan","test","multitest","cppunit","gtest","unittest","boost-test","qunit","testsuite","cppunit-suite","boost-test-suite","gtest-suite","parametrization","testcase","STATUS_CATEGORY","error","failed","incomplete","passed","skipped","xfail","xpass","xpass-strict","unstable","unknown","BASIC_ASSERTION_TYPES","SORT_TYPES","NONE","ALPHABETICAL","REVERSE_ALPHABETICAL","BY_STATUS","ONLY_FAILURES","DICT_GRID_STYLE","MAX_VISIBLE_ROW","ROW_HEIGHT","EMPTY_ROW_HEIGHT","HEADER_HEIGHT","BOTTOM_PADDING","FilterBox","react_default","a","createElement","className","css","styles","searchBox","style","width","concat","searchBoxInput","type","placeholder","onKeyUp","this","props","handleNavFilter","Component","StyleSheet","create","height","border","display","boxSizing","padding","position","fontFamily","fontSize","library","add","faInfo","faBook","faPrint","faFilter","faTags","faQuestionCircle","Toolbar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","helpModal","filterOpen","infoModal","filter","displayEmpty","displayTags","filterOnClick","bind","assertThisInitialized","toggleInfoOnClick","toggleEmptyDisplay","toggleHelpOnClick","toggleTagsDisplay","toggleFilterOnClick","setState","prevState","e","checkedValue","currentTarget","value","updateFilterFunc","updateEmptyDisplayFunc","updateTagsDisplayFunc","window","print","report","information","infoList","map","item","i","key","infoTableKey","infoTableValue","timer","run","start","push","end","reactstrap_es","bordered","responsive","infoTable","toolbarStyle","status","toolbar","toolbarPassed","toolbarFailed","toolbarUnstable","toolbarUnknown","light","expand","filterBox","Toolbar_FilterBox","isOpen","navbar","buttonsBar","react_fontawesome_index_es","toolbarButton","icon","title","onClick","nav","inNavbar","filterDropdown","toggle","dropdownItem","check","filterLabel","name","checked","onChange","divider","printOnClick","href","rel","target","color","size","getInfoTable","float","cursor","margin-left",":focus","outline","textDecoration","transition",":hover","backgroundColor","margin-top","table-layout","word-wrap","overflow-wrap","entryName","overflow","fontWeight","flex","entryIcons","paddingLeft","entryIcon","margin","badge","opacity","passedBadge","failedBadge","errorBadge","unstableBadge","unknownBadge","NavEntry","badgeStyle","caseCountPassed","caseCountFailed","pill","createNavButtons","entries","entry","depth","uid","handleNavClick","breadcrumbEntry","Nav_NavEntry","category","counter","navBreadcrumbs","top","borderBottom","zIndex","overflowY","breadcrumbContainer","listStyle",":before","content","borderTop","borderLeft","marginTop","left",":after","marginLeft","background",":hover:before","borderLeftColor","NavBreadcrumbs","navButtons","TagList","tags","assign","labels","simple","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","tag","err","return","tagKey","tagValue","margin-right","CreateNavButtons","createEntryComponent","selectedUid","breadcrumbLength","applyAllFilters","entryIndex","Nav_TagList","tabIndex","cssName","navButton","navButtonInteract","navButtonInteractFocus","toString","apply","navButtonsEmpty","length","applyNamedFilter","total","GetSelectedUid","selected","GetNavEntries","selectedEntry","suite","Error","GetNavBreadcrumbs","slice","column","boxShadow","padding-bottom","Column","leftStyle","rightStyle","Fragment","children","buttonList","overflow-y","NavList","Nav_Column","Nav","navEntries","breadCrumbEntries","Nav_NavBreadcrumbs","Nav_NavList","DescriptionPane","description","descriptionEntries","element","index","faCaretSquareUp","InfiniteScroll","hasMore","isLoading","items","currentIndex","id","scrollbars","React","createRef","loadItems","onScroll","isContainerScrolledToTheBottom","current","sliceSize","initSliceSize","_this2","arguments","nextItems","toConsumableArray","_this$state","Children","child","cloneElement","lib","autoHide","ref","paddingRight","el","getScrollHeight","getScrollTop","getClientHeight","sorted","iterable","reverse","sort","firstMember","secondMember","reverser","hashCode","str","len","hash","charCodeAt","domToString","dom","tmp","document","appendChild","innerHTML","prepareSliceLists","list","data","comparisonIndices","reduce","accumulator","line","mismatchIndices","split","join","indexOf","JSON","stringify","prev","curr","prepareBasicContent","assertion","defaultContent","preTitle","preContent","leftTitle","rightTitle","leftContent","second","rightContent","first","postTitle","postContent","message","objectSpread2","prepareLogContent","prepareEqualContent","prepareNotEqualContent","label","prepareComparisonContent","rel_tol","abs_tol","prepareIsCloseContent","prepareIsTrueContent","prepareIsFalseContent","prepareFailContent","member","container","prepareContainContent","prepareNotContainContent","delta","whiteSpace","prepareLineDiffContent","expected_exceptions","raised_exception","prepareExceptionContent","assertionString","string","reconstructedString","prevIdx","match_indexes","forEach","pattern","condition","prepareRegexContent","prepareRegexMatchLineContent","xpath","xml","replace","prepareXMLCheckContent","react","expected","actual","prepareEqualSlicesContent","has_keys","has_keys_diff","absent_keys","absent_keys_diff","prepareDictCheckContent","BasicAssertion","_prepareBasicContent","lg","contentSpan","lineHeight","overflow-x","CopyButton","react_copy_html_to_clipboard_lib_default","text","options","asHtml","active","tableCellStyle","params","isValueRow","ev","isCellFailed","colDef","field","cellStyle","TableBaseAssertion","onGridReady","sizeToFit","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","numberOfRows","maximumNumberOfRowsVisible","calculateTableGridHeight","rowData","copyValue","columnDefs","headerKey","table","header","hide","th","innerText","headerName","tr","td","gridToDOM","preText","AssertionTypes_CopyButton","isResizable","gridFont","main","suppressColumnVirtualisation","animateRows","enableSorting","enableFilter","enableColResize","resize","paddingBottom","minHeight","TableLogAssertion","columns","pinned","suppressResize","suppressSizeToFit","prepareTableLogColumnDefs","indexes","row","prepareTableLogRowData","indices","TableAssertions_TableBaseAssertion","TableMatchAssertion","suppressFilter","prepareTableColumnDefs","_line","slicedToArray","diff","errors","extra","expectedRow","valueRow","prepareTableRowData","ColumnContainAssertion","values","_line2","sortFlattenedJSON","origFlattenedJSON","orderByStatus","sortedFlattenedJSONList","startingIndexes","startingAndEndingIndexes","shift","Set","startingKey","any","endingKey","prepareDictColumnDefs","cellRenderer","hasExpected","keyColumn","suppressMovable","cellRendererFramework","expectedColumn","valueColumn","prepareDictRowData","lineNo","originalArray","level","expectedValue","actualValue","isEmptyLine","hasAcutalValue","Array","isArray","hasExpectedValue","lineObject","descriptor","indent","isListKey","dictCellStyle","isValue","flattenedDictToDOM","flattenedDict","_el","keyTd","valueTd","repeat","valueType","logToDOM","_el2","expectedTd","matchToDOM","DictBaseAssertion","numberOfEmptyRows","calculateDictGridHeight","buttonGroup","getRowHeight","DictCellRenderer","subText","mainText","onMouseEnter","onMouseLeave","faSortAmountUp","faSortAmountDown","DictButtonGroup","Math","random","substr","selectedSortType","defaultSortType","sortedData","buttonMap","sortByChar","sortByCharReverse","sortByStatus","filterFailure","setRowData","sortTypeList","sortType","copyButton","DictLogAssertion","flattened_dict","line_no","DictAssertions_DictButtonGroup","DictAssertions_DictBaseAssertion","faInfoCircle","FixCellRenderer","tooltip","showTooltip","hideTooltip","rowIndex","colField","toolTipId","DictAssertions_DictCellRenderer","FixLogAssertion","DictMatchAssertion","comparison","FixMatchAssertion","faFrown","NotImplementedAssertion","faClock","faLayerGroup","AssertionHeader","isTooltipOpen","toggleTooltip","starterIcon","tooltipId","cardHeaderStyle","cardHeaderColorLog","cardHeaderColorPassed","cardHeaderColorFailed","utc_time","tooltipDate","Date","placement","toUTCString","cardHeader","borderBottomColor","collapseDiv","returnStyle","graph_type","stroke","strokeLinejoin","returnXType","COLOUR_PALETTE","returnColour","series_options","series_names","keys","series_colours","colour_options","series","colour","round","returnXAxisTitle","graph_options","xAxisTitle","returnYAxisTitle","yAxisTitle","XYGraphAssertion","lastDrawLocation","components","Line","LineSeries","Hexbin","HexbinSeries","Contour","ContourSeries","Whisker","WhiskerSeries","Bar","VerticalBarSeries","Scatter","MarkSeries","series_colour","graph_data","plot_colours","GraphUtil","GraphComponent","legend","plots","centreComponent","react_vis_es","animation","xDomain","right","yDomain","bottom","xType","includeMargin","xPercent","yPercent","transform","textAnchor","onBrushEnd","area","onDrag","orientation","alignItems","DiscreteChartAssertion","Pie","RadialChart","colorType","onValueMouseOver","v","Label","onSeriesMouseOut","SummaryBaseAssertion","category_description","assertions_types","sm","offset","single_assertion_group","AssertionPane_AssertionGroup","globalIsOpen","resetGlobalIsOpen","SCROLLBAR_MIN_LIMIT","TextAttachment","updateTextContent","scrollbar_content","originalText","expandButtonPushed","lines","displayTextToArray","getCollapsedText","numberOfLines","default_highlight","showLineNumbers","textContent","scrollbar","loading","getTextAttachment","text_array","last_lines","starting_line","num_of_lines","startingLineNumber","pop","devMode","handleText","axios","get","src","then","response","catch","button_jsx","spinner","react_spinners","radius","file_name","AttachmentAssertion","getAttachmentContent","reportUid","file_type","orig_filename","file_path","dst_path","get_path","AssertionTypes_TextAttachment","getImageContent","alert","image_path","caption","alt","MatplotAssertion","getMatplotContent","text-align","Assertion","toggleAssertion","nextProps","nextState","assertionType","graphAssertion","discrete_chart","assertionMap","TableLog","TableMatch","TableDiff","ColumnContain","DictLog","DictMatch","FixLog","FixMatch","Graph","Attachment","MatPlot","isAssertionGroup","AssertionSummary","AssertionTypeComponent","assertionComponent","AssertionTypes_NotImplementedAssertion","card","AssertionPane_AssertionHeader","groupCardBody","assertionCardBody","AssertionGroup","AssertionPane_Assertion","logEntry","LogGroup","logs","logInfos","faPlusCircle","faMinusCircle","AssertionPane","testcaseUid","expandAllAssertions","collapseAllAssertions","assertionPaneStyle","assertions","AssertionPane_DescriptionPane","buttonsDiv","infiniteScrollDiv","AssertionPane_InfiniteScroll","AssertionPane_LogGroup","textAlign","Message","paneStyle","paddingTop","flexDirection","justifyContent","_mergeTags","tagsA","tagsB","mergedTags","tagName","hasOwnProperty","tagsArray","tagsSet","PropagateIndices","propagateIndicesRecur","parentIndices","tags_index","name_type_index","entryType","tagsIndex","entryNameType","nameTypeIndex","descendantsIndices","UpdateSelectedState","selectedUIDs","GetReportState","reportStatus","reportFetchMessage","getReportFetchMessage","GetCenterPane","selectedEntries","selectedDescription","getAssertions","src_AssertionPane_AssertionPane","navWidth","Common_Message","GetSelectedEntries","_selectedUIDs","toArray","headSelectedUID","tailSelectedUIDs","childEntry","find","fakeReportAssertions","meta","attachments","runtime_status","status_override","env_status","status_reason","fix_spec_path","part","parent_uids","suite_related","meta_type","machine_time","expr","included_indices","unified","ignore_blank_lines","context","ignore_space_change","ignore_whitespaces","func_match","exception_match","pattern_match","func","condition_match","exclude_columns","fail_limit","report_fails_only","include_columns","strict","age","amount","product_id","limit","display_index","symbol","col_0","col_1","col_2","col_3","col_4","col_5","col_6","col_7","col_8","col_9","col_10","col_11","col_12","col_13","col_14","col_15","col_16","col_17","col_18","col_19","Name","Age","Address","include_keys","actual_description","expected_description","exclude_keys","namespaces","BatchReport","updateFilter","updateTagsDisplay","updateDisplayEmpty","match","processedReport","setTimeout","autoSelect","reportEntry","selection","getReport","stopPropagation","_GetReportState","centerPane","batchReport","src_Toolbar_Toolbar","src_Nav_Nav","getStatusIcon","entryStatus","handlePlayClick","entryButton","faPlay","faRedo","getEnvStatusIcon","envStatus","envCtrlCallback","faToggleOff","inactiveEntryButton","faToggleOn","flex-wrap","align-items","InteractiveNavEntry","statusIcon","envStatusIcon","InteractiveNavList","Nav_InteractiveNavEntry","action","InteractiveNav","Nav_InteractiveNavList","FakeInteractiveReport","InteractiveReport","dev","getTests","tests","rawReport","console","log","poll_ms","_this3","Promise","all","newTest","existingTest","getSuites","suites","_this4","newSuite","existingSuite","getTestCases","testcases","_this5","newTestCase","existingParametrization","getParametrizations","parametrizations","updatedReportEntry","_this6","apiUrl","getApiUrl","put","setShallowReportEntry","api_prefix","test_uid","suite_uid","testcase_uid","param_uid","shallowReportEntry","_this7","updateReportEntryRecur","currEntry","_this8","unshallowReportEntry","currReportEntry","newEntry","entry_uids","putUpdatedReportEntry","actionToEnvStatus","shallowEntry","objectWithoutProperties","noop","Nav_InteractiveNav","interactiveReport","emptyReport","EmptyReport","saveAssertions","ReactDOM","render","react_router_dom","react_router","path","component","Report_InteractiveReport","getElementById"],"mappings":"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CpBF,aAAgB,mCAChBpb,SAAY,CACR,IACA,IACA,EACA,EACA,IACA,IACA,EACA,GAEJuK,QAAW,GACXtK,OAAU,CACN,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGR,CACIhN,SAAY,UACZuF,YAAe,mCACf2iB,UAAa,YACb5xB,KAAQ,qBACR6iB,SAAY,mCACZpQ,KAAQ,CACJ,CACI,oBACA,CACI,EACA,EACA,EACA,EACA,EACA,GAEJ,CACI,EACA,EACA,EACA,GAEJ,CACI,EACA,EACA,EACA,EACA,EACA,GAEJ,CACI,EACA,EACA,IACA,IACA,IACA,MAGR,CACI,oBACA,CACI,EACA,EACA,EACA,GAEJ,CACI,EACA,GAEJ,CACI,EACA,EACA,EACA,GAEJ,CACI,IACA,IACA,EACA,KAIZzU,QAAU,EACV+zB,iBAAoB,CAChB,EACA,GAEJF,aAAgB,mCAChBpb,SAAY,CACR,IACA,IACA,EACA,EACA,IACA,IACA,IACA,KAEJuK,QAAW,GACXtK,OAAU,CACN,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGR,CACIsb,SAAW,EACXtoB,SAAY,UACZuoB,oBAAsB,EACtBhjB,YAAe,KACf2iB,UAAa,YACb5xB,KAAQ,WACR6iB,SAAY,mCACZzN,MAAS,GACTtB,OAAU,CACN,QACA,QACA,MAEJoe,SAAW,EACXl0B,QAAU,EACVgW,MAAS,CACL,QACA,SAEJ6d,aAAgB,mCAChBM,qBAAuB,EACvBnR,QAAW,GACXoR,oBAAsB,GAE1B,CACIJ,QAAW,EACXtoB,SAAY,UACZuoB,oBAAsB,EACtBhjB,YAAe,KACf2iB,UAAa,YACb5xB,KAAQ,WACR6iB,SAAY,mCACZzN,MAAS,GACTtB,OAAU,CACN,MACA,MACA,MACA,SACA,YACA,MACA,MACA,OAEJoe,SAAW,EACXl0B,QAAU,EACVgW,MAAS,CACL,QACA,QACA,QACA,UACA,WACA,QACA,QACA,SAEJ6d,aAAgB,mCAChBM,qBAAuB,EACvBnR,QAAW,IACXoR,oBAAsB,KAIlC,CACI1oB,SAAY,WACZ4jB,KAAQ,GACRre,YAAe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II,OAAU,OACVJ,OAAU,IAEd,CACII,OAAU,OACVJ,OAAU,IAEd,CACII,OAAU,KACVJ,OAAU,IAEd,CACII,OAAU,OACVJ,OAAU,GAEd,CACII,OAAU,OACVJ,OAAU,KAGlBG,eAAiB,EACjBxY,QAAW,CACP,SACA,UAEJkX,aAAgB,mCAChB7Q,QAAW,IACX7F,QAAW,CACP,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAGR,CACIzR,SAAY,UACZuF,YAAe,0BACf2iB,UAAa,QACb5xB,KAAQ,WACR6iB,SAAY,mCACZzJ,MAAS,CACL,CACIia,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,gBAEd,CACInB,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,MAAS,cACTC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,eACVC,OAAU,iBAGlBrB,eAAiB,EACjBxY,QAAW,CACP,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UAEJkX,aAAgB,mCAChB7Q,QAAW,IACX7F,QAAW,CACP,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGR,CACIzR,SAAY,UACZuF,YAAe,wBACf2iB,UAAa,QACb5xB,KAAQ,WACR6iB,SAAY,mCACZzJ,MAAS,CACL,CACIqb,KAAQ,cACRC,IAAO,KACPC,QAAW,uCAEf,CACIF,KAAQ,cACRC,IAAO,KACPC,QAAW,mCAEf,CACIF,KAAQ,cACRC,IAAO,KACPC,QAAW,uCAEf,CACIF,KAAQ,kBACRC,IAAO,KACPC,QAAW,uCAEf,CACIF,KAAQ,oBACRC,IAAO,KACPC,QAAW,sCAEf,CACIF,KAAQ,gBACRC,IAAO,KACPC,QAAW,wCAGnBxB,eAAiB,EACjBxY,QAAW,CACP,OACA,MACA,WAEJkX,aAAgB,mCAChB7Q,QAAW,IACX7F,QAAW,CACP,EACA,EACA,EACA,EACA,EACA,MAKhB,CACIzR,SAAY,WACZ4jB,KAAQ,GACRre,YAAe,KACf0iB,eAAiB,EACjBhoB,QAAW,CACP3L,OAAU,EACVF,OAAU,EACVwP,MAAS,GAEbikB,cAAiB,KACjBvxB,KAAQ,iBACRsJ,IAAO,uCACPzE,OAAU,SACV6sB,YAAe,CACX,qBACA,kBACA,eAEJvtB,MAAS,CACLC,IAAO,CACHG,IAAO,mCACPF,MAAS,qCAGjB0N,MAAS,mBACTqf,eAAkB,WAClB9qB,KAAQ,sBACR+qB,gBAAmB,KACnBpmB,KAAQ,GACR9B,QAAW,CACP,CACIO,SAAY,UACZuF,YAAe,oBACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,YACA,SACA,CACI,KACA,UAEJ,CACI,MACA,QAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACItX,SAAY,UACZuF,YAAe,oBACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,MACA,SACA,GACA,IAEJ,CACI,EACA,QACA,SACA,GACA,IAEJ,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,KACA,OAGR,CACI,EACA,OACA,SACA,GACA,IAEJ,CACI,EACA,QACA,SACA,CACI,MACA,OAEJ,CACI,MACA,UAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACItX,SAAY,UACZuF,YAAe,iCACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,MACA,SACA,GACA,IAEJ,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,OACA,aAGR,CACI,EACA,MACA,SACA,GACA,IAEJ,CACI,EACA,QACA,SACA,CACI,MACA,QAEJ,CACI,OACA,qCAGR,CACI,EACA,MACA,SACA,CACI,MACA,eAEJ,CACI,QACA,gBAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACItX,SAAY,UACZuF,YAAe,oEACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,QACA,IAGR,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,QACA,IAGR,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,QACA,KAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACItX,SAAY,UACZuF,YAAe,8CACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,QACA,IAGR,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,QACA,IAGR,CACI,EACA,MACA,SACA,CACI,MACA,KAEJ,CACI,QACA,KAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACItX,SAAY,UACZuF,YAAe,+DACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,MACA,SACA,CACI,QACA,MAEJ,CACI,QACA,MAGR,CACI,EACA,MACA,SACA,CACI,QACA,MAEJ,CACI,QACA,OAGR,CACI,EACA,MACA,SACA,CACI,QACA,KAEJ,CACI,QACA,QAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACItX,SAAY,UACZuF,YAAe,qCACf2iB,UAAa,YACb5xB,KAAQ,YACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,UACA,SACA,CACI,MACA,UAEJ,CACI,MACA,cAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACIjK,iBAAoB,CAChB,OAEJrN,SAAY,UACZuF,YAAe,KACf2iB,UAAa,YACb/a,cAAiB,CACb,SAEJ7W,KAAQ,YACR6iB,SAAY,mCACZ7kB,QAAU,EACV8Y,YAAe,CACX,MACA,QAEJ+a,aAAgB,mCAChB7Q,QAAW,IACXpK,SAAY,CACR,MACA,UAGR,CACIlN,SAAY,UACZuF,YAAe,KACf2iB,UAAa,QACb5xB,KAAQ,UACR6iB,SAAY,mCACZ9B,eAAkB,CACd,CACI,EACA,MACA,IAEJ,CACI,EACA,GACA,CACI,MACA,MAGR,CACI,EACA,GACA,CACI,MACA,MAGR,CACI,EACA,GACA,CACI,MACA,MAGR,CACI,EACA,MACA,IAEJ,CACI,EACA,QACA,CACI,MACA,SAGR,CACI,EACA,MACA,CACI,MACA,iBAIZ8Q,aAAgB,mCAChB7Q,QAAW,OAIvB,CACItX,SAAY,WACZ4jB,KAAQ,GACRre,YAAe,KACf0iB,eAAiB,EACjBhoB,QAAW,CACP3L,OAAU,EACVF,OAAU,EACVwP,MAAS,GAEbikB,cAAiB,KACjBvxB,KAAQ,iBACRsJ,IAAO,uCACPzE,OAAU,SACV6sB,YAAe,CACX,qBACA,kBACA,eAEJvtB,MAAS,CACLC,IAAO,CACHG,IAAO,mCACPF,MAAS,qCAGjB0N,KAAQ,mBACRqf,eAAkB,WAClB9qB,KAAQ,qBACR+qB,gBAAmB,KACnBpmB,KAAQ,GACR9B,QAAW,CACP,CACIO,SAAY,UACZuF,YAAe,KACf2iB,UAAa,YACb5xB,KAAQ,WACR40B,aAAgB,KAChB/R,SAAY,mCACZgS,mBAAsB,KACtBC,qBAAwB,KACxBhT,WAAc,CACV,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,CACI,MACA,KAEJ,CACI,OACA,aAGR,CACI,EACA,IACA,SACA,GACA,IAEJ,CACI,EACA,GACA,SACA,GACA,IAEJ,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,GACA,IAEJ,CACI,EACA,GACA,SACA,GACA,IAEJ,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,QACA,UAGR,CACI,EACA,GACA,SACA,GACA,IAEJ,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,GACA,SACA,GACA,IAEJ,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,GACA,IAEJ,CACI,EACA,GACA,SACA,GACA,IAEJ,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,OACA,sBAGR,CACI,EACA,GACA,SACA,GACA,IAEJ,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,MAGR,CACI,EACA,IACA,SACA,CACI,MACA,KAEJ,CACI,MACA,OAIZ9jB,QAAU,EACV6zB,aAAgB,mCAChBkD,aAAgB,KAChB/T,QAAW,KAEf,CACIjK,iBAAoB,CAChB,KAEJrN,SAAY,UACZuF,YAAe,KACf2iB,UAAa,YACb/a,cAAiB,CACb,GACA,IAEJ7W,KAAQ,WACR6iB,SAAY,mCACZ7kB,QAAU,EACV8Y,YAAe,CACX,IACA,KAEJ+a,aAAgB,mCAChB7Q,QAAW,IACXpK,SAAY,CACR,GACA,GACA,KAGR,CA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","file":"static/js/main.dba9ae59.chunk.js","sourcesContent":["/**\n * Constants used across the entire application.\n */\nconst GREEN = '#228F1D';\nconst RED = '#A2000C';\nconst ORANGE = '#FFA500';\nconst LIGHT_GREY = '#F3F3F3';\nconst MEDIUM_GREY = '#D0D0D0';\nconst DARK_GREY = '#ADADAD';\nconst BLACK = '#404040';\n\nconst COLUMN_WIDTH = 18;\nconst INTERACTIVE_COL_WIDTH = 24;  // wider to fit interactive buttons\n\nconst INDENT_MULTIPLIER = 1.5;\n\nconst TOOLBAR_BUTTONS_BATCH = [\n  {name: 'pr', type: 'print'},\n  {name: 'if', type: 'info-circle'},\n  {name: 'qu', type: 'question-circle'},\n  {name: 'fi', type: 'filter'},\n  {name: 'ta', type: 'tags'},\n  {name: 'ci', type: 'circle'},\n  {name: 'jk', type: 'male'},\n  {name: 'me', type: 'table'},\n  {name: 'mo', type: 'chart-bar'}\n];\n\nconst TOOLBAR_BUTTONS_INTERACTIVE = [\n  {name: 'po', type: 'fa-power-off'},\n  {name: 'bg', type: 'fa-bug'},\n  {name: 'rf', type: 'fa-refresh'},\n  {name: 'pl', type: 'fa-play'},\n  {name: 'qu', type: 'fa-question-circle'},\n  {name: 'fp', type: 'fa-floppy-o'}\n];\n\nconst CATEGORIES = {\n  'test': 'test',\n  'multitest': 'test',\n  'cppunit': 'test',\n  'gtest': 'test',\n  'unittest': 'test',\n  'boost-test': 'test',\n  'qunit': 'test',\n  'testsuite': 'testsuite',\n  'cppunit-suite': 'testsuite',\n  'boost-test-suite': 'testsuite',\n  'gtest-suite': 'testsuite',\n  'parametrization': 'parametrization',\n  'testcase': 'testcase'\n};\n\nconst CATEGORY_ICONS = {\n  'testplan': 'TP',\n  'test': 'T',\n  'multitest': 'MT',\n  'cppunit': 'CP',\n  'gtest': 'GT',\n  'unittest': 'UT',\n  'boost-test': 'BT',\n  'qunit': 'QU',\n  'testsuite': 'S',\n  'cppunit-suite': 'CS',\n  'boost-test-suite': 'BS',\n  'gtest-suite': 'GS',\n  'parametrization': 'P',\n  'testcase': 'C'\n};\n\nconst ENTRY_TYPES = [\n  'testplan',\n  'multitest',\n  'gtest',\n  'boost_test',\n  'cppunit',\n  'qunit',\n  'unittest',\n  'testsuite',\n  'parametrization',\n  'testcase',\n];\n\nconst STATUS = [\n  'error',\n  'failed',\n  'passed',\n  'unstable',\n  'unknown',\n  'incomplete',\n  'skipped',\n  'xfail',\n  'xpass',\n  'xpass-strict',\n  'unstable',\n  'unknown',\n];\n\nconst STATUS_CATEGORY = {\n  'error': 'error',\n  'failed': 'failed',\n  'incomplete': 'failed',\n  'passed': 'passed',\n  'skipped': 'unstable',\n  'xfail': 'unstable',\n  'xpass': 'unstable',\n  'xpass-strict': 'unstable',\n  'unstable': 'unstable',\n  'unknown': 'unknown',\n};\n\nconst RUNTIME_STATUS = [\n  'ready',\n  'running',\n  'finished',\n];\n\n\nconst NAV_ENTRY_DISPLAY_DATA = [\n  'name',\n  'uid',\n  'type',\n  'category',\n  'status',\n  'runtime_status',\n  'counter',\n  'tags',\n  'parent_uids',\n  'logs',\n];\n\nconst BASIC_ASSERTION_TYPES = [\n  'Log',\n  'Equal', 'NotEqual', 'Greater', 'GreaterEqual', 'Less', 'LessEqual',\n  'IsClose', 'IsTrue', 'IsFalse',\n  'Fail', 'Contain', 'NotContain', 'LineDiff',\n  'ExceptionRaised', 'ExceptionNotRaised',\n  'RegexMatch', 'RegexMatchNotExists', 'RegexSearch', 'RegexSearchNotExists',\n  'RegexFindIter', 'RegexMatchLine',\n  'XMLCheck',\n  'EqualSlices', 'EqualExcludeSlices',\n  'DictCheck', 'FixCheck',\n  'Attachment', 'MatPlot',\n];\n\nconst SORT_TYPES = {\n  NONE: 0,\n  ALPHABETICAL: 1,\n  REVERSE_ALPHABETICAL: 2,\n  BY_STATUS: 3,\n  ONLY_FAILURES: 4,\n};\n\nconst DICT_GRID_STYLE = {\n  MAX_VISIBLE_ROW: 20,\n  ROW_HEIGHT: 28,\n  EMPTY_ROW_HEIGHT: 5,\n  HEADER_HEIGHT: 32,\n  BOTTOM_PADDING: 18, // 16 + 2(border 2px)\n};\n\n// Interval to poll for report updates over. We may want to reduce this to make\n// the UI update more quickly.\n//\n// NOTE: currently we poll for updates using HTTP for simplicity but in future\n// it might be better to use websockets or SSEs to allow the backend to notify\n// us when updates are available.\nconst POLL_MS = 1000;\n\nexport {\n  GREEN,\n  RED,\n  ORANGE,\n  LIGHT_GREY,\n  MEDIUM_GREY,\n  DARK_GREY,\n  BLACK,\n  COLUMN_WIDTH,\n  INTERACTIVE_COL_WIDTH,\n  INDENT_MULTIPLIER,\n  TOOLBAR_BUTTONS_BATCH,\n  TOOLBAR_BUTTONS_INTERACTIVE,\n  CATEGORIES,\n  CATEGORY_ICONS,\n  ENTRY_TYPES,\n  STATUS,\n  STATUS_CATEGORY,\n  RUNTIME_STATUS,\n  NAV_ENTRY_DISPLAY_DATA,\n  BASIC_ASSERTION_TYPES,\n  SORT_TYPES,\n  DICT_GRID_STYLE,\n  POLL_MS,\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport {COLUMN_WIDTH} from \"../Common/defaults\";\n\n/**\n * Filter box, enter filter expressions to filter entries from the Nav\n * component.\n */\nclass FilterBox extends Component {\n  render() {return (\n    <div\n      className={css(styles.searchBox)}\n      style={{width: `${COLUMN_WIDTH}em`}}>\n      <input\n        className={css(styles.searchBoxInput)}\n        type=\"text\"\n        placeholder=\"&#xf002; Filter\"\n        onKeyUp={this.props.handleNavFilter} />\n    </div>\n  );\n  }\n}\n\nFilterBox.propTypes = {\n  /** Function to handle expressions entered into the Filter box */\n  handleNavFilter: PropTypes.func,\n};\n\nconst styles = StyleSheet.create({\n  searchBox: {\n    height: '100%',\n  },\n  searchBoxInput: {\n    height: '100%',\n    width: '100%',\n    border: 'none',\n    display: 'block',\n    boxSizing: 'border-box',\n    padding: '0.4em 0.8em 0.4em 0.8em',\n    position: 'relative',\n    fontFamily: 'FontAwesome, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n    fontSize: '0.9em',\n  }\n});\n\nexport default FilterBox;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {StyleSheet, css} from 'aphrodite';\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Input,\n  Label,\n  Navbar,\n  Nav,\n  NavItem,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  UncontrolledDropdown,\n  Table\n} from 'reactstrap';\n\nimport FilterBox from \"../Toolbar/FilterBox\";\nimport {\n  GREEN, RED, ORANGE, BLACK, DARK_GREY, STATUS, STATUS_CATEGORY\n} from \"../Common/defaults\";\n\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\nimport {\n  faInfo,\n  faBook,\n  faPrint,\n  faFilter,\n  faTags,\n  faQuestionCircle,\n} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(\n  faInfo,\n  faBook,\n  faPrint,\n  faFilter,\n  faTags,\n  faQuestionCircle,\n);\n\n\n/**\n * Toolbar component, contains the toolbar buttons & Filter box.\n */\nclass Toolbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      helpModal: false,\n      filterOpen: false,\n      infoModal: false,\n      filter: 'all',\n      displayEmpty: true,\n      displayTags: false,\n    };\n\n    this.filterOnClick = this.filterOnClick.bind(this);\n    this.toggleInfoOnClick = this.toggleInfoOnClick.bind(this);\n    this.toggleEmptyDisplay = this.toggleEmptyDisplay.bind(this);\n    this.toggleHelpOnClick = this.toggleHelpOnClick.bind(this);\n    this.toggleTagsDisplay = this.toggleTagsDisplay.bind(this);\n    this.toggleFilterOnClick = this.toggleFilterOnClick.bind(this);\n  }\n\n  toggleHelpOnClick() {\n    this.setState(prevState => ({\n      helpModal: !prevState.helpModal\n    }));\n  }\n\n  toggleInfoOnClick() {\n    this.setState(prevState => ({\n      infoModal: !prevState.infoModal\n    }));\n  }\n\n  toggleFilterOnClick() {\n    this.setState(prevState => ({\n      filterOpen: !prevState.filterOpen\n    }));\n  }\n\n  filterOnClick(e){\n    let checkedValue = e.currentTarget.value;\n    this.setState({filter: checkedValue});\n    this.props.updateFilterFunc(checkedValue);\n  }\n\n  toggleEmptyDisplay() {\n    this.props.updateEmptyDisplayFunc(!this.state.displayEmpty);\n    this.setState(prevState => ({\n      displayEmpty: !prevState.displayEmpty\n    }));\n  }\n\n  toggleTagsDisplay() {\n    this.props.updateTagsDisplayFunc(!this.state.displayTags);\n    this.setState(prevState => ({\n      displayTags: !prevState.displayTags\n    }));\n  }\n\n  printOnClick() {\n    window.print();\n  }\n\n  getInfoTable(report) {\n    if (report && report.information) {\n      const infoList = report.information.map((item, i) => {\n        return (\n          <tr key={i}>\n            <td className={css(styles.infoTableKey)}>{item[0]}</td>\n            <td className={css(styles.infoTableValue)}>{item[1]}</td>\n          </tr>\n        );\n      });\n      if (report.timer && report.timer.run) {\n        if (report.timer.run.start) {\n          infoList.push(\n            <tr key='start'>\n              <td>start</td>\n              <td>{report.timer.run.start}</td>\n            </tr>\n          );\n        }\n        if (report.timer.run.end) {\n          infoList.push(\n            <tr key='end'>\n              <td>end</td>\n              <td>{report.timer.run.end}</td>\n            </tr>\n          );\n        }\n      }\n      return (\n        <Table bordered responsive className={css(styles.infoTable)}>\n          <tbody>\n            {infoList}\n          </tbody>\n        </Table>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    var toolbarStyle;\n    switch (STATUS_CATEGORY[this.props.status]){\n        case 'passed':\n            toolbarStyle = css(styles.toolbar, styles.toolbarPassed);\n            break;\n        case 'failed':\n        case 'error':\n            toolbarStyle = css(styles.toolbar, styles.toolbarFailed);\n            break;\n        case 'unstable':\n            toolbarStyle = css(styles.toolbar, styles.toolbarUnstable);\n            break;\n        default:\n            toolbarStyle = css(styles.toolbar, styles.toolbarUnknown);\n    }\n\n    return (\n      <div>\n        <Navbar light expand=\"md\" className={css(styles.toolbar)}>\n          <div className={css(styles.filterBox)}>\n            <FilterBox handleNavFilter={this.props.handleNavFilter}/>\n          </div>\n          <Collapse isOpen={this.state.isOpen} navbar className={toolbarStyle}>\n            <Nav navbar className='ml-auto'>\n              <NavItem>\n                <div className={css(styles.buttonsBar)}>\n                  <FontAwesomeIcon\n                    key='toolbar-info'\n                    className={css(styles.toolbarButton)}\n                    icon='info'\n                    title='Documentation'\n                    onClick={this.toggleInfoOnClick}\n                  />\n                </div>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <div className={css(styles.buttonsBar)}>\n                  <DropdownToggle nav className={toolbarStyle}>\n                    <FontAwesomeIcon\n                      key='toolbar-filter'\n                      icon='filter'\n                      title='Choose filter'\n                      className={css(styles.toolbarButton)}\n                    />\n                  </DropdownToggle>\n                </div>\n                <DropdownMenu className={css(styles.filterDropdown)}>\n                  <DropdownItem toggle={false}\n                    className={css(styles.dropdownItem)}>\n                    <Label check className={css(styles.filterLabel)}>\n                      <Input type=\"radio\" name=\"filter\" value='all'\n                        checked={this.state.filter === 'all'}\n                        onChange={this.filterOnClick}/>{' '}\n                      All\n                    </Label>\n                  </DropdownItem>\n                  <DropdownItem toggle={false}\n                    className={css(styles.dropdownItem)}>\n                    <Label check className={css(styles.filterLabel)}>\n                      <Input type=\"radio\" name=\"filter\" value='fail'\n                        checked={this.state.filter === 'fail'}\n                        onChange={this.filterOnClick}/>{' '}\n                      Failed only\n                    </Label>\n                  </DropdownItem>\n                  <DropdownItem toggle={false}\n                    className={css(styles.dropdownItem)}>\n                    <Label check className={css(styles.filterLabel)}>\n                      <Input type=\"radio\" name=\"filter\" value='pass'\n                        checked={this.state.filter === 'pass'}\n                        onChange={this.filterOnClick}/>{' '}\n                      Passed only\n                    </Label>\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem toggle={false}\n                    className={css(styles.dropdownItem)}>\n                    <Label check className={css(styles.filterLabel)}>\n                      <Input type=\"checkbox\" name=\"displayEmptyTest\"\n                        checked={!this.state.displayEmpty}\n                        onChange={this.toggleEmptyDisplay}/>{' '}\n                      Hide empty testcase\n                    </Label>\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n              <NavItem>\n                <div className={css(styles.buttonsBar)}>\n                  <FontAwesomeIcon\n                    key='toolbar-print'\n                    className={css(styles.toolbarButton)}\n                    icon='print'\n                    title='Print page'\n                    onClick={this.printOnClick}\n                  />\n                </div>\n              </NavItem>\n              <NavItem>\n                <div className={css(styles.buttonsBar)}>\n                  <FontAwesomeIcon\n                    key='toolbar-tags'\n                    className={css(styles.toolbarButton)}\n                    icon='tags'\n                    title='Toggle tags'\n                    onClick={this.toggleTagsDisplay}\n                  />\n                </div>\n              </NavItem>\n              <NavItem>\n                <div className={css(styles.buttonsBar)}>\n                  <FontAwesomeIcon\n                    key='toolbar-question'\n                    className={css(styles.toolbarButton)}\n                    icon='question-circle'\n                    title='Help'\n                    onClick={this.toggleHelpOnClick}\n                  />\n                </div>\n              </NavItem>\n              <NavItem>\n                <a href='http://testplan.readthedocs.io'\n                  rel='noopener noreferrer' target='_blank'\n                  className={css(styles.buttonsBar)}>\n                  <FontAwesomeIcon\n                    key='toolbar-document'\n                    className={css(styles.toolbarButton)}\n                    icon='book'\n                    title='Documentation'\n                  />\n                </a>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Modal\n            isOpen={this.state.helpModal}\n            toggle={this.toggleHelpOnClick}\n            className='HelpModal'\n          >\n            <ModalHeader toggle={this.toggleHelpOnClick}>Help</ModalHeader>\n            <ModalBody>\n              This is filter box help!\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"light\" onClick={this.toggleHelpOnClick}>\n                Close\n              </Button>\n            </ModalFooter>\n          </Modal>\n          <Modal\n            isOpen={this.state.infoModal}\n            toggle={this.toggleInfoOnClick}\n            size='lg'\n            className='infoModal'\n          >\n            <ModalHeader toggle={this.toggleInfoOnClick}>\n              Information\n            </ModalHeader>\n            <ModalBody>\n              {this.getInfoTable(this.props.report)}\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"light\" onClick={this.toggleInfoOnClick}>\n                Close\n              </Button>\n            </ModalFooter>\n          </Modal>\n      </div>\n    );\n  }\n}\n\nToolbar.propTypes = {\n  /** Testplan report's status */\n  status: PropTypes.oneOf(STATUS),\n  /** Report object to display information */\n  report: PropTypes.object,\n  /** Function to handle filter changing in the Filter box */\n  updateFilterFunc: PropTypes.func,\n  /** Function to handle toggle of displaying empty entries in the navbar */\n  updateEmptyDisplayFunc: PropTypes.func,\n  /** Function to handle toggle of displaying tags in the navbar */\n  updateTagsDisplayFunc: PropTypes.func,\n  /** Function to handle expressions entered into the Filter box */\n  handleNavFilter: PropTypes.func,\n};\n\nconst styles = StyleSheet.create({\n  toolbar: {\n    padding: '0',\n  },\n\n  filterBox: {\n    float: 'left',\n    height: '100%',\n  },\n  buttonsBar: {\n    float: 'left',\n    height: '100%',\n    color: 'white',\n  },\n  filterLabel: {\n    width: '100%',\n    display: 'inlinde-block',\n    cursor: 'pointer',\n    padding: '0.2em',\n    'margin-left': '2em',\n  },\n  dropdownItem: {\n    padding: '0',\n    ':focus': {\n      outline: '0',\n    },\n  },\n  toolbarButton: {\n    textDecoration: 'none',\n    position: 'relative',\n    display: 'inline-block',\n    height: '2.4em',\n    width: '2.4em',\n    cursor: 'pointer',\n    color: 'white',\n    padding: '0.7em 0em 0.7em 0em',\n    transition: 'all 0.3s ease-out 0s',\n    ':hover': {\n        color: DARK_GREY\n    }\n  },\n  toolbarUnstable: {\n    backgroundColor: ORANGE,\n    color: 'white'\n  },\n  toolbarUnknown: {\n    backgroundColor: BLACK,\n    color: 'white'\n  },\n  toolbarPassed: {\n    backgroundColor: GREEN,\n    color: 'white'\n  },\n  toolbarFailed: {\n    backgroundColor: RED,\n    color: 'white'\n  },\n  filterDropdown: {\n    'margin-top': '-0.3em'\n  },\n  infoTable: {\n    'table-layout': 'fixed',\n    width: '100%'\n  },\n  infoTableKey: {\n    width: '25%',\n  },\n  infoTableValue: {\n    'word-wrap': 'break-word',\n    'overflow-wrap': 'break-word',\n  }\n});\n\nexport default Toolbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Badge} from 'reactstrap';\nimport {StyleSheet, css} from \"aphrodite\";\n\nimport {\n  RED,\n  GREEN,\n  ORANGE,\n  BLACK,\n  CATEGORY_ICONS,\n  ENTRY_TYPES,\n  STATUS,\n  STATUS_CATEGORY\n} from \"../Common/defaults\";\n\n/**\n * Display NavEntry information:\n *   * name.\n *   * case count (passed/failed).\n *   * type (displayed in badge).\n */\nconst NavEntry = (props) => {\n  const badgeStyle = `${STATUS_CATEGORY[props.status]}Badge`;\n  return (\n    <div className='d-flex justify-content-between'>\n      <div\n        className={css(styles.entryName, styles[STATUS_CATEGORY[props.status]])}\n        title={props.name}>\n        {props.name}\n      </div>\n      <div className={css(styles.entryIcons)}>\n        <i className={css(styles.entryIcon)} title='passed/failed testcases'>\n          <span className={css(styles.passed)}>{props.caseCountPassed}</span>\n          /\n          <span className={css(styles.failed)}>{props.caseCountFailed}</span>\n        </i>\n        <Badge\n          className={css(styles.entryIcon, styles[badgeStyle], styles.badge)}\n          title={props.type}\n          pill>\n          {CATEGORY_ICONS[props.type]}\n        </Badge>\n      </div>\n    </div>\n  );\n};\n\nNavEntry.propTypes = {\n  /** Entry name */\n  name: PropTypes.string,\n  /** Entry status */\n  status: PropTypes.oneOf(STATUS),\n  /** Entry type */\n  type: PropTypes.oneOf(ENTRY_TYPES),\n  /** Number of passing testcases entry has */\n  caseCountPassed: PropTypes.number,\n  /** Number of failing testcases entry has */\n  caseCountFailed: PropTypes.number,\n};\n\nconst styles = StyleSheet.create({\n  entryName: {\n    overflow: 'hidden',\n    fontSize: '1em',\n    fontWeight: 500,\n    flex: 1,\n  },\n  entryIcons: {\n    paddingLeft: '1em',\n  },\n  entryIcon: {\n    fontSize: '0.6em',\n    margin: '0em 0.5em 0em 0.5em',\n  },\n  badge: {\n    opacity: 0.5,\n  },\n  passedBadge: {\n    backgroundColor: GREEN,\n  },\n  failedBadge: {\n    backgroundColor: RED,\n  },\n  errorBadge: {\n    backgroundColor: RED,\n  },\n  unstableBadge: {\n    backgroundColor: ORANGE,\n  },\n  unknownBadge: {\n    backgroundColor: BLACK,\n  },\n  passed: {\n    color: GREEN,\n  },\n  failed: {\n    color: RED,\n  },\n  error: {\n    color: RED,\n  },\n  unstable: {\n    color: ORANGE,\n  },\n  unknown: {\n    color: BLACK,\n  },\n});\n\nexport default NavEntry;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport NavEntry from './NavEntry';\nimport {\n  LIGHT_GREY, MEDIUM_GREY, DARK_GREY, STATUS, RUNTIME_STATUS\n} from \"../Common/defaults\";\n\n/**\n * Render a horizontal menu of all the currently selected entries.\n */\nconst NavBreadcrumbs = (props) => {\n  const navButtons = createNavButtons(props);\n  return (\n    <div className={css(styles.navBreadcrumbs)}>\n      <ul className={css(styles.breadcrumbContainer)}>\n        {navButtons}\n      </ul>\n    </div>);\n};\n\n/**\n * Create the breadcrumb entry buttons.\n *\n * @returns {Array} - Array of breadcrumb entries\n */\nconst createNavButtons = (props) => props.entries.map((entry, depth) => {\nreturn (\n  <li\n    key={entry.uid}\n    onClick={((e) => props.handleNavClick(e, entry, depth))}>\n    <div className={css(styles.breadcrumbEntry)}>\n      <NavEntry\n        name={entry.name}\n        status={entry.status}\n        type={entry.category}\n        caseCountPassed={entry.counter.passed}\n        caseCountFailed={entry.counter.failed} />\n    </div>\n  </li>\n);});\n\n\nNavBreadcrumbs.propTypes = {\n  /** Nav breadcrumb entries to be displayed */\n  entries: PropTypes.arrayOf(PropTypes.shape({\n    uid: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.oneOf(STATUS),\n    runtime_status: PropTypes.oneOf(RUNTIME_STATUS),\n    counter: PropTypes.shape({\n      passed: PropTypes.number,\n      failed: PropTypes.number,\n    }),\n  })),\n  /** Function to handle Nav entries being clicked (selected) */\n  handleNavClick: PropTypes.func,\n};\n\nconst styles = StyleSheet.create({\n  navBreadcrumbs: {\n    top: '2.5em',\n    borderBottom: 'solid 1px rgba(0, 0, 0, 0.1)',\n    zIndex: 300,\n    position: 'fixed',\n    display: 'inline-block',\n    height: '2em',\n    width: '100%',\n    backgroundColor: LIGHT_GREY,\n    overflowY: 'hidden',\n  },\n  breadcrumbContainer: {\n    listStyle: 'none',\n    padding: 0,\n    margin: 0,\n    height: '100%',\n    width: '100%',\n  },\n  breadcrumbEntry: {\n    textDecoration: 'none',\n    padding: '0.25em 0em 0.25em 2em',\n    float: 'left',\n    position: 'relative',\n    display: 'block',\n    cursor: 'pointer',\n    backgroundColor: MEDIUM_GREY,\n    ':before': {\n      content: '\\' \\'',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderTop: '25px solid transparent',\n      borderBottom: '25px solid transparent',\n      borderLeft: `20px solid ${MEDIUM_GREY}`,\n      position: 'absolute',\n      top: '50%',\n      marginTop: '-25px',\n      left: '100%',\n      zIndex: 500,\n    },\n    ':after': {\n      content: '\\' \\'',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderTop: '25px solid transparent',\n      borderBottom: '25px solid transparent',\n      borderLeft: '20px solid white',\n      position: 'absolute',\n      top: '50%',\n      marginTop: '-25px',\n      marginLeft: '2px',\n      left: '100%',\n      zIndex: 475,\n    },\n    ':hover': {\n      background: DARK_GREY,\n    },\n    ':hover:before': {\n      borderLeftColor: DARK_GREY,\n    }\n  },\n});\n\nexport default NavBreadcrumbs;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Badge} from 'reactstrap';\nimport {StyleSheet, css} from 'aphrodite';\n\n\nclass TagList extends Component {\n\n  render() {\n    let tags = Object.assign({}, this.props.tags);\n\n    const labels = [];\n    if (tags.simple) {\n      for (let tag of tags.simple) {\n        labels.push(\n          <Badge\n            key={this.props.entryName+tag}\n            className={css(styles.tags)}\n            color='primary'>\n            {tag}\n          </Badge>\n        );\n      }\n      delete tags.simple;\n    }\n\n    for (let tagKey in tags) {\n      for (let tagValue in tags[tagKey]) {\n        labels.push(\n          <Badge\n            key={this.props.entryName+tagKey+tagValue}\n            className={css(styles.tags)}\n            color='primary'>\n            {tagKey}={tagValue}\n          </Badge>\n        );\n      }\n    }\n\n    return (\n      <div className='tagList'>\n        {labels}\n      </div>\n    );\n  }\n}\n\nTagList.propTypes = {\n  entryName: PropTypes.string,\n  tags: PropTypes.object,\n};\n\nconst styles = StyleSheet.create({\n  tags: {\n    'margin-right': '.4em',\n  },\n});\n\nexport default TagList;\n","/**\n * Navigation utility functions.\n */\nimport React from 'react';\nimport {ListGroupItem} from 'reactstrap';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport TagList from './TagList';\nimport {LIGHT_GREY, DARK_GREY} from \"../Common/defaults\";\n\n/**\n * Create the list entry buttons or a single button stating nothing can be\n * displayed.\n *\n * @returns {Array|ListGroupItem}\n */\nconst CreateNavButtons = (\n  props,\n  createEntryComponent,\n  selectedUid\n  ) => {\n  const depth = props.breadcrumbLength;\n\n  // Apply all filters to the entries.\n  const filteredEntries = applyAllFilters(props);\n\n  // Create buttons for each of the filtered entries.\n  const navButtons = filteredEntries.map((entry, entryIndex) => {\n    const tags = (\n      (props.displayTags && entry.tags)\n      ? <TagList entryName={entry.name} tags={entry.tags}/>\n      : null\n    );\n\n    const tabIndex = entryIndex + 1;\n    const cssName = [styles.navButton, styles.navButtonInteract];\n    if (selectedUid && selectedUid === entry.uid) {\n      cssName.push(styles.navButtonInteractFocus);\n    }\n    return (\n      <ListGroupItem\n        tabIndex={tabIndex.toString()}\n        key={entry.uid}\n        className={css(...cssName)}\n        onClick={((e) => props.handleNavClick(e, entry, depth))}>\n        {tags}\n        {createEntryComponent(entry)}\n      </ListGroupItem>\n    );\n  });\n\n  const navButtonsEmpty = <ListGroupItem className={css(styles.navButton)}>\n    No entries to display...\n  </ListGroupItem>;\n\n  return navButtons.length > 0 ? navButtons : navButtonsEmpty;\n};\n\n/**\n * Apply all filters to a list of entries\n *\n *  * Apply the \"named\" filter (currently just filters out passed or failed\n *    entries).\n *  * Filter out empty testcases if required.\n */\nconst applyAllFilters = (props) => {\n  if (props.displayEmpty) {\n    return applyNamedFilter(props.entries, props.filter);\n  } else {\n    return applyNamedFilter(props.entries, props.filter).filter((entry) => {\n      if (entry.category === 'testcase') {\n        return (entry.entries !== null && entry.entries.length > 0);\n      } else {\n        return (entry.counter.total > 0);\n      }\n    });\n  }\n};\n\n/**\n * Apply the named filter to a list of entries. The filter string may be:\n *\n *  * 'pass' to filter out failed entries\n *  * 'fail' to filter out passed entries\n */\nconst applyNamedFilter = (entries, filter) => {\n  switch (filter) {\n    case 'pass':\n      return entries.filter(\n        (entry) => entry.counter.passed > 0\n      );\n\n    case 'fail':\n      return entries.filter(\n        (entry) => entry.counter.failed + entry.counter.error > 0\n      );\n\n    default:\n      return entries;\n  }\n};\n\nconst styles = StyleSheet.create({\n  navButton: {\n    position: 'relative',\n    display: 'inline-block',\n    border: 'none',\n    backgroundColor: LIGHT_GREY,\n    cursor: 'pointer',\n  },\n  navButtonInteract: {\n    ':hover': {\n      backgroundColor: DARK_GREY,\n    },\n  },\n  navButtonInteractFocus: {\n    backgroundColor: DARK_GREY,\n    outline: 'none',\n  },\n});\n\n/**\n * Return the UID of the currently selected entry, or null if there is no\n * entry selected.\n */\nconst GetSelectedUid = (selected) => {\n  if (selected && selected.length > 0) {\n    return selected[selected.length - 1].uid;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Get the entries to present to a user in the navigation column. In general,\n * we present a list of the child entries of the currently selected report\n * node so that a user may click to drill down to the next level (e.g. from\n * MultiTest into a suite). As a special case, when a testcase is selected\n * we do not drill down any further and instead display all entries in the\n * suite that testcase belongs to.\n *\n * @param {Array[ReportNode]} selected - Current selection hierarchy.\n * @return {Array[ReportNode]} Report nodes to display in the navigation\n *                             column.\n */\nconst GetNavEntries = (selected) => {\n  const selectedEntry = selected[selected.length - 1];\n\n  if (!selectedEntry) {\n    return [];\n  } else if (selectedEntry.category === 'testcase') {\n    const suite = selected[selected.length - 2];\n\n    // All testcases should belong to a suite, throw an error if we can't\n    // find it.\n    if (!suite) {\n      throw new Error(\n        \"Could not find parent suite of testcase \" + selectedEntry.name\n      );\n    }\n    return suite.entries;\n  } else {\n    return selectedEntry.entries;\n  }\n};\n\n/**\n * Get the entries to display in the navigation breadcrumbs bar. Generally\n * this is just the selection hierarchy. As a special case, when a testcase\n * is selected, we only display up to the suite level in the breadcrumb bar.\n *\n * @param {Array[ReportNode]} selected - Current selection hierarchy.\n * @return {Array[ReportNode]} Report nodes to display in the breadcrumb bar.\n */\nconst GetNavBreadcrumbs = (selected) => {\n  const selectedEntry = selected[selected.length - 1];\n  if (!selectedEntry) {\n    return [];\n  } else if (selectedEntry.category === 'testcase') {\n    return selected.slice(0, selected.length - 1);\n  } else {\n    return selected;\n  }\n};\n\n\nexport {\n  CreateNavButtons,\n  GetSelectedUid,\n  GetNavEntries,\n  GetNavBreadcrumbs,\n};\n","import React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport {LIGHT_GREY} from \"../Common/defaults\";\n\n/**\n * Vertical column for navigation bar.\n */\n\nconst Column = (props) => {\n  const leftStyle = {width: `${props.width}em`};\n  const rightStyle = {left: `${props.width}em`};\n\n  return (\n    <>\n      <div className={css(styles.column)} style={leftStyle}>\n        {props.children}\n      </div>\n      <div className={css(styles.column)} style={rightStyle}/>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  column: {\n    height: '100%',\n    border: 'none',\n    position: 'absolute',\n    backgroundColor: LIGHT_GREY,\n    boxShadow: '0px 2px 5px 0px rgba(0, 0, 0, 0.26), ' +\n      '0px 2px 10px 0px rgba(0, 0, 0, 0.16)',\n    display: 'inline-block',\n    top: '4.5em',\n    'padding-bottom': '4.5em',\n    zIndex: 200,\n  },\n});\n\nexport default Column;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ListGroup} from 'reactstrap';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport NavEntry from './NavEntry';\nimport {CreateNavButtons} from './navUtils.js';\nimport Column from './Column';\nimport {STATUS, COLUMN_WIDTH} from \"../Common/defaults\";\n\n/**\n * Render a vertical list of all the currently selected entries children.\n */\nconst NavList = (props) => {\n  const navButtons = CreateNavButtons(\n    props,\n    (entry) => (\n      <NavEntry\n        name={entry.name}\n        status={entry.status}\n        type={entry.category}\n        caseCountPassed={entry.counter.passed}\n        caseCountFailed={entry.counter.failed}\n      />\n    ),\n    props.selectedUid\n  );\n\n  return (\n    <Column width={COLUMN_WIDTH} >\n      <ListGroup className={css(styles.buttonList)}>{navButtons}</ListGroup>\n    </Column>\n  );\n};\n\nconst styles = StyleSheet.create({\n  buttonList: {\n    'overflow-y': 'auto',\n    'height': '100%',\n  }\n});\n\n\nNavList.propTypes = {\n  /** Nav list entries to be displayed */\n  entries: PropTypes.arrayOf(PropTypes.shape({\n    uid: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.oneOf(STATUS),\n    counter: PropTypes.shape({\n      passed: PropTypes.number,\n      failed: PropTypes.number,\n    }),\n  })),\n  /** Number of entries in the breadcrumb menu */\n  breadcrumbLength: PropTypes.number,\n  /** Function to handle Nav entries being clicked (selected) */\n  handleNavClick: PropTypes.func,\n  /** Entity filter */\n  filter: PropTypes.string,\n  /** Flag to display tags on navbar */\n  displayEmpty: PropTypes.bool,\n  /** Flag to display empty testcase on navbar */\n  displayTags: PropTypes.bool,\n  /** Entry uid to be focused */\n  selectedUid: PropTypes.string,\n};\n\nexport default NavList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NavBreadcrumbs from \"./NavBreadcrumbs\";\nimport NavList from \"./NavList\";\nimport {GetSelectedUid, GetNavEntries, GetNavBreadcrumbs} from \"./navUtils\";\n\n/**\n * Nav component:\n *   * render breadcrumbs menu.\n *   * render list menu.\n *   * handle clicking through menus, tracking what has been selected.\n *   * auto select entries if the list is empty or has 1 entry.\n */\nconst Nav = (props) => {\n  const navEntries = GetNavEntries(props.selected);\n  const breadCrumbEntries = GetNavBreadcrumbs(props.selected);\n\n  return (\n    <>\n      <NavBreadcrumbs\n        entries={breadCrumbEntries}\n        handleNavClick={props.handleNavClick}\n      />\n      <NavList\n        entries={navEntries}\n        breadcrumbLength={breadCrumbEntries.length}\n        handleNavClick={props.handleNavClick}\n        filter={props.filter}\n        displayEmpty={props.displayEmpty}\n        displayTags={props.displayTags}\n        selectedUid={GetSelectedUid(props.selected)}\n      />\n    </>\n  );\n};\n\nNav.propTypes = {\n  /** Testplan report */\n  report: PropTypes.object,\n  /** Selected navigation entries. */\n  selected: PropTypes.arrayOf(PropTypes.object),\n  /** Function to handle saving the assertions found by the Nav */\n  saveAssertions: PropTypes.func,\n  /** Entity filter */\n  filter: PropTypes.string,\n  /** Flag to display tags on navbar */\n  displayTags: PropTypes.bool,\n  /** Flag to display empty testcase on navbar */\n  displayEmpty: PropTypes.bool,\n  /** Callback when a navigation entry is clicked. */\n  handleNavClick: PropTypes.func,\n};\n\nexport default Nav;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst DescriptionPane = (props) => {\n    let description = null;\n    if (props.descriptionEntries && props.descriptionEntries.length !== 0) {\n        description = props.descriptionEntries.map((element, index) => {\n            return (\n                <div key={'descriptionDiv'+index}>\n                    <pre key={'descriptionPre'+index}>\n                        {element}\n                    </pre>\n                </div>\n            );\n        });\n    }\n    \n    return (\n        <div className='description'>\n            {description}\n        </div>\n    );\n};\n\nDescriptionPane.propTypes = {\n    /** Selected entries' description list to be displayed */\n    descriptionEntries: PropTypes.arrayOf(PropTypes.string),\n};\n\n\n    \nexport default DescriptionPane;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Scrollbars} from 'react-custom-scrollbars';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCaretSquareUp,\n} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(\n  faCaretSquareUp\n);\n\n/**\n * A scrollable container that after rendering an initial amount of items will\n * only render the rest of them (in chunks) if they are required, or in this\n * case, when the user scrolls to the bottom of the container.\n */\nclass InfiniteScroll extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasMore: true,\n      isLoading: false,\n      items: [],\n      currentIndex: 0,\n      id: undefined,\n    };\n\n    this.scrollbars = React.createRef();\n    this.loadItems = this.loadItems.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n  }\n\n  /**\n   * Calculate if the container is scrolled to the bottom.\n   *\n   * @param {object} el - Container DOM element.\n   * @returns {boolean}\n   * @public\n   */\n  static isContainerScrolledToTheBottom(el) {\n    return el.getScrollHeight() - el.getScrollTop() === el.getClientHeight();\n  }\n\n  /**\n   * Handler function for the container's onScroll event. If the component is\n   * not already loading new items and there are items that are not yet loaded,\n   * it will check if the container is scrolled to the bottom and call\n   * [loadItems]{@link InfiniteScroll#loadItems}.\n   *\n   */\n  onScroll() {\n    if (this.state.isLoading || !this.state.hasMore)\n      return;\n\n    if (InfiniteScroll.isContainerScrolledToTheBottom(this.scrollbars.current))\n      this.loadItems(this.props.sliceSize);\n  }\n\n  /**\n   * Load the first batch of items to be displayed.\n   *\n   * @public\n   */\n  UNSAFE_componentWillMount() {\n    this.loadItems(this.props.initSliceSize);\n  }\n\n  /**\n   * Load items from the props to state.\n   *\n   * @param sliceSize - number of items to be loaded\n   * @public\n   */\n  loadItems(sliceSize = 30) {\n    this.setState({ isLoading: true }, () => {\n      let nextItems = this.props.items.slice(\n        this.state.currentIndex, this.state.currentIndex + sliceSize);\n\n      this.setState({\n        hasMore: nextItems.length === sliceSize,\n        isLoading: false,\n        items: [...this.state.items, ...nextItems],\n        currentIndex: this.state.items.length + nextItems.length,\n      });\n    });\n  }\n\n  render() {\n    const {isLoading, items} = this.state;\n\n    const children = React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, {\n        entries: items,\n      });\n    });\n\n    return (\n      <Scrollbars autoHide onScroll={this.onScroll} ref={this.scrollbars}>\n        <div style={{paddingRight: '2rem'}}>\n          {children}\n          {isLoading && <div>Loading...</div>}\n        </div>\n      </Scrollbars>\n    );\n  }\n}\n\nInfiniteScroll.propTypes = {\n  /** Array of items to be rendered */\n  items: PropTypes.arrayOf(PropTypes.object),\n  /** State of the expand all/collapse all functionality */\n  globalIsOpen: PropTypes.bool,\n  /** Function to reset the expand all/collapse all state if an individual \n   * assertion's visibility is changed */\n  resetGlobalIsOpen: PropTypes.func,\n  /** Number of items to be rendered when the page is first loaded */\n  initSliceSize: PropTypes.number,\n  /** Number of extra items to be rendered each time the user scrolled to the \n   * bottom */\n  sliceSize: PropTypes.number,\n  /** Components will be rendered in InfiniteScroll */\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n};\n\nexport default InfiniteScroll;\n","/**\n * Common utility functions.\n */\nimport {NAV_ENTRY_DISPLAY_DATA} from \"./defaults\";\n\n/**\n * Get the data to be used when displaying the nav entry.\n *\n * @param {object} entry - nav entry.\n * @returns {Object}\n */\nfunction getNavEntryDisplayData(entry) {\n  let metadata = {};\n  for (const attribute of NAV_ENTRY_DISPLAY_DATA) {\n    if (entry.hasOwnProperty(attribute)) {\n      metadata[attribute] = entry[attribute];\n    }\n  }\n  return metadata;\n}\n\n/**\n * Returns true of any element of an iterable is true. If not, returns false.\n *\n * @param iterable\n * @returns {boolean}\n */\nfunction any(iterable) {\n  for (let index = 0; index < iterable.length; ++index) {\n    if (iterable[index]) return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns a sorted array of the given iterable.\n *\n * @param iterable\n * @param {function} key - function that serves as a key for the sort comparison\n * @param {boolean} reverse - if true, the sorted list is reversed\n * @returns {Array}\n */\nfunction sorted(iterable, key=(item) => (item), reverse=false) {\n  return iterable.sort((firstMember, secondMember) => {\n    let reverser = reverse ? 1 : -1;\n\n    return ((key(firstMember) < key(secondMember))\n      ? reverser\n      : ((key(firstMember) > key(secondMember))\n        ? (reverser * -1)\n        : 0));\n  });\n}\n\n/**\n * Creates a string that can be used for dynamic id attributes\n * Example: \"id-so7567s1pcpojemi\"\n * @returns {string}\n */\nfunction uniqueId() {\n  return 'id-' + Math.random().toString(36).substr(2, 16);\n}\n\n/**\n * Generate a hash code by string\n * @param {string} str - string that generate hash code\n * @returns {number}\n */\nfunction hashCode(str) {\n  var hash = 0, i, chr, len;\n  if (str.length === 0) return hash;\n  for (i = 0, len = str.length; i < len; i++) {\n    chr = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\n/**\n * Get the string representation of a HTML DOM node\n * @param {object} dom - HTML DOM node\n * @returns {string}\n */\nfunction domToString(dom) {\n  let tmp = document.createElement(\"div\");\n  tmp.appendChild(dom);\n  return tmp.innerHTML;\n}\n\nexport {\n  getNavEntryDisplayData,\n  any,\n  sorted,\n  uniqueId,\n  hashCode,\n  domToString,\n};\n","import React, {Fragment} from 'react';\nimport {hashCode} from '../../Common/utils';\n\n/** @module basicAssertionUtils */\n\n/**\n * Content required to render a basic assertion. The content is rendered by the\n * BasicAssertion component, refer to that component for a diagram of how each\n * content section is displayed.\n *\n * @typedef {Object} AssertionContent\n * @property {object|string|null} preTitle - Content above the assertion title\n * @property {object|string|null} preContent - Content between the preTitle and\n *                                             the title\n * @property {object|string|null} leftTitle - Left side of the title\n * @property {object|string|null} rightTitle - Right side of the title\n * @property {object|string|null} leftContent - Left side of the main content\n * @property {object|string|null} rightContent - Right side of the main content\n * @property {object|string|null} postTitle - Content immediately below the\n *                                            title\n * @property {object|string|null} postContent - Final content of assertion\n */\n\n/**\n * Prepare the content for the Log assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for Log assertion\n * @private\n */\nfunction prepareLogContent(assertion, defaultContent) {\n  const preContent = (\n    <pre>\n      {assertion.message !== undefined ? assertion.message : null}\n     </pre>\n  );\n\n  return {\n    ...defaultContent,\n    preContent: preContent,\n    leftTitle: null,\n    rightTitle: null,\n  };\n}\n\n/**\n * Prepare the content for the Equal assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for Equal assertion\n * @private\n */\nfunction prepareEqualContent(assertion, defaultContent) {\n  const leftContent = <span>{assertion.second}</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n  };\n}\n\n/**\n * Prepare the content for the NotEqual assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for NotEqual assertion\n * @private\n */\nfunction prepareNotEqualContent(assertion, defaultContent) {\n  const leftContent = <span>&lt;not&gt; {assertion.second}</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n  };\n}\n\n/**\n * Prepare the content for comparison assertions (lessThan,\n * greaterThan etc.).\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for comparison assertion\n * @private\n */\nfunction prepareComparisonContent(assertion, defaultContent) {\n    const leftContent = (\n      <span>value {assertion.label} {assertion.second}</span>\n    );\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n  };\n}\n\n/**\n * Prepare the content for the IsClose assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for IsClose assertion\n * @private\n */\nfunction prepareIsCloseContent(assertion, defaultContent) {\n  const leftContent = (\n    <span>\n      value {assertion.label} {assertion.second}\n      &nbsp;within rel_tol={assertion.rel_tol} or abs_tol={assertion.abs_tol}\n    </span>\n  );\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n  };\n}\n\n/**\n * Prepare the content for the IsTrue assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for IsTrue assertion\n * @private\n */\nfunction prepareIsTrueContent(assertion, defaultContent) {\n  const leftContent = <span>value is True</span>;\n  const rightContent = (\n    <span>{assertion.passed ? `True` : `False`}</span>\n  );\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n  };\n}\n\n/**\n * Prepare the content for the IsFalse assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for IsFalse assertion\n * @private\n */\nfunction prepareIsFalseContent(assertion, defaultContent) {\n  const leftContent = <span>value is False</span>;\n  const rightContent = (\n    <span>{assertion.passed ? `False` : `True`}</span>\n  );\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n  };\n}\n\n/**\n * Prepare the content for the Fail assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for Fail assertion\n * @private\n */\nfunction prepareFailContent(assertion, defaultContent) {\n  return {\n    ...defaultContent,\n    leftTitle: null,\n    rightTitle: null,\n    leftContent: null,\n    rightContent: null,\n  };\n}\n\n/**\n * Prepare the content for the Contain assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for Contain assertion\n * @private\n */\nfunction prepareContainContent(assertion, defaultContent) {\n  const leftContent = <span>{assertion.member} &lt;in&gt; value</span>;\n  const rightContent = <span>{assertion.container}</span>;\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n  };\n}\n\n/**\n * Prepare the content for the NotContain assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for NotContain assertion\n * @private\n */\nfunction prepareNotContainContent(assertion, defaultContent) {\n  const leftContent = (\n    <span>{assertion.member} &lt;not in&gt; value</span>\n  );\n  const rightContent = <span>{assertion.container}</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n  };\n}\n\n/**\n * Prepare the content for the LineDiff assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for LineDiff assertion\n * @private\n */\nfunction prepareLineDiffContent(assertion, defaultContent) {\n  const uid = hashCode(JSON.stringify(assertion));\n  const leftContent = (\n    <span>\n      {\n        assertion.delta.map(\n          (line, index) => {\n            return (\n              <span\n                key={\"LineDiffleftContent\" + uid + index}\n                style={{ whiteSpace: 'pre' }}\n              >\n                {line}\n              </span>\n            );\n          }\n        )\n      }\n    </span>\n  );\n  const leftTitle = (\n    <span>{!assertion.passed ? 'Differences:' : 'No differences.'}</span>\n  );\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: null,\n    leftTitle: leftTitle,\n    rightTitle: null,\n  };\n}\n\n/*\n * Prepare the content for the ExceptionRaised and ExceptionNotRaised\n * assertions.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for exception assertion\n * @private\n */\nfunction prepareExceptionContent(assertion, defaultContent) {\n  const leftContent = <span>{assertion.expected_exceptions}</span>;\n  const rightContent = (\n    <span>\n      {assertion.raised_exception[0]} (value: {assertion.raised_exception[1]})\n    </span>\n  );\n  const leftTitle = <span>Expected exceptions:</span>;\n  const rightTitle = <span>Raised exceptions:</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n    leftTitle: leftTitle,\n    rightTitle: rightTitle,\n  };\n}\n\n/*\n * Prepare the content for the RegexMatch, RegexMatchNotExists, RegexSearch,\n * RegexSearchNotExists and RegexFindIter assertions.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for regex assertion\n * @private\n */\nfunction prepareRegexContent(assertion, defaultContent) {\n  const assertionString = assertion.string;\n  let reconstructedString = [];\n  let prevIdx = 0;\n  const uid = hashCode(JSON.stringify(assertion)).toString();\n\n  assertion.match_indexes.forEach(index => {\n    reconstructedString.push(\n      <span key={uid + index + '0'}>\n        {assertionString.slice(prevIdx, index[0])}\n      </span>\n    );\n    reconstructedString.push(\n      <span\n        style={{ backgroundColor: 'rgba(0, 123, 255, .5)' }}\n        key={uid + index + '1'}\n      >\n        {assertionString.slice(index[0], index[1])}\n      </span>\n    );\n    prevIdx = index[1];\n  });\n\n  reconstructedString.push(\n    <span key={uid + prevIdx}>\n      {assertionString.slice(prevIdx)}\n    </span>\n  );\n\n  const leftContent = (\n    <div>\n      <span>{assertion.pattern}</span>\n      <span>\n        {\n          assertion.condition && (\n            <div key={assertion.uid}>\n              <br/>\n              <strong>Condition:</strong>\n              <br/>\n              <span>{assertion.condition}</span>\n            </div>\n          )\n        }\n      </span>\n    </div>\n  );\n  const rightContent = (\n    <span style={{ whiteSpace: 'pre' }}>\n      {reconstructedString}\n    </span>\n  );\n  const leftTitle = <span>Pattern:</span>;\n  const rightTitle = <span>String:</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n    leftTitle: leftTitle,\n    rightTitle: rightTitle,\n  };\n}\n\n/**\n * Prepare the content for the RegexMatchLine assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for RegexMatchLine assertion\n * @private\n */\nfunction prepareRegexMatchLineContent(assertion, defaultContent) {\n  const assertionString = assertion.string.split('\\n');\n  const uid = hashCode(JSON.stringify(assertion));\n  const reconstructedString = assertion.match_indexes.map((index) => (\n      <span\n        key={uid + index}\n        style={{ backgroundColor: 'rgba(0, 123, 255, .5)' }}\n      >\n        {assertionString[index[0]].slice(index[1], index[2]) + '\\n'}\n      </span>\n  ));\n\n  const leftContent = <span>{assertion.pattern}</span>;\n  const rightContent = (\n    <span style={{ whiteSpace: 'pre' }}>\n      {reconstructedString}\n    </span>\n  );\n  const leftTitle = <span>Pattern:</span>;\n  const rightTitle = <span>String:</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n    leftTitle: leftTitle,\n    rightTitle: rightTitle,\n  };\n}\n\n/**\n * Prepare the content for the XMLCheck assertion.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for XMLCheck assertion\n * @private\n */\nfunction prepareXMLCheckContent(assertion, defaultContent) {\n  const leftContent = <span>{assertion.xpath}</span>;\n  const rightContent = (\n    <span style={{ whiteSpace: 'pre' }}>\n      {assertion.xml.replace(/ {12}/g, '')}\n    </span>\n  );\n  const leftTitle = <span>Expected XPath:</span>;\n  const rightTitle = <span>XML:</span>;\n\n  return {\n    ...defaultContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n    leftTitle: leftTitle,\n    rightTitle: rightTitle,\n  };\n}\n\n/**\n * Prepare the content for the EqualSlices and EqualExcludesSlices\n * assertions.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for equal slices assertion\n * @private\n */\nfunction prepareEqualSlicesContent(assertion, defaultContent) {\n  const preTitle = <span>Slices:</span>;\n  const preContent = (\n    <Fragment>\n      <span style={{ whiteSpace: 'pre' }}>\n        {assertion.data.map(slice => slice[0]).join('\\n')}\n      </span>\n      <hr />\n    </Fragment>\n  );\n  const leftContent = (\n    <span>[{prepareSliceLists(assertion.expected, assertion.data)}]</span>\n  );\n  const rightContent = (\n    <span>[{prepareSliceLists(assertion.actual, assertion.data)}]</span>\n  );\n  const leftTitle = <span>Expected:</span>;\n  const rightTitle = <span>Value:</span>;\n\n  return {\n    ...defaultContent,\n    preTitle: preTitle,\n    preContent: preContent,\n    leftContent: leftContent,\n    rightContent: rightContent,\n    leftTitle: leftTitle,\n    rightTitle: rightTitle,\n  };\n}\n\n/**\n * Return a list of span components that wrap the elements of the list.\n * Each element is colored:\n *  - green if it falls in the slice and it matches the expected value,\n *  - red if it falls in the slice and it does not match the expected value or\n *  - black if it does not fall in the slice.\n *\n * @param {Array} list - List of items in the string/array.\n * @param {object} data - Object containing the status of each element.\n * @returns {Array}\n * @private\n */\nfunction prepareSliceLists(list, data) {\n  const comparisonIndices = data.reduce((accumulator, line) => {\n    accumulator.push(...line[1]);\n    return accumulator;\n  }, []);\n\n  const mismatchIndices = data.reduce((accumulator, line) => {\n    accumulator.push(...line[2]);\n    return accumulator;\n  }, []);\n\n  list = list.length > 1 ? list : list[0].split('');\n\n  return list.map((key, index) =>\n    <span key={`slice_${list.join()}_${index}`}\n      style={{\n        color: mismatchIndices.indexOf(index) >= 0\n          ? 'red'\n          : comparisonIndices.indexOf(index) >= 0\n            ? 'green'\n            : 'black'\n      }}>\n      {JSON.stringify(key)}\n    </span>\n  ).reduce((prev, curr) => [prev, ', ', curr]);\n}\n\n/**\n * Prepare the content for the DictCheck and FixCheck assertions.\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for dict match assertion\n * @private\n */\nfunction prepareDictCheckContent(assertion, defaultContent) {\n  const preContent = (\n    <span>\n      Existence check:\n      [{assertion.has_keys.map((key, index) =>\n        <span\n          style={{\n            color: assertion.has_keys_diff.indexOf(key) >= 0 ? 'red' : 'black'\n          }}\n          key={`check_${key}_${index}`}>\n          {JSON.stringify(key)}\n        </span>).reduce((prev, curr) => [prev, ', ', curr])}]\n      <br />\n      Absence check:\n      [{assertion.absent_keys.map((key, index) =>\n        <span\n          style={{\n            color: assertion.absent_keys_diff.indexOf(key) >= 0\n            ? 'red'\n            : 'black'\n          }}\n          key={`check_${key}_${index}`}>\n          {JSON.stringify(key)}\n        </span>).reduce((prev, curr) => [prev, ', ', curr])}]\n    </span>\n  );\n\n  return {\n    ...defaultContent,\n    preContent: preContent,\n    leftTitle: null,\n    rightTitle: null,\n  };\n}\n\n/**\n * Prepare the contents of the BasicAssertion component.\n *\n * @param {object} assertion\n * @returns {AssertionContent} Content for the assertion based on its type.\n * @public\n */\nfunction prepareBasicContent(assertion) {\n  // Default content for a basic assertion. Specific assertion types will\n  // modify this content.\n  const defaultContent = {\n    preTitle: null,\n    preContent: null,\n    leftTitle: 'Expected:',\n    rightTitle: 'Value:',\n    leftContent: assertion.second,\n    rightContent: assertion.first,\n    postTitle: null,\n    postContent: null,\n  };\n\n  // Fan out to the relevant function to prepare content for each assertion\n  // type.\n  switch (assertion.type) {\n    case 'Log':\n      return prepareLogContent(assertion, defaultContent);\n\n    case 'Equal':\n      return prepareEqualContent(assertion, defaultContent);\n\n    case 'NotEqual':\n      return prepareNotEqualContent(assertion, defaultContent);\n\n    case 'Greater':\n    case 'GreaterEqual':\n    case 'Less':\n    case 'LessEqual':\n      return prepareComparisonContent(assertion, defaultContent);\n\n    case 'IsClose':\n      return prepareIsCloseContent(assertion, defaultContent);\n\n    case 'IsTrue':\n      return prepareIsTrueContent(assertion, defaultContent);\n\n    case 'IsFalse':\n      return prepareIsFalseContent(assertion, defaultContent);\n\n    case 'Fail':\n      return prepareFailContent(assertion, defaultContent);\n\n    case 'Contain':\n      return prepareContainContent(assertion, defaultContent);\n\n    case 'NotContain':\n      return prepareNotContainContent(assertion, defaultContent);\n\n    case 'LineDiff':\n      return prepareLineDiffContent(assertion, defaultContent);\n\n    case 'ExceptionRaised':\n    case 'ExceptionNotRaised':\n      return prepareExceptionContent(assertion, defaultContent);\n\n    case 'RegexMatch':\n    case 'RegexMatchNotExists':\n    case 'RegexSearch':\n    case 'RegexSearchNotExists':\n    case 'RegexFindIter':\n      return prepareRegexContent(assertion, defaultContent);\n\n    case 'RegexMatchLine':\n      return prepareRegexMatchLineContent(assertion, defaultContent);\n\n    case 'XMLCheck':\n      return prepareXMLCheckContent(assertion, defaultContent);\n\n    case 'EqualSlices':\n    case 'EqualExcludeSlices':\n      return prepareEqualSlicesContent(assertion, defaultContent);\n\n    case 'DictCheck':\n    case 'FixCheck':\n      return prepareDictCheckContent(assertion, defaultContent);\n\n    default:\n      return defaultContent;\n  }\n}\n\nexport {\n  prepareBasicContent,\n};\n\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {css, StyleSheet} from 'aphrodite';\nimport {Col, Row} from 'reactstrap';\n\nimport {prepareBasicContent} from './basicAssertionUtils';\n\n/**\n * Component used to render basic, text based assertions (e.g.: basic\n * comparisons, regex matches, etc). It is designed to render the following\n * grid:\n *  _______________________________\n * | preTitle                      |\n * |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n * | preContent                    |\n * |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n * | leftTitle     | rightTitle    |\n * |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n * | preContent    | rightContent  |\n * |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n * | postTitle                     |\n * |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n * | postContent                   |\n * |_______________________________|\n *\n * basicAssertionUtils' {@link prepareBasicContent} function is called to fetch\n * the data to be displayed. It returns an object that fills the aforementioned\n * grid with data.\n */\nclass BasicAssertion extends Component {\n  render() {\n    const {\n      preTitle,\n      preContent,\n      leftTitle,\n      rightTitle,\n      leftContent,\n      rightContent,\n      postTitle,\n      postContent,\n    } = prepareBasicContent(this.props.assertion);\n\n    return (\n      <Fragment>\n        <Row>\n          <Col lg='12'>\n            <strong>{preTitle}</strong>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg='12' className={css(styles.contentSpan)}>\n            {preContent}\n          </Col>\n        </Row>\n        <Row>\n          <Col lg='6'>\n            <strong>{leftTitle}</strong>\n          </Col>\n          <Col lg='6'>\n            <strong>{rightTitle}</strong>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg='6' className={css(styles.contentSpan)}>\n            <span>\n              {leftContent}\n            </span>\n          </Col>\n          <Col lg='6' className={css(styles.contentSpan)}>\n            <span>\n              {rightContent}\n            </span>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg='12'>\n            <strong>{postTitle}</strong>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg='12' className={css(styles.contentSpan)}>\n            {postContent}\n          </Col>\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\nBasicAssertion.propTypes = {\n  /**  Assertion being rendered */\n  assertion: PropTypes.object,\n};\n\nconst styles = StyleSheet.create({\n  contentSpan: {\n    lineHeight: '110%',\n    'overflow-x': 'auto',\n  },\n});\n\nexport default BasicAssertion;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Button} from 'reactstrap';\nimport CopyToClipboard from 'react-copy-html-to-clipboard';\n\n/**\n * Component that renders the buttons of copy html to clipboard.\n */\nclass CopyButton extends Component {\n  render() {\n    return (\n      <CopyToClipboard\n        text={this.props.value}\n        options={{asHtml: true}}\n      >\n        <Button\n          outline\n          color='secondary'\n          size='sm'\n          active={false}\n        >\n          Copy\n        </Button>\n      </CopyToClipboard>\n    );\n  }\n}\n\nCopyButton.propTypes = {\n  /** The content be copied to clipboard  */\n  value: PropTypes.string,\n};\n\nexport default CopyButton;\n","/** @module tableAssertionUtils */\n\nimport {domToString} from './../../../Common/utils';\n\n/**\n * Function to prepare the column definitions for TableLog assertions.\n *\n * @param {Array} columns\n * @returns {object} \n *  {\n *    headerName: string, \n *    field: string, \n *    pinned: string, \n *    suppressResize: boolean, \n *    suppressSizeToFit: boolean, \n *    width: number\n *  }\n * @private\n */\nfunction prepareTableLogColumnDefs(columns) {\n  let columnDefs = [{\n    headerName: 'ID',\n    field: 'id',\n    pinned: 'left',\n    suppressResize: true,\n    suppressSizeToFit: true,\n    width: 72,\n  }];\n\n  columns.forEach(column => {\n    columnDefs.push({\n      headerName: column,\n      field: column,\n    });\n  });\n\n  return columnDefs;\n}\n\n/**\n * Prepare the row data of TableLog assertions.\n *\n * @param {Array} indexes - indexes of the rows\n * @param {Array} table - the table itself as an array of objects where the keys\n *  are the column titles\n * @param {Array} columns - column titles\n * @returns {Array}\n * @private\n */\nfunction prepareTableLogRowData(indexes, table, columns) {\n  let rowData = [];\n\n  indexes.forEach(index => {\n    let row = columns.reduce((accumulator, column) => {\n      accumulator[column] = table[index][column];\n      return accumulator;\n    }, {});\n\n    row['id'] = index;\n\n    rowData.push(row);\n  });\n\n  return rowData;\n}\n\n/**\n * Prepare the column definitions for TableMatch assertion.\n *\n * @param {Array} columns\n * @returns {Array}\n * @private\n */\nfunction prepareTableColumnDefs(columns) {\n  let columnDefs = [\n    {\n      headerName: 'ID', field: 'id', pinned: 'left', width: 72,\n      suppressResize: true,\n      suppressSizeToFit: true,\n      cellStyle: tableCellStyle,\n    },\n    {\n      headerName: 'Expected/Value', field: 'ev', pinned: 'left', width: 121,\n      suppressResize: true,\n      suppressSizeToFit: true,\n      suppressFilter: true,\n      cellStyle: tableCellStyle,\n    },\n    {\n      headerName: 'State', field: 'state',\n      hide: true,\n    },\n  ];\n\n  columns.forEach(column => {\n    columnDefs.push({\n      headerName: column,\n      field: column,\n      cellStyle: tableCellStyle,\n    });\n  });\n\n  return columnDefs;\n}\n\n/**\n * Prepare the row data of TableMatch assertion.\n *\n * @param {Array} data - the table itself as an array of objects where the keys\n * are the column titles\n * @param {Array} columns - column titles\n * @returns {Array}\n * @private\n */\nfunction prepareTableRowData(data, columns) {\n  let rowData = [];\n\n  data.forEach(line => {\n    const [\n      index,\n      data,\n      diff,\n      errors,\n      extra,\n    ] = line;\n\n    let passed = {};\n\n    let expectedRow = columns.reduce((accumulator, column, index) => {\n      if (diff[column]) {\n        accumulator[column] = diff[column];\n        passed[column] = false;\n      } else if (errors[column]) {\n        accumulator[column] = errors[column];\n        passed[column] = false;\n      } else if (extra[column]) {\n        accumulator[column] = extra[column];\n        passed[column] = true;\n      } else {\n        accumulator[column] = data[index];\n        passed[column] = true;\n      }\n\n      return accumulator;\n    }, {});\n\n    expectedRow['id'] = index;\n    expectedRow['ev'] = 'Expected';\n    expectedRow['passed'] = passed;\n\n    rowData.push(expectedRow);\n\n    let valueRow = columns.reduce((accumulator, column, index) => {\n      accumulator[column] = data[index];\n\n      return accumulator;\n    }, {});\n\n    valueRow['id'] = index;\n    valueRow['ev'] = 'Value';\n    valueRow['passed'] = passed;\n\n    rowData.push(valueRow);\n  });\n\n  return rowData;\n}\n\n/**\n * Prepare the column definitions for ColumnContain assertion.\n *\n * @param {string} column - name of the column\n * @returns {Array}\n * @private\n */\nfunction prepareTableColumnContainDefs(column) {\n  return [\n    {\n      headerName: 'ID', field: 'id', pinned: 'left', width: 72,\n      suppressResize: true,\n      suppressSizeToFit: true,\n      cellStyle: (params) => {\n        return !params.data.passed ? {color: 'red', fontWeight: 'bold'} : null;\n      },\n    },\n\n    {\n      headerName: column, field: 'value',\n      cellStyle: (params) => {\n        return !params.data.passed ? {color: 'red', fontWeight: 'bold'} : null;\n      },\n    },\n  ];\n}\n\n/**\n * Prepare the row data of ColumnContain assertion.\n *\n * @param {Array} data\n * @param {Array} values\n * @returns {Array}\n * @private\n */\nfunction prepareTableColumnContainRowData(data, values) {\n  return data.map(line => {\n    const [\n      index,\n      value,\n      passed,\n    ] = line;\n\n    return {\n      id: index,\n      expected: values,\n      value: value,\n      passed: passed,\n    };\n  });\n}\n\n/**\n * Function to add styling to table cells with conditions based on their values.\n *\n * @param {Array} params\n * @returns {object}\n * @private\n */\nfunction tableCellStyle(params) {\n  const isValueRow = params.data.ev === 'Value';\n  const isCellFailed = params.data.passed[params.colDef.field] === false;\n  let cellStyle = {};\n\n  if (isValueRow)\n    cellStyle['borderBottomColor'] = '#827878';\n\n  if (isCellFailed) {\n    cellStyle['color'] = 'red';\n    cellStyle['fontWeight'] = 'bold';\n  }\n\n  return cellStyle;\n\n}\n\n/**\n * Prepare the text display before the table for ColumnContain assertions.\n * The text is the values that are checked against the table.\n *\n * @param values\n * @returns {Array}\n * @private\n */\nfunction prepareTableColumnContainPreText(values) {\n  return values.map(value => JSON.stringify(value))\n    .reduce((prev, curr) => [prev, ', ', curr]);\n}\n\n/**\n * Calculate the height of the grid. If the grid has less than\n * maximumNumberOfRowsVisible, then the grid will display every row of data\n * available. If it has more than that value then maximumNumberOfRowsVisible\n * number of rows will be displayed and the table will be scrollable.\n *\n * @param {number} numberOfRows\n * @param {number} maximumNumberOfRowsVisible - Maximum number of rows to be\n * displayed\n * @returns {number}\n * @private\n */\nfunction calculateTableGridHeight(\n  numberOfRows, \n  maximumNumberOfRowsVisible = 20\n) {\n  const rowHeight = 28;\n  const headerHeight = 32;\n  const bottomPaddingOnGrid = 16 + 2;\n\n  return numberOfRows <= maximumNumberOfRowsVisible\n    ? numberOfRows * rowHeight + headerHeight + bottomPaddingOnGrid\n    : maximumNumberOfRowsVisible * rowHeight + headerHeight + \n        bottomPaddingOnGrid;\n}\n\n\n/**\n * Convert Ag-Grid columntDefs and row Data to HTML table DOM object\n *\n * @param {Array} columnDefs - Ag-Grid header\n * @param {Array} rowData - Ag-Grid data\n * @returns {string} - HTML Table\n */\nfunction gridToDOM(columnDefs, rowData) {\n  let headerKey = [];\n  let table = document.createElement('table');\n\n  let header = document.createElement('tr');\n  columnDefs.forEach((el) => {\n    if (el.hide) {\n      return;\n    }\n    let th = document.createElement('th');\n    th.innerText = el.headerName;\n    header.appendChild(th);\n    headerKey.push(el.field);\n  });\n  table.appendChild(header);\n\n  rowData.forEach((el) => {\n    let tr = document.createElement('tr');\n    headerKey.forEach((key) => {\n      let td = document.createElement('td');\n      td.innerText = el[key];\n      tr.appendChild(td);\n    });\n    table.appendChild(tr);\n  });\n  return domToString(table);\n}\n\nexport {\n  prepareTableLogColumnDefs,\n  prepareTableLogRowData,\n  prepareTableColumnDefs,\n  prepareTableRowData,\n  prepareTableColumnContainDefs,\n  prepareTableColumnContainRowData,\n  prepareTableColumnContainPreText,\n  calculateTableGridHeight,\n  gridToDOM,\n};\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {css, StyleSheet} from 'aphrodite';\nimport {AgGridReact} from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport CopyButton from './../CopyButton';\nimport {calculateTableGridHeight, gridToDOM} from './tableAssertionUtils';\n\n/**\n * Base assertion that are used to render table-like data.\n */\nclass TableBaseAssertion extends Component {\n  constructor(props) {\n    super(props);\n    this.onGridReady = this.onGridReady.bind(this);\n  }\n  /**\n   * Resize the columns of the grid if the component updated.\n   * @public\n   */\n  componentDidUpdate() {\n    this.sizeToFit();\n  }\n\n  /**\n   * Handler for the grid's onGridReady event. The grid's api is loaded and the \n   * columns are resized.\n   * @param params\n   * @public\n   */\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.sizeToFit();\n  }\n\n  /**\n   * Resize every column to take up all the available space but do not exceed \n   * the width of the grid.\n   * @public\n   */\n  sizeToFit() {\n    if (this.gridApi !== undefined) this.gridApi.sizeColumnsToFit();\n  }\n\n  render() {\n    const height = calculateTableGridHeight(this.props.rowData.length);\n\n    let copyValue = gridToDOM(this.props.columnDefs, this.props.rowData);\n\n    return (\n      <Fragment>\n        <div className={css(styles.preText)}>\n          {this.props.preText}\n        </div>\n         <div  className={css(styles.preText)}>\n          <CopyButton value={copyValue} />\n        </div>\n        <div className={\n          `ag-theme-balham ${css(styles.isResizable)} ${css(styles.gridFont)}`\n          } \n          style={{height: `${height}px`}}>\n          <AgGridReact\n            suppressColumnVirtualisation={true}\n            animateRows={true}\n            enableSorting={true}\n            enableFilter={true}\n            enableColResize={true}\n            onGridReady={this.onGridReady}\n            columnDefs={this.props.columnDefs}\n            rowData={this.props.rowData}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nTableBaseAssertion.propTypes = {\n  preText: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n  columnDefs: PropTypes.array,\n  rowData: PropTypes.array\n};\n\nconst styles = StyleSheet.create({\n  gridFont: {\n    fontSize: '13px',\n    fontFamily: 'monospace',\n  },\n\n  contentSpan: {\n    lineHeight: '110%',\n  },\n\n  isResizable: {\n    overflow: 'hidden',\n    resize: 'vertical',\n    paddingBottom: '1rem',\n    minHeight: '100px',\n  },\n\n  preText: {\n    paddingBottom: '.5rem',\n  },\n});\n\n\nexport default TableBaseAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport TableBaseAssertion from './TableBaseAssertion';\n\nimport {\n  prepareTableLogColumnDefs,\n  prepareTableLogRowData,\n} from './tableAssertionUtils';\n\n\n/**\n * Component that are used to render TableLog assertion.\n */\nclass TableLogAssertion extends Component {\n  render() {\n    let columnDefs = prepareTableLogColumnDefs(this.props.assertion.columns);\n    let rowData = prepareTableLogRowData(\n      this.props.assertion.indices, \n      this.props.assertion.table,\n      this.props.assertion.columns\n    );\n    return (\n      <TableBaseAssertion\n        columnDefs={columnDefs}\n        rowData={rowData}\n      />\n    );\n  }\n}\n\nTableLogAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object,\n};\n\n\nexport default TableLogAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport TableBaseAssertion from './TableBaseAssertion';\n\nimport {\n  prepareTableColumnDefs,\n  prepareTableRowData,\n} from './tableAssertionUtils';\n\n\n/**\n * Component that are used to render TableMatch assertion.\n */\nclass TableMatchAssertion extends Component {\n  render() {\n    let columnDefs = prepareTableColumnDefs(this.props.assertion.columns);\n    let rowData = prepareTableRowData(\n      this.props.assertion.data, \n      this.props.assertion.columns\n    );\n\n    return (\n      <TableBaseAssertion\n        columnDefs={columnDefs}\n        rowData={rowData}\n      />\n    );\n  }\n}\n\nTableMatchAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object,\n};\n\n\nexport default TableMatchAssertion;","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport TableBaseAssertion from './TableBaseAssertion';\n\nimport {\n  prepareTableColumnContainDefs,\n  prepareTableColumnContainRowData,\n  prepareTableColumnContainPreText\n} from './tableAssertionUtils';\n\n\n/**\n * Component that are used to render ColumnContain assertion.\n */\nclass ColumnContainAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.columnDefs = prepareTableColumnContainDefs(\n      this.props.assertion.column);\n    this.rowData = prepareTableColumnContainRowData(\n      this.props.assertion.data, this.props.assertion.values);\n  }\n\n  render() {\n    let preText = (\n      <Fragment>\n        Values: [{\n          prepareTableColumnContainPreText(this.props.assertion.values)\n        }]\n      </Fragment>\n    );\n\n    return (\n      <TableBaseAssertion\n        columnDefs={this.columnDefs}\n        rowData={this.rowData}\n        preText={preText}\n      />\n    );\n  }\n}\n\nColumnContainAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object,\n};\n\n\nexport default ColumnContainAssertion;","import {any, sorted, domToString} from './../../../Common/utils';\nimport {DICT_GRID_STYLE} from './../../../Common/defaults';\n\n/** @module dictAssertionUtils */\n\n/**\n * Helper function used to sort the data of DictMatch and FixMatch assertions.\n * The output of these assertions is a flattened JSON where the rows are in the\n * following format:\n *\n *    [level, key, status, expected, value]\n *\n * The sorting happens recursively by slicing at rows with the current depth\n * level.\n *\n * @param {Array} origFlattenedJSON\n * @param {number} depth - depth level of the nested structure\n * @param {boolean} reverse - if true, the sorted list is reversed\n * @param {boolean} orderByStatus - if true, the list will be ordered by status,\n * alphabetical by keys otherwise\n * @returns {Array}\n * @private\n */\nfunction sortFlattenedJSON(\n  origFlattenedJSON, \n  depth = 0, \n  reverse = false, \n  orderByStatus = true\n) {\n  // deep copy the original list\n  origFlattenedJSON = origFlattenedJSON.slice();\n\n  let sortedFlattenedJSONList = [];\n  let startingIndexes = [];\n  let startingAndEndingIndexes = [];\n\n  // return early if there is only 1 item\n  if (origFlattenedJSON.length === 1) return origFlattenedJSON;\n\n  // when slicing on anything but the 0th level, \n  // the first item of the list is the key of that object (slice),\n  // so it is removed and added to the sorted list\n  if (depth !== 0) {\n    sortedFlattenedJSONList.push(origFlattenedJSON.shift());\n\n    // if only 1 item remains after removing the key, \n    // add it do the sorted list and return it\n    if (origFlattenedJSON.length === 1) {\n      sortedFlattenedJSONList.push(...origFlattenedJSON);\n      return sortedFlattenedJSONList;\n    }\n  }\n\n  const set = new Set(origFlattenedJSON.map(line => line[0]));\n  const allItemsAreSameLevel = set.size === 1;\n\n  // if all remaining items of the list are on the same depth level, \n  // they can be sorted and returned\n  if (allItemsAreSameLevel) {\n    sortedFlattenedJSONList.push(\n      ...sorted(\n        origFlattenedJSON, \n        (item) => orderByStatus ? item[2] : item[1],\n        reverse\n      )\n    );\n\n    return sortedFlattenedJSONList;\n  } else {\n    // create a new object that contains the indexes of the rows\n    startingIndexes = origFlattenedJSON.map(\n      (line, index) => ({ startingKey: index, data: line })\n    );\n\n    // if there is an item that has a depth value less than the current one, \n    // it is because the examined slice is a list\n    const isList = any(origFlattenedJSON.map(line => line[0] < depth));\n\n    if (isList) {\n      // the lines with less depth value than the current one are list item \n      // separators, so only their indexes matter depth is not increased so at \n      // the next recursion everything can go back to normal\n      startingIndexes = startingIndexes.filter(\n        line => line.data[0] === depth - 1\n      );\n      depth += 0;\n    } else {\n      // if the current slice is not a list, then we omit the indexes of the \n      // lines that have no key\n      startingIndexes = startingIndexes.filter(\n        line => line.data[0] === depth && line.data[1] !== ''\n      );\n      depth += 1;\n    }\n\n    // calculate the ending indexes by the already calculated starting indexes,\n    // these will be used to do the slicing\n    startingIndexes.forEach((line, index) => {\n      if (index !== startingIndexes.length - 1) {\n        startingAndEndingIndexes.push({\n          startingKey: line.startingKey,\n          endingKey: startingIndexes[index + 1].startingKey,\n          data: line.data\n        });\n      } else {\n        startingAndEndingIndexes.push({\n          startingKey: startingIndexes[index].startingKey,\n          endingKey: origFlattenedJSON.length,\n          data: startingIndexes[index].data\n        });\n      }\n    });\n\n    // sort the list\n    startingAndEndingIndexes = sorted(\n      startingAndEndingIndexes, \n      item => orderByStatus ? item.data[2] : item.data[1], reverse\n    );\n\n    // start recursion on the sorted slices of the list\n    startingAndEndingIndexes.map(key => sortedFlattenedJSONList.push(\n      ...sortFlattenedJSON(\n        origFlattenedJSON.slice(key.startingKey, key.endingKey),\n        depth,\n        reverse,\n        orderByStatus\n      )\n    ));\n\n    return sortedFlattenedJSONList;\n  }\n}\n\n/**\n * Prepare the column definitions for DictMatch, DictLog, FixMatch, FixLog \n * assertions. DictMatch and FixMatch should include expect column.\n *\n * @param {string|object|function} cellStyle - A string, object or function that\n * will define the styling of the cells.\n * @param {class} cellRenderer - Custom component used by the grid to render the\n * cells.\n * @param {boolean} hasExpected - If true, the list will include expect column.\n * @returns {{headerName: string, field: string, hide: boolean}}\n * @private\n */\nfunction prepareDictColumnDefs(cellStyle, cellRenderer, hasExpected) {\n  const columnDefs = [{\n    headerName: 'Descriptor',\n    field: 'descriptor',\n    hide: true,\n  }];\n\n  const keyColumn = {\n    headerName: 'Key',\n    field: 'key',\n    suppressMovable: true,\n    pinned: 'left',\n    cellStyle: cellStyle,\n    cellRendererFramework: cellRenderer,\n  };\n  columnDefs.push(keyColumn);\n\n  if (hasExpected) {\n    const expectedColumn = {\n      headerName: 'Expected',\n      field: 'expected',\n      cellStyle: cellStyle,\n      cellRendererFramework: cellRenderer,\n    };\n    columnDefs.push(expectedColumn);\n  }\n\n  const valueColumn = {\n    headerName: 'Value',\n    field: 'value',\n    cellStyle: cellStyle,\n    cellRendererFramework: cellRenderer,\n  };\n  columnDefs.push(valueColumn);\n\n  return columnDefs;\n}\n\n/**\n * Prepare the rows for Dict/FixMatch assertions.\n *\n * @param {object} data - Result of the assertion as a flattened dictionary\n * @param {number} lineNo - lineNo property of the assertion used to identify\n * the assertion on the rendered page. This is not what lineNo was intened to be\n * used for. It would be better to use some UUID to indentify each Assertion.\n * @returns {Array}\n * @private\n */\nfunction prepareDictRowData(data, lineNo) {\n  return data.map((line, index, originalArray) => {\n    let level, key, status, expectedValue, actualValue;\n    const isLog = line.length === 3;\n\n    if (isLog) {\n      [level, key, actualValue] = line;\n    } else {\n      [level, key, status, actualValue, expectedValue] = line;\n    }\n\n    const isEmptyLine = key.length === 0 && actualValue.length === 0;\n    const hasAcutalValue = Array.isArray(actualValue);\n    const hasExpectedValue = Array.isArray(expectedValue);\n\n    let lineObject = {\n      descriptor: {\n        lineNo: lineNo,\n        indent: level,\n        isListKey:\n          originalArray[index + 1] && originalArray[index + 1][1] === '',\n        isEmptyLine: isEmptyLine,\n        status: status\n      }\n    };\n\n    if (isEmptyLine) {\n      // Empty lines are used to display breaks between list entries more\n      // clearly.\n      lineObject.key = { value: null, type: null };\n    } else {\n      lineObject.key = { value: key, type: 'key' };\n      if (hasAcutalValue) {\n        lineObject.value = { value: actualValue[1], type: actualValue[0] };\n      }\n      if (hasExpectedValue) {\n        lineObject.expected = {\n          value: expectedValue[1],\n          type: expectedValue[0]\n        };\n      }\n    }\n\n    return lineObject;\n  });\n}\n\n/**\n * Function to add styling to cells with conditions based on their values.\n *\n * @param {Object} params\n * @returns {object} css style object\n * @private\n */\nfunction dictCellStyle(params) {\n  const isValue = params.colDef.field !== 'key';\n  const isFailed = params.data.descriptor.status === 'Failed';\n  let cellStyle = {};\n\n  if (isFailed) {\n    cellStyle.color = 'red';\n    cellStyle.fontWeight = 'bold';\n  }\n\n  if (isValue) {\n    cellStyle.backgroundColor = '#BDC3C750';\n  }\n\n  return cellStyle;\n}\n\n/**\n * Calculate the height of the grid. If the grid has less than\n * maximumNumberOfRowsVisible, then the grid will display every row of data\n * available. If it has more than that value then maximumNumberOfRowsVisible\n * number of rows will be displayed and the table will be scrollable.\n *\n * @param {number} numberOfRows\n * @param {number} numberOfEmptyRows - Number of rows that contain no data and\n * are only used to seperate list items\n * @param {number} maximumNumberOfRowsVisible - Maximum number of rows to be\n * displayed\n * @returns {number}\n * @private\n */\nfunction calculateDictGridHeight(\n  numberOfRows, \n  numberOfEmptyRows, \n  maximumNumberOfRowsVisible = DICT_GRID_STYLE.MAX_VISIBLE_ROW\n) {\n\n  return numberOfRows <= maximumNumberOfRowsVisible\n    ? numberOfRows * DICT_GRID_STYLE.ROW_HEIGHT + numberOfEmptyRows * \n      DICT_GRID_STYLE.EMPTY_ROW_HEIGHT + DICT_GRID_STYLE.HEADER_HEIGHT + \n      DICT_GRID_STYLE.BOTTOM_PADDING\n    : maximumNumberOfRowsVisible * DICT_GRID_STYLE.ROW_HEIGHT + \n      DICT_GRID_STYLE.HEADER_HEIGHT + DICT_GRID_STYLE.BOTTOM_PADDING;\n}\n\n/**\n * Return the description of the FIX tag in the cell.\n *\n * @param {JSON} fixTagInfo - JSON object where keys are FIX tags and the values\n * are description\n * @param {string} cellValue - Value of the cell.\n * @param {string} keyValue - Value of the cell under the key column for the row\n * the cell is in.\n * @param {string} colField - The column the current cell is in.\n * @returns {{name: null, descr: null, value: null}}\n */\nfunction getFixInformation(fixTagInfo, cellValue, keyValue, colField) {\n  let fixInfo = {name: null, descr: null, value: null};\n\n  // If keyValue is null the current row is empty. Empty rows are used to\n  // display breaks between list entries more clearly.\n  const validKey = (colField === 'key') && (keyValue !== null);\n  const validExpected = colField === 'expected';\n  const validValue = colField === 'value';\n\n  if (validKey) {\n    fixInfo.descr = fixTagInfo[keyValue] !== undefined\n      ? fixTagInfo[keyValue].descr\n      : 'Missing information';\n    fixInfo.name = fixTagInfo[keyValue] !== undefined\n      ? fixTagInfo[keyValue].names[0]\n      : null;\n  } else if (validExpected || validValue) {\n    fixInfo.value = fixTagInfo[keyValue] !== undefined\n      ? fixTagInfo[keyValue].values[cellValue]\n      : null;\n  }\n\n  return fixInfo;\n}\n\n\n/**\n * Convert flattened dict assertion data to HTML table string\n *\n * @param {Array} flattenedDict - flattened dict assertion data\n * @returns {string} - HTML table\n */\nfunction flattenedDictToDOM(flattenedDict) {\n  let table = document.createElement('table');\n\n  /**\n   * Convert DictLog/FixLog assertion data to HTML Table\n   *\n   * <table>\n   *   <tr>\n   *     <th>Key</th><th>Value</th>\n   *   </tr>\n   *   <tr>\n   *     <td>  alpha</td>\n   *     <td>blue<small>str</small></td>\n   *   </tr>\n   *   ...\n   * </table>\n   *\n   *  _________________________\n   * | Key        | Value      |\n   * |------------|------------|\n   * | foo        |            |\n   * |   alpha    | blue       |\n   * |   beta     | green      |\n   * | bar        | true       |\n   * |____________|____________|\n   *\n   */\n  function logToDOM(flattenedDict, table) {\n    let header = document.createElement('tr');\n    ['Key', 'Value'].forEach((el) => {\n      let th = document.createElement('th');\n      th.innerHTML = el;\n      header.appendChild(th);\n    });\n    table.appendChild(header);\n\n    flattenedDict.forEach((el) => {\n      let [level, key, value] = el;\n      // If key and value are string and length is 0, the current row is empty.\n      // Empty row will be ignored.\n      if (key.length === 0 && value.length === 0) {\n        return;\n      }\n      let tr = document.createElement('tr');\n      let keyTd = document.createElement('td');\n      let valueTd = document.createElement('td');\n      keyTd.innerText = '\\u00A0\\u00A0'.repeat(level) + key;\n      if (Array.isArray(value)) {\n        valueTd.innerText = value[1];\n        let valueType = document.createElement('small');\n        valueType.innerText = value[0];\n        valueTd.appendChild(valueType);\n      } else {\n        valueTd.innerText = value;\n      }\n\n      tr.appendChild(keyTd);\n      tr.appendChild(valueTd);\n      table.appendChild(tr);\n    });\n  }\n\n  /**\n   * Convert DictMatch/FixMatch assertion data to HTML Table\n   *\n   * <table>\n   *   <tr>\n   *     <th>Key</th><th>Expected</th><th>Value</th>\n   *   </tr>\n   *   <tr>\n   *     <td>  alpha</td>\n   *     <td>blue<small>str</small></td>\n   *     <td>red<small>str</small></td>\n   *   </tr>\n   *   ...\n   * </table>\n   *  _____________________________________\n   * | Key       | Expected   | Value      |\n   * |-----------|------------|------------|\n   * | foo       |            |            |\n   * |   alpha   | blue       | red        |\n   * |   beta    | green      | green      |\n   * | bar       | true       | true       |\n   * |___________|____________|____________|\n   *\n   */\n  function matchToDOM(flattenedDict, table) {\n    let header = document.createElement('tr');\n    ['Key', 'Expected', 'Value'].forEach((el) => {\n      let th = document.createElement('th');\n      th.innerHTML = el;\n      header.appendChild(th);\n    });\n    table.appendChild(header);\n\n    flattenedDict.forEach((el) => {\n      let [level, key, status, actualValue, expectedValue] = el;\n      // If key and value are string and length is 0, the current row is empty.\n      // Empty row will be ignored.\n      if (key.length === 0 && actualValue.length === 0) {\n        return;\n      }\n      let tr = document.createElement('tr');\n      let keyTd = document.createElement('td');\n      let valueTd = document.createElement('td');\n      let expectedTd = document.createElement('td');\n      keyTd.innerText = '\\u00A0\\u00A0'.repeat(level) + key;\n\n      if (Array.isArray(actualValue)) {\n        valueTd.innerText = actualValue[1];\n        let valueType = document.createElement('small');\n        valueType.innerText = actualValue[0];\n        valueTd.appendChild(valueType);\n      } else {\n        valueTd.innerText = actualValue;\n      }\n\n      if (Array.isArray(expectedValue)) {\n        expectedTd.innerText = expectedValue[1];\n        let valueType = document.createElement('small');\n        valueType.innerText = expectedValue[0];\n        expectedTd.appendChild(valueType);\n      } else {\n        expectedTd.innerText = expectedValue;\n      }\n\n      tr.appendChild(keyTd);\n      tr.appendChild(expectedTd);\n      tr.appendChild(valueTd);\n      if (status === 'Failed') {\n        tr.style.color = 'red';\n      }\n      table.appendChild(tr);\n    });\n  }\n\n  if (flattenedDict && flattenedDict.length > 0) {\n    const isLog = flattenedDict[0].length === 3;\n    if (isLog) {\n      logToDOM(flattenedDict, table);\n    } else {\n      matchToDOM(flattenedDict, table);\n    }\n  }\n\n  return domToString(table);\n}\n\n\nexport {\n  sortFlattenedJSON,\n  prepareDictColumnDefs,\n  prepareDictRowData,\n  dictCellStyle,\n  calculateDictGridHeight,\n  getFixInformation,\n  flattenedDictToDOM,\n};\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {css, StyleSheet} from 'aphrodite';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport {\n  calculateDictGridHeight,\n} from './dictAssertionUtils';\n\n\n/**\n * Base assertion that are used to render dict-like data.\n * It renders the cells with the following content:\n * \n * {Buttons}\n * {Ag-Grid Table}\n * \n */\nclass DictBaseAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onGridReady = this.onGridReady.bind(this);\n  }\n\n  /**\n   * Resize the columns of the grid if the component updated.\n   * @public\n   */\n  componentDidUpdate() {\n    this.sizeToFit();\n  }\n\n  /**\n   * Handler for the grid's onGridReady event. The grid's API is loaded and the\n   * columns are resized.\n   * @param params\n   * @public\n   */\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.sizeToFit();\n  }\n\n  /**\n   * Resize every column to take up all the available space but do not exceed\n   * the width of the grid.\n   * @public\n   */\n  sizeToFit() {\n    if (this.gridApi) this.gridApi.sizeColumnsToFit();\n  }\n\n  render() {\n    const normalRows = this.props.rowData.filter(\n      row => !row.descriptor.isEmptyLine).length;\n    const emptyRows = this.props.rowData.filter(\n      row => row.descriptor.isEmptyLine).length;\n    const height = calculateDictGridHeight(normalRows, emptyRows);\n\n    return (\n      <Fragment>\n        {this.props.buttonGroup}\n        <div\n          className={\n            `ag-theme-balham ${css(styles.isResizable)} ${css(styles.gridFont)}`\n          }\n          style={{ height: `${height}px` }}\n        >\n          <AgGridReact\n            animateRows={true}\n            enableColResize={true}\n            onGridReady={this.onGridReady}\n            columnDefs={this.props.columnDefs}\n            rowData={this.props.rowData}\n            getRowHeight={\n              (params) => params.data.descriptor.isEmptyLine ? 5 : 28\n            }\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nDictBaseAssertion.propTypes = {\n  /** The group of button will be display on the top of table */\n  buttonGroup: PropTypes.object,\n  /** The head data of ag-grid */\n  columnDefs: PropTypes.array.isRequired,\n  /** The row data of ag-grid */\n  rowData: PropTypes.array.isRequired,\n};\n\nconst styles = StyleSheet.create({\n  gridFont: {\n    fontSize: '13px',\n    fontFamily: 'monospace',\n  },\n\n  isResizable: {\n    overflow: 'hidden',\n    resize: 'vertical',\n    paddingBottom: '1rem',\n    minHeight: '100px',\n  },\n});\n\n\nexport default DictBaseAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { INDENT_MULTIPLIER } from './../../../Common/defaults';\n\n/**\n * Custom cell renderer component used by DictLog and DictMatch assertions.\n *\n * It renders the cells with the following content:\n *\n * {icon} {mainText} {subText}\n *\n * Where:\n *  - icon is an info logo for custom,\n *  - mainText is the main data of the cell, it can be a key or a value,\n *  - subText is the type of the value in subscript and\n */\nclass DictCellRenderer extends Component {\n  render() {\n    if (!this.props.value) {\n      return null;\n    }\n\n    let mainText = this.props.value.value;\n\n    let subText;\n    let cellStyle;\n    if (this.props.colDef.field === 'key') {\n      if (this.props.data.descriptor.isListKey && mainText) {\n        subText = 'list';\n      }\n\n      if (this.props.data.descriptor.indent) {\n        const indent = this.props.data.descriptor.indent * INDENT_MULTIPLIER;\n        cellStyle = {marginLeft: `${indent}rem`};\n      }\n    } else {\n      subText = this.props.value.type;\n    }\n\n    return (\n      <div style={cellStyle}>\n        <span\n          id={this.props.id}\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {mainText}<sub>{subText}</sub>\n        </span>\n      </div>\n    );\n  }\n}\n\n\nDictCellRenderer.propTypes = {\n  /** The data of current cell. */\n  value: PropTypes.object,\n  /** The meta info of current row. */\n  data: PropTypes.object,\n  /** The info logo for FIX keys, */\n  icon: PropTypes.object,\n  /** ID of the cell being rendered. */\n  id: PropTypes.string,\n  /** Function to call when mouse enters cell. */\n  onMouseEnter: PropTypes.func,\n  /** Function to call when mouse leaves cell. */\n  onMouseLeave: PropTypes.func,\n  /** Ag-Grid colDef property */\n  colDef: PropTypes.object,\n};\n\n\nexport default DictCellRenderer;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Button, ButtonGroup} from 'reactstrap';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {\n  faSortAmountUp,\n  faSortAmountDown,\n} from '@fortawesome/free-solid-svg-icons';\nimport CopyButton from './../CopyButton';\nimport {sortFlattenedJSON, flattenedDictToDOM} from './dictAssertionUtils';\nimport {SORT_TYPES} from './../../../Common/defaults';\nimport {uniqueId} from './../../../Common/utils';\n\nlibrary.add(\n  faSortAmountUp,\n  faSortAmountDown\n);\n\n\n/**\n * Component that renders the buttons of table.\n * DictLog and FixLog will render sort alphabetically buttons. DictMatch and \n * FixMatch will render sort by alphabet buttons and sort/filter by status \n * buttons.\n * \n * dictAssertionUtils' {@link sortFlattenedJSON} function is called to sort\n * the table data to be displayed.\n */\nclass DictButtonGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.uid = this.props.uid || uniqueId();\n\n    this.state = {\n      selectedSortType: this.props.defaultSortType,\n      sortedData: this.props.flattenedDict,\n    };\n\n    this.buttonMap = {};\n    this.buttonMap[SORT_TYPES.ALPHABETICAL] = {\n      display: \n        <FontAwesomeIcon \n          size='sm' \n          key='faSortAmountDown' \n          icon='sort-amount-down'\n        />,\n      onClick: this.sortByChar.bind(this)\n    };\n\n    this.buttonMap[SORT_TYPES.REVERSE_ALPHABETICAL] = {\n      display: \n        <FontAwesomeIcon \n          size='sm' \n          key='faSortAmountUp' \n          icon='sort-amount-up'\n        />,\n      onClick: this.sortByCharReverse.bind(this)\n    };\n\n    this.buttonMap[SORT_TYPES.BY_STATUS] = {\n      display: 'Status',\n      onClick: this.sortByStatus.bind(this)\n    };\n\n    this.buttonMap[SORT_TYPES.ONLY_FAILURES] = {\n      display: 'Failures only',\n      onClick: this.filterFailure.bind(this)\n    };\n  }\n\n  sortByChar() {\n    let sortedData = sortFlattenedJSON(\n      this.props.flattenedDict, 0, false, false\n    );\n    this.props.setRowData(sortedData);\n    this.setState({\n      selectedSortType: SORT_TYPES.ALPHABETICAL,\n      sortedData: sortedData\n    });\n  }\n\n  sortByCharReverse() {\n    let sortedData = sortFlattenedJSON(\n      this.props.flattenedDict, 0, true, false\n    );\n    this.props.setRowData(sortedData);\n    this.setState({\n      selectedSortType: SORT_TYPES.REVERSE_ALPHABETICAL,\n      sortedData: sortedData\n    });\n  }\n\n  sortByStatus() {\n    let sortedData = sortFlattenedJSON(\n      this.props.flattenedDict, 0, false, true\n    );\n    this.props.setRowData(sortedData);\n    this.setState({\n      selectedSortType: SORT_TYPES.BY_STATUS,\n      sortedData: sortedData\n    });\n  }\n\n  filterFailure() {\n    let sortedData = this.props.flattenedDict.filter(\n      line => line[2] === 'Failed'\n    );\n    this.props.setRowData(sortedData);\n    this.setState({\n      selectedSortType: SORT_TYPES.ONLY_FAILURES,\n      sortedData: sortedData\n    });\n  }\n\n\n  render() {\n    let buttonGroup = [];\n    this.props.sortTypeList.forEach(function(sortType){\n      buttonGroup.push(\n        <Button\n          key={this.uid+sortType}\n          outline\n          color='secondary'\n          size='sm'\n          onClick={this.buttonMap[sortType]['onClick']}\n          active={this.state.selectedSortType===sortType}\n        >\n          {this.buttonMap[sortType]['display']}\n        </Button>\n      );\n    }.bind(this));\n\n    let copyButton =\n      <CopyButton value={flattenedDictToDOM(this.state.sortedData)} />;\n\n    return (\n      <ButtonGroup style={{paddingBottom: '.5rem'}}>\n        {buttonGroup}{copyButton}\n      </ButtonGroup>\n    );\n  }\n}\n\nDictButtonGroup.propTypes = {\n  /** Types of button should be rendered.  */\n  sortTypeList: PropTypes.arrayOf(\n    PropTypes.number\n  ),\n  /** Function to update the sort state if sort type changed */\n  setRowData: PropTypes.func.isRequired,\n  /** Default type of sort button */\n  defaultSortType: PropTypes.number,\n  /** The data will be sorted */\n  flattenedDict: PropTypes.array,\n  /** unique id */\n  uid: PropTypes.string,\n};\n\n\nexport default DictButtonGroup;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport DictBaseAssertion from './DictBaseAssertion';\nimport DictCellRenderer from './DictCellRenderer';\nimport DictButtonGroup from './DictButtonGroup';\nimport {\n  prepareDictColumnDefs,\n  prepareDictRowData,\n  dictCellStyle,\n} from './dictAssertionUtils';\nimport {SORT_TYPES} from './../../../Common/defaults';\n\n/**\n * Component that renders DictLog assertion.\n *\n * The actual dictionary of the test:            \n *\n * {                         \n *   'foo': {               \n *     'alpha': 'blue',     \n *     'beta': 'green',     \n *   }                      \n *   'bar': true\n * }\n *\n *  _________________________\n * | Key        | Value      |\n * |------------|------------|\n * | foo        |            |\n * |   alpha    | blue       |\n * |   beta     | green      |\n * | bar        | true       |\n * |____________|____________|\n *\n * The grid consists of two columns: Key and Value.\n *  - Key: a key of the dictionary. Nested objects are displayed with indented\n *    keys.\n *  - Value: Actual value for the given key.\n *\n */\nclass DictLogAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.flattenedDict = this.props.assertion.flattened_dict;\n    this.columnDefs = prepareDictColumnDefs(dictCellStyle, DictCellRenderer);\n    this.state = {\n      rowData: \n        prepareDictRowData(this.flattenedDict, this.props.assertion.line_no),\n    };\n    this.setRowData = this.setRowData.bind(this);\n  }\n\n  setRowData(sortedData) {\n    this.setState({\n      rowData: prepareDictRowData(sortedData, this.props.assertion.line_no)\n    });\n  }\n\n  render() {\n    let buttonGroup = (\n      <DictButtonGroup\n        sortTypeList={[\n          SORT_TYPES.ALPHABETICAL,\n          SORT_TYPES.REVERSE_ALPHABETICAL]}\n        flattenedDict={this.flattenedDict}\n        setRowData={this.setRowData}\n      />\n    );\n\n    return (\n      <DictBaseAssertion\n        buttonGroup={buttonGroup}\n        columnDefs={this.columnDefs}\n        rowData={this.state.rowData}\n      />\n    );\n  }\n}\n\nDictLogAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object.isRequired,\n};\n\nexport default DictLogAssertion;","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faInfoCircle} from '@fortawesome/free-solid-svg-icons';\n\nimport DictCellRenderer from './DictCellRenderer';\n// import FixTagToolTip from './FixTagToolTip'\n\nlibrary.add(faInfoCircle);\n\n\n/**\n * Custom cell renderer component used by FixLog and FixMatch assertions.\n *\n * It renders the cells with the following content:\n *\n * {icon} {mainText} {subText}\n *\n * Where:\n *  - icon is an info logo for FIX keys,\n *  - mainText is the main data of the cell, it can be a key or a value,\n *  - subText is the type of the value in subscript and\n */\nclass FixCellRenderer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onMouseEnter = this.onMouseEnter.bind(this);\n    this.onMouseLeave = this.onMouseLeave.bind(this);\n\n    this.tooltip = React.createRef();\n  }\n\n  /**\n   * Event handler to activate tooltips.\n   */\n  onMouseEnter() {\n    if (this.tooltip.current !== null)\n      this.tooltip.current.showTooltip();\n  }\n\n  /**\n   * Event handler to deactivate tooltips.\n   */\n  onMouseLeave() {\n    if (this.tooltip.current !== null)\n      this.tooltip.current.hideTooltip();\n  }\n\n  render() {\n    if (!this.props.value) {\n      return null;\n    }\n\n    const lineNo = this.props.data.descriptor.lineNo;\n    const rowIndex = this.props.rowIndex;\n    const colField = this.props.colDef.field;\n    const toolTipId = `id_${lineNo}_${rowIndex}_${colField}`;\n\n    return (\n      <Fragment>\n        <DictCellRenderer\n          id={toolTipId}\n          value={this.props.value}\n          data={this.props.data}\n          colDef={this.props.colDef}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n        />\n        {/*<FixTagToolTip*/}\n          {/*parent={`#${toolTipId}`}*/}\n          {/*cellValue={this.props.value.value}*/}\n          {/*keyValue={this.props.data.key.value}*/}\n          {/*colField={colField}*/}\n          {/*ref={this.tooltip}*/}\n        {/*/>*/}\n      </Fragment>\n    );\n  }\n}\n\n\nFixCellRenderer.propTypes = {\n  /** The value of the current cell */\n  value: PropTypes.object,\n  /** The meta info of current cell */\n  data: PropTypes.object,\n  /** The row index of the current cell */\n  rowIndex: PropTypes.number,\n  /** The Column definition of the current cell */\n  colDef: PropTypes.object,\n};\n\n\nexport default FixCellRenderer;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport DictBaseAssertion from './DictBaseAssertion';\nimport FixCellRenderer from './FixCellRenderer';\nimport DictButtonGroup from './DictButtonGroup';\nimport {\n  prepareDictColumnDefs,\n  prepareDictRowData,\n  dictCellStyle,\n} from './dictAssertionUtils';\nimport {SORT_TYPES} from './../../../Common/defaults';\n\n/**\n * Component that renders FixLog assertion.\n *\n * The actual dictionary of the test:            \n *\n * {                         \n *   'foo': {               \n *     'alpha': 'blue',     \n *     'beta': 'green',     \n *   }                      \n *   'bar': true            \n * }\n *\n *  _________________________\n * | Key        | Value      |\n * |------------|------------|\n * | *foo       |            |\n * |   *alpha   | blue       |\n * |   *beta    | green      |\n * | *bar       | true       |\n * |____________|____________|\n *\n * The grid consists of two columns: Key and Value.\n *  - Key: a key of the dictionary. Nested objects are displayed with indented\n *    keys.\n *  - Value: Actual value for the given key.\n *\n */\nclass FixLogAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.flattenedDict = this.props.assertion.flattened_dict;\n    this.columnDefs = prepareDictColumnDefs(dictCellStyle, FixCellRenderer);\n    this.state = {\n      rowData: \n        prepareDictRowData(this.flattenedDict, this.props.assertion.line_no),\n    };\n    this.setRowData = this.setRowData.bind(this);\n  }\n\n  setRowData(sortedData) {\n    this.setState({\n      rowData: prepareDictRowData(\n        sortedData,\n        this.props.assertion.line_no\n      )\n    });\n  }\n\n  render() {\n    let buttonGroup = (\n      <DictButtonGroup\n        sortTypeList={[\n          SORT_TYPES.ALPHABETICAL, \n          SORT_TYPES.REVERSE_ALPHABETICAL\n        ]}\n        flattenedDict={this.flattenedDict}\n        setRowData={this.setRowData}\n      />\n    );\n\n    return (\n      <DictBaseAssertion\n        buttonGroup={buttonGroup}\n        columnDefs={this.columnDefs}\n        rowData={this.state.rowData}\n      />\n    );\n  }\n}\n\nFixLogAssertion.propTypes = {\n  /** Assertion being rendered */\n\tassertion: PropTypes.object.isRequired,\n};\n\nexport default FixLogAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport DictBaseAssertion from './DictBaseAssertion';\nimport DictCellRenderer from './DictCellRenderer';\nimport DictButtonGroup from './DictButtonGroup';\nimport {\n  prepareDictColumnDefs,\n  prepareDictRowData,\n  sortFlattenedJSON,\n  dictCellStyle,\n} from './dictAssertionUtils';\nimport {SORT_TYPES} from '../../../Common/defaults';\n\n\n/**\n * Component that renders DictMatch assertion.\n *\n * The expected dictionary   | The actual dictionary matched\n * of the test:              | to the expected one:\n *\n * {                         | {\n *   'foo': {                |   'foo': {\n *     'alpha': 'blue',      |     'alpha': 'red',\n *     'beta': 'green',      |     'beta': 'green',\n *   }                       |   }\n *   'bar': true             |   'bar': true\n * }                         | }\n *\n *  ______________________________________\n * | Key        | Expected   | Value      |\n * |------------|------------|------------|\n * | foo        |            |            |\n * |   alpha    | blue       | red        |\n * |   beta     | green      | green      |\n * | bar        | true       | true       |\n * |____________|____________|____________|\n *\n * The grid consists of three columns: Key, Expected and Value.\n *  - Key: a key of the dictionary. Nested objects are displayed with indented\n *    keys.\n *  - Expected: expected value for the given key. \n *  - Value: Actual value for the given key.\n *\n */\nclass DictMatchAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.flattenedDict = this.props.assertion.comparison;\n    this.columnDefs = prepareDictColumnDefs(\n      dictCellStyle, DictCellRenderer, true);\n    this.state = {\n      rowData: prepareDictRowData(\n        sortFlattenedJSON(this.flattenedDict, 0, false, true),\n        this.props.assertion.line_no\n      ),\n    };\n\n    this.setRowData = this.setRowData.bind(this);\n  }\n\n  setRowData(sortedData) {\n    this.setState({\n      rowData: prepareDictRowData(sortedData, this.props.assertion.line_no)\n    });\n  }\n\n  render() {\n    let buttonGroup = (\n      <DictButtonGroup\n        sortTypeList={[\n          SORT_TYPES.ALPHABETICAL,\n          SORT_TYPES.REVERSE_ALPHABETICAL,\n          SORT_TYPES.BY_STATUS,\n          SORT_TYPES.ONLY_FAILURES\n        ]}\n        flattenedDict={this.flattenedDict}\n        setRowData={this.setRowData}\n        defaultSortType={SORT_TYPES.BY_STATUS}\n      />\n    );\n\n    return (\n      <DictBaseAssertion\n        buttonGroup={buttonGroup}\n        columnDefs={this.columnDefs}\n        rowData={this.state.rowData}\n      />\n    );\n  }\n}\n\nDictMatchAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object.isRequired,\n};\n\nexport default DictMatchAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport DictBaseAssertion from './DictBaseAssertion';\nimport FixCellRenderer from './FixCellRenderer';\nimport DictButtonGroup from './DictButtonGroup';\nimport {\n  prepareDictColumnDefs,\n  prepareDictRowData,\n  sortFlattenedJSON,\n  dictCellStyle,\n} from './dictAssertionUtils';\nimport {SORT_TYPES} from './../../../Common/defaults';\n\n\n/**\n * Component that renders FixMatch assertion.\n *\n * The expected dictionary   | The actual dictionary matched\n * of the test:              | to the expected one:\n *\n * {                         | {\n *   'foo': {                |   'foo': {\n *     'alpha': 'blue',      |     'alpha': 'red',\n *     'beta': 'green',      |     'beta': 'green',\n *   }                       |   }\n *   'bar': true             |   'bar': true\n * }                         | }\n *\n *  ______________________________________\n * | Key        | Expected   | Value      |\n * |------------|------------|------------|\n * | *foo       |            |            |\n * |   *alpha   | blue       | red        |\n * |   *beta    | green      | green      |\n * | *bar       | true       | true       |\n * |____________|____________|____________|\n *\n * The grid consists of three columns: Key, Expected and Value.\n *  - Key: a key of the dictionary. Nested objects are displayed with indented\n *    keys.\n *  - Expected: expected value for the given key.\n *  - Value: Actual value for the given key.\n *\n */\nclass FixMatchAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.flattenedDict = this.props.assertion.comparison;\n    this.columnDefs = prepareDictColumnDefs(\n      dictCellStyle, FixCellRenderer, true\n    );\n    this.state = {\n      rowData: prepareDictRowData(\n        sortFlattenedJSON(this.flattenedDict, 0, false, true),\n        this.props.assertion.line_no\n      ),\n    };\n\n    this.setRowData = this.setRowData.bind(this);\n  }\n\n  setRowData(sortedData) {\n    this.setState({\n      rowData: prepareDictRowData(\n        sortedData,\n        this.props.assertion.line_no)\n    });\n  }\n\n  render() {\n    let buttonGroup = (\n      <DictButtonGroup\n        sortTypeList={[\n          SORT_TYPES.ALPHABETICAL, \n          SORT_TYPES.REVERSE_ALPHABETICAL,\n          SORT_TYPES.BY_STATUS,\n          SORT_TYPES.ONLY_FAILURES\n        ]}\n        flattenedDict={this.flattenedDict}\n        setRowData={this.setRowData}\n        defaultSortType={SORT_TYPES.BY_STATUS}\n      />\n    );\n\n    return (\n\t\t\t<DictBaseAssertion\n        buttonGroup={buttonGroup}\n        columnDefs={this.columnDefs}\n        rowData={this.state.rowData}\n      />\n\t\t);\n  }\n}\n\nFixMatchAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object.isRequired,\n};\n\nexport default FixMatchAssertion;","import React, {Component, Fragment} from 'react';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faFrown} from '@fortawesome/free-solid-svg-icons';\n\nimport {css, StyleSheet} from 'aphrodite';\n\nlibrary.add(faFrown);\n\n/**\n * Component that is rendered when there is no defined rendering mechanism for\n * the given assertion.\n */\nclass NotImplementedAssertion extends Component {\n  render() {\n    return (\n      <Fragment>\n        <FontAwesomeIcon \n          size='lg' \n          key='faFrown' \n          icon='frown' \n          className={css(styles.icon)}\n        />\n        Currently there is no rendering mechanism for this type of assertion. \n        Please contact <strong>the developers</strong> if you would like to have\n         it implemented.\n      </Fragment>);\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    margin: '0rem .5rem 0rem 0rem',\n  },\n});\n\nexport default NotImplementedAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {css, StyleSheet} from 'aphrodite';\nimport {CardHeader, Tooltip} from 'reactstrap';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n  faClock,\n  faLayerGroup,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n  faClock,\n  faLayerGroup\n);\n\n/**\n * Header component of an assertion.\n */\nclass AssertionHeader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {isTooltipOpen: false};\n    this.toggleTooltip = this.toggleTooltip.bind(this);\n  }\n\n  /**\n   * Toggle the visibility of the header's tooltip.\n   */\n  toggleTooltip() {\n    this.setState({\n      isTooltipOpen: !this.state.isTooltipOpen\n    });\n  }\n\n  render() {\n    let tooltip = null;\n    let starterIcon = null;\n    const tooltipId = 'tooltip_' + this.props.index;\n    const cardHeaderStyle = this.props.assertion.passed === undefined\n      ? styles.cardHeaderColorLog\n      : this.props.assertion.passed\n        ? styles.cardHeaderColorPassed\n        : styles.cardHeaderColorFailed;\n\n    if (this.props.assertion.utc_time === undefined) {\n      starterIcon =\n        <FontAwesomeIcon\n          size='sm'\n          key='faLayerGroup'\n          icon='layer-group'\n          className={css(styles.icon)}\n        />;\n    } else {\n      let tooltipDate = new Date(this.props.assertion.utc_time);\n\n      starterIcon =\n        <FontAwesomeIcon \n          size='sm' \n          key='faClock' \n          icon='clock' \n          className={css(styles.icon)} \n          id={tooltipId} \n        />;\n\n      tooltip =\n        <Tooltip \n          placement='bottom' \n          isOpen={this.state.isTooltipOpen} \n          target={tooltipId} \n          toggle={this.toggleTooltip}\n        >\n          {tooltipDate.toUTCString()}\n        </Tooltip>;\n    }\n\n    return (\n      <CardHeader \n        className={css(styles.cardHeader, cardHeaderStyle)} \n        onClick={this.props.onClick}\n      >\n        {starterIcon}\n        {tooltip}\n        <span>\n          <strong>{this.props.assertion.description}</strong> \n          ({this.props.assertion.type})\n        </span>\n        {/* \n          TODO will be implemented when complete permalink feature \n          linkIcon \n        */}\n      </CardHeader>\n    );\n  }\n}\n\nAssertionHeader.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object,\n  /** Index of the assertion */\n  index: PropTypes.number,\n  /** Function when clicking header */\n  onClick: PropTypes.func,\n};\n\nconst styles = StyleSheet.create({\n  cardHeader: {\n    padding: '.25rem .75rem',\n    fontSize: '13px',\n    backgroundColor: 'rgba(0,0,0,0)', // Move to defaults?\n    cursor: 'pointer',\n    borderBottom: '1px solid',\n  },\n\n  cardHeaderColorLog: {\n    borderBottomColor: '#000000', // Move to defaults?\n    color: '#000000', // Move to defaults?\n  },\n\n  cardHeaderColorPassed: {\n    borderBottomColor: '#28a745', // Move to defaults\n    color: '#28a745', // Move to defaults\n  },\n\n  cardHeaderColorFailed: {\n    borderBottomColor: '#dc3545', // Move to defaults\n    color: '#dc3545', // Move to defaults\n  },\n\n  collapseDiv: {\n    paddingLeft: '1.25rem',\n  },\n\n  icon: {\n    margin: '0rem .25rem 0rem 0rem',\n  }\n});\n\nexport default AssertionHeader;\n","/**\n * Helper functions used to add customisation and styling to the graph and\n * chart assertions.\n */\n\n/**\n * Return the JSX for the 'style' parameter for the graph component\n * to help render nicer graphs, not currently set by the user\n *\n * @param {str} graph_type - The type of graph being rendered\n * @return {dict[key: object]} Returns any style required for the graph\n */\nexport function returnStyle(graph_type){\n  if(graph_type === 'Contour'){\n     return(\n        {\n            stroke: '#125C77',\n            strokeLinejoin: 'round'\n        }\n      );\n  }\n}\n\n/**\n * Return the JSX for the 'XType' parameter for the XYPlot\n * component to be make the x axis increment either numerical or ordinal\n *\n * @param {str} graph_type - The type of graph being rendered\n * @return {str} Returns ordinal if x-axis should be\n *               letters instead of numerical\n */\nexport function returnXType(graph_type){\n  if(graph_type ==='Bar'){\n    return(\"ordinal\");\n  }\n}\n\nconst COLOUR_PALETTE=['#1c5c9c', '#68caea', '#7448c5', '#633836',\n                      '#485051', '#336a85', '#94b1c5', '#ababab'];\n/**\n * Return the colours for every series, given the series_options. Each series'\n * colour assigned depending on whether the user has specified an option,\n * otherwise return from a colour scheme/palette, then random colours\n * (tinted darker/blue)\n *\n * @param {dict[str, dict[str, object]]} series_options - dictionary with\n *                                       series name and user specified options\n * @param {dict[str, list]} data - every data series name along\n *                                 with the relative list of data\n * @return {dict[str, str]} Every series name and it's display colour\n */\nexport function returnColour(series_options, data){\n  const series_names = Object.keys(data);\n  let series_colours = {};\n  let colour_options = COLOUR_PALETTE.slice();\n\n  series_names.forEach(function(series) {\n    //Assign colour from user specified options if possible\n    if(series_options != null){\n      if(series_options[series]!= null){\n        if(series_options[series].colour!= null){\n          series_colours[series] =\n            series_options[series].colour;\n          return;\n        }\n      }\n    }\n\n    //Otherwise choose next colour available from colour palette\n    if(colour_options.length !== 0){\n       let colour = colour_options[0];\n       series_colours[series] = colour;\n       colour_options.shift();\n\n    //Otherwise if no more available colours, choose random colour\n    } else {\n      let colour = '';\n      for (let i = 0; i < 4; i++) {\n       colour += (Math.round(Math.random() * 15)).toString(16);\n      }\n      for (let i = 0; i < 2; i++) {\n       colour += (10+ Math.round(Math.random() * 5)).toString(16);\n      }\n      series_colours[series] = colour;\n    }\n  });\n\n  return series_colours;\n}\n\n/**\n * Return an xAxisTitle for the graph component\n * or nothing if it has not been set\n *\n * @param {dict[str: object]} graph_options - user specified options\n *                                            for the entire graph\n *\n * @return {str/null} The axis title, or null if not set\n */\nexport function returnXAxisTitle(graph_options){\n  if(graph_options == null){\n    return;\n  }\n  if(graph_options.xAxisTitle !== null){\n    return graph_options.xAxisTitle;\n  }\n}\n\n/**\n * Return an yAxisTitle for the graph component\n * or nothing if it has not been set\n * @param {dict[str: object]} graph_options - user specified options\n *                                            for the entire graph\n *\n * @return {str/null} The axis title, or null if not set\n */\nexport function returnYAxisTitle(graph_options){\n  if(graph_options == null){\n    return;\n  }\n  if(graph_options.yAxisTitle !== null){\n    return graph_options.yAxisTitle;\n  }\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport 'react-vis/dist/style.css';\nimport * as GraphUtil from './graphUtils';\nimport {css, StyleSheet} from 'aphrodite';\nimport {\n  XAxis,\n  YAxis,\n  DiscreteColorLegend,\n  HorizontalGridLines,\n  XYPlot,\n  LineSeries,\n  VerticalBarSeries,\n  Highlight,\n  HexbinSeries,\n  ContourSeries,\n  WhiskerSeries,\n  MarkSeries,\n  ChartLabel\n} from 'react-vis';\n\n\n/**\n * Component that are used to render a Graph (Data visualisations that require\n * an XY axis).\n */\nclass XYGraphAssertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      series_colour:{}\n    };\n\n    let data = this.props.assertion.graph_data;\n    const series_options = this.props.assertion.series_options;\n    let plot_colours = GraphUtil.returnColour(series_options, data);\n    this.state.series_colour = plot_colours;\n  }\n\n\n  state = {\n    lastDrawLocation: null\n   };\n\n\n  components = {\n    Line: LineSeries,\n    Hexbin: HexbinSeries,\n    Contour: ContourSeries,\n    Whisker: WhiskerSeries,\n    Bar: VerticalBarSeries,\n    Scatter: MarkSeries\n  }\n\n\n  render() {\n    const data = this.props.assertion.graph_data;\n    const graph_options = this.props.assertion.graph_options;\n    const {lastDrawLocation} = this.state;\n    const graph_type = this.props.assertion.graph_type;\n    const GraphComponent = this.components[graph_type];\n\n    let legend = [];\n    let plots = [];\n\n    for (let key in data) {\n      let series_colour = this.state.series_colour[key];\n      plots.push(\n                  <GraphComponent\n                    key={key}\n                    data={data[key]}\n                    color={series_colour}\n                    style={GraphUtil.returnStyle(graph_type)}\n                  />\n                );\n      if((graph_options !== null) && graph_options.legend){\n        legend.push({title: key, color: series_colour});\n      }\n    }\n\n    return (\n    <div className={css(styles.centreComponent)}>\n      <XYPlot\n        animation\n        xDomain={lastDrawLocation && [\n            lastDrawLocation.left,\n            lastDrawLocation.right\n          ]\n        }\n        yDomain={lastDrawLocation && [\n            lastDrawLocation.bottom,\n            lastDrawLocation.top\n          ]\n        }\n        width={750}\n        height={500}\n         xType= {GraphUtil.returnXType(graph_type)}\n      >\n        <HorizontalGridLines />\n\n        <XAxis />\n        <ChartLabel\n        text={GraphUtil.returnXAxisTitle(graph_options)}\n        className=\"x-axis-label\"\n        includeMargin={false}\n        xPercent={0.5}\n        yPercent={1.107}\n        style={{\n              transform: 'rotate(0)',\n              textAnchor: 'middle'\n            }}\n        />\n\n        <YAxis />\n        <ChartLabel\n        text={GraphUtil.returnYAxisTitle(graph_options)}\n        className=\"y-axis-label\"\n        includeMargin={false}\n        xPercent={-0.0455}\n        yPercent={0.5}\n        style={{\n              transform: 'rotate(270)',\n              textAnchor: 'middle'\n            }}\n        />\n\n\n        {plots}\n\n        <Highlight\n          onBrushEnd={area => this.setState({lastDrawLocation: area})}\n          onDrag={area => {\n            this.setState({\n              lastDrawLocation: {\n                bottom: lastDrawLocation.bottom + (area.top - area.bottom),\n                left: lastDrawLocation.left - (area.right - area.left),\n                right: lastDrawLocation.right - (area.right - area.left),\n                top: lastDrawLocation.top + (area.top - area.bottom)\n              }\n            });\n          }}\n        />\n      </XYPlot>\n      <DiscreteColorLegend orientation='horizontal' width={750} items={legend}/>\n    </div>\n    );\n  }\n}\n\n\nXYGraphAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object,\n};\n\nconst styles = StyleSheet.create({\n  centreComponent: {\n    alignItems: 'center'\n  }\n});\n\nexport default XYGraphAssertion;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport 'react-vis/dist/style.css';\nimport * as GraphUtil from './graphUtils';\nimport {\n  RadialChart,\n  Hint,\n  DiscreteColorLegend\n} from 'react-vis';\n\n/**\n * Component that are used to render a Chart (Data visualisations that don't\n * require an XY axis). Class currently only will render radial charts\n * correctly (not generalised for other charts).\n */\nclass DiscreteChartAssertion extends Component  {\n  components = {\n    Pie: RadialChart\n   }\n\n  state = {\n    value: null\n  };\n\n  render(){\n    let data = this.props.assertion.graph_data;\n    const graph_type = this.props.assertion.graph_type;\n    const GraphComponent = this.components[graph_type];\n    const series_options = this.props.assertion.series_options;\n    let series_colours = GraphUtil.returnColour(series_options, data);\n    let plots = [];\n    let legend = [];\n\n    for (let key in data) {\n        plots.push(\n           <GraphComponent\n            colorType={series_colours[key]}\n            key={key}\n            data={data[key]}\n            width={400}\n            height={300}\n            onValueMouseOver={v => this.setState(\n                                  {value: {'Label': v.name}}\n                                  )}\n            onSeriesMouseOut={v => this.setState({value: null})}\n            >\n            {this.state.value !== null\n             && <Hint value={this.state.value}/>}\n           </GraphComponent>\n         );\n\n        legend = data[key].map( slice => {\n                    return {title: slice.name, color: slice.color};\n                 });\n       }\n\n      return (\n       <div>\n          {plots}\n          <DiscreteColorLegend\n            orientation='horizontal'\n            width={750}\n            items={legend}\n          />\n          <br/>\n          <p>(Hover over chart to see labels)</p>\n       </div>\n     );\n  }\n}\nDiscreteChartAssertion.propTypes = {\n  /** Assertion being rendered */\n  assertion: PropTypes.object,\n};\n\n\nexport default DiscreteChartAssertion;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Col, Row} from 'reactstrap';\nimport AssertionGroup from './AssertionGroup';\n/**\n * Component used to render a large test case when summarize = true\n */\n\nclass SummaryBaseAssertion extends Component  {\n  render(){\n    let data = this.props.assertion;\n    let summaries = data.entries;\n\n    // Go through categories e.g Category: DEFAULT\n    return summaries.map(category =>{\n           let category_description = category.description;\n\n           // Go through assertion types e.g Assertion type: Equal\n           let assertions_types =\n           category.entries.map(assertions_types =>{\n              let description =\n              (\n                <Row>\n                 <Col sm={{ offset: 1 }}\n                    style={{ fontSize: 18 }}>\n                   <strong>{assertions_types.description}</strong>\n                 </Col>\n                </Row>\n              );\n\n              // State how many assertions are being displayed e.g 5 of 500\n              // Create an AssertionGroup for each grouped type of assertion\n              // e.g all result.Equal() in Category: DEFAULT\n              let entries =\n              assertions_types.entries.map(single_assertion_group =>\n                <div key={single_assertion_group.description}>\n                  <Row>\n                    <Col sm={{ offset: 1 }}>\n                      {single_assertion_group.description}\n                    </Col>\n                  </Row>\n                  <Row>\n                   <Col sm={{ offset: 2 }}>\n                     <AssertionGroup\n                        entries={single_assertion_group.entries}\n                        globalIsOpen={this.props.globalIsOpen}\n                        resetGlobalIsOpen={this.props.resetGlobalIsOpen}\n                        filter={this.props.filter}\n                      />\n                   </Col>\n                  </Row>\n                </div>\n               );\n\n              return  (\n                       <div key={assertions_types.description}>\n                        {description}\n                        {entries}\n                      </div>\n              );\n          });\n\n           return (\n                   <div key={category.description}>\n                    <Row>\n                      <Col lg='14' style={{ fontSize: 20 }}>\n                        <strong>{category_description}</strong>\n                      </Col>\n                    </Row>\n                     <Row>\n                      <Col lg='12'>\n                       {assertions_types}\n                      </Col>\n                    </Row>\n                  </div>\n            );\n    });\n  }\n}\n\nSummaryBaseAssertion.propTypes = {\n  assertion: PropTypes.object,\n  /** Array of assertions to be rendered */\n  entries: PropTypes.arrayOf(PropTypes.object),\n  /** State of the expand all/collapse all functionality */\n  globalIsOpen: PropTypes.bool,\n  /** Function to reset the expand all/collapse all state if an individual\n   * assertion's visibility is changed */\n  resetGlobalIsOpen: PropTypes.func,\n  /** Assertion filter */\n  filter: PropTypes.string,\n};\n\n\nexport default SummaryBaseAssertion;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {StyleSheet, css} from 'aphrodite';\nimport axios from 'axios';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { FadeLoader } from 'react-spinners';\n\n//Max number of lines displayed in the preview window\nconst DISPLAY_NUM = 20;\n//Line requirement for a scroll bar to be rendered when expanded\nconst SCROLLBAR_MIN_LIMIT = 60;\n\n/**\n* TextAttachment component:\n*   * Gets text file using Axios\n*   * Returns JSX depending on how long the text file is\n*/\n\nclass TextAttachment extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n      loading: false,\n      error: null,\n      textContent: \"\",\n      originalText: null,\n      numberOfLines: null,\n      expandButtonPushed: false,\n      scrollbar: null,\n    };\n  }\n\n  /**\n  * Fetch the text attachment once the component has mounted.\n  * @public\n  */\n  componentDidMount() {\n    this.setState({loading: true});\n    this.getTextAttachment();\n  }\n\n  /*\n  * Prepare the contents of the collapsed .txt content, by displaying the\n  * last DISPLAY_NUM lines of the text file (or the entire text file if\n  * it has less lines than DISPLAY_NUM - short files).\n  *\n  * @param {array} text_array (each element of array is one line of text)\n  * @return {jsx} Content for the .txt file content when collapsed\n  * @private\n  */\n  getCollapsedText(text_array){\n    let last_lines;\n    let i;\n    let starting_line;\n    let num_of_lines = text_array.length;\n\n    if(num_of_lines < DISPLAY_NUM){\n      i = 0;\n      starting_line = 1;\n      last_lines = \"\";\n    } else {\n      i = num_of_lines - DISPLAY_NUM;\n      starting_line = num_of_lines - DISPLAY_NUM;\n      last_lines = \"...\\n\";\n    }\n\n    for(i; i < num_of_lines; i++){\n      last_lines = last_lines + text_array[i] + '\\n';\n    }\n\n    let return_jsx = (\n      <SyntaxHighlighter showLineNumbers\n          startingLineNumber={starting_line}>\n        {last_lines}\n      </SyntaxHighlighter>\n    );\n    return return_jsx;\n  }\n\n  /*\n  * Convert a string into an array where each element is one line of the text\n  * and explicitly declare a <newline> at end of the text\n  *\n  * @param {string} text\n  * @return {Array} line-by-line version of text\n  * @private\n  */\n  displayTextToArray(text){\n    let lines = text.split('\\n');\n    let length = lines.length;\n\n    if(lines.pop() === \"\"){\n      lines[length-1] = \"<newline>\";\n    }\n    return lines;\n  }\n\n  /*\n  * Sets the state based on text content received to be displayed.\n  *\n  * @param {string} text\n  * @private\n  */\n  handleText(text){\n    let lines =  this.displayTextToArray(text);\n    let display = this.getCollapsedText(lines);\n\n    if(lines[lines.length-1] === \"<newline>\"){\n     text += \"<newline>\";\n    }\n\n    this.setState({\n      textContent: display,\n      numberOfLines: lines.length,\n      originalText: text,\n      loading: false\n     });\n  }\n\n  /**\n  * Fetch the text attachment.\n  *   * Handle UID errors.\n  *   * Make a GET request for the .txt attachment file.\n  *   * Prepare the display content\n  * @public\n  */\n  getTextAttachment() {\n    // Check if dev mode and display test_string instead of getting the real\n    // source file from the backend.\n    if (this.props.devMode) {\n      const TEST_TEXT = \"test1\\ntest2\\ntest3\\ntest4\\ntest5\\ntest6\\ntest7\\n\";\n      let text = TEST_TEXT;\n      this.handleText(text);\n    } else {\n      axios.get(this.props.src)\n      .then(response => {\n          let text = response.data;\n          this.handleText(text);\n      })\n      .catch(error => this.setState({\n                        error: true,\n                        loading: false\n                      })\n      );\n    }\n  }\n\n  /*\n  * Change the displayed .txt content, when the Expand/Collapse button gets\n  * pressed - will only render a scroll bar if there are more\n  * than SCROLLBAR_MIN_LIMIT lines in file.\n  *\n  * (This method is bound to onClick for the Expand/Collapse button)\n  */\n  updateTextContent = () => {\n    let text = this.state.originalText;\n    let scrollbar_content;\n    let display;\n\n    if(this.state.expandButtonPushed){\n      let lines =  this.displayTextToArray(text);\n      display = this.getCollapsedText(lines);\n      scrollbar_content = null;\n    } else {\n      if(SCROLLBAR_MIN_LIMIT > this.state.numberOfLines){\n        scrollbar_content = null;\n      } else {\n        scrollbar_content = css(styles.content);\n      }\n\n      display = (\n        <SyntaxHighlighter showLineNumbers>\n          {text}\n        </SyntaxHighlighter>\n      );\n    }\n\n  this.setState( state =>({\n      textContent: display,\n      expandButtonPushed: !state.expandButtonPushed,\n      scrollbar: scrollbar_content\n    }));\n  }\n\n  render() {\n    let button_jsx;\n    let content;\n\n    let spinner = (\n      <div className={css(styles.spinner)}>\n        <FadeLoader\n          color={'#123abc'}\n          loading={true}\n          height={10}\n          width={3}\n          radius={4}\n        />\n      </div>\n    );\n\n    //Show expand/collapse button only if less than DISPLAY_NUM lines\n    if(this.state.numberOfLines < DISPLAY_NUM){\n      button_jsx = null;\n    } else {\n      button_jsx = (\n        <button onClick={this.updateTextContent}>\n          {this.state.expandButtonPushed? 'Collapse': 'Expand'}\n        </button>\n       );\n    }\n\n    content = (\n      <div>\n        <div>\n          <a href={this.props.src}>\n            {this.props.file_name? this.props.file_name: \"Test.txt\"}\n          </a>\n        </div>\n        <br/>\n        <div className={this.state.scrollbar}>\n          {this.state.textContent}\n        </div>\n        <br/>\n        <div>\n          {button_jsx}\n       </div>\n      </div>\n    );\n\n    return (\n      <div>\n        {this.state.error? \"Error fetching attachment\" : null}\n        {this.state.loading? spinner: content}\n      </div>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  spinner: {\n  'margin-left': '100%',\n  },\n  content: {\n  'overflow-y': 'scroll',\n  'height': '55vh',\n  }\n});\n\nTextAttachment.propTypes = {\n  /** Assertion being rendered */\n  src: PropTypes.string,\n  file_name: PropTypes.string,\n  devMode: PropTypes.bool,\n};\n\nexport default TextAttachment;\n","/**\n * Components to render attached files in the UI.\n */\nimport React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport { css, StyleSheet } from 'aphrodite';\n\nimport TextAttachment from './TextAttachment.js';\n\n/**\n * Generic file attachments component.\n *\n * Provides both a direct link to download the file and optionally a rendered\n * preview of the file for supported filetypes. Currently images and text\n * files can be previewed.\n */\nexport const AttachmentAssertion = (props) => {\n  const content = getAttachmentContent(props.assertion, props.reportUid);\n  return (\n    <>\n      <Row>\n        <Col lg='6'className={css(styles.contentSpan)}>\n          <span>{content}</span>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\n/* Render the attachment content, depending on the filetype. */\nconst getAttachmentContent = (assertion, reportUid) => {\n  const file_type = assertion.orig_filename.split('.').pop();\n  const file_path = assertion.dst_path;\n  const get_path = `/api/v1/reports/${reportUid}/attachments/${file_path}`;\n\n  switch (file_type) {\n    case 'txt':\n    case 'log':\n    case 'out':\n    case 'csv':\n      return (\n        <TextAttachment\n          src={get_path}\n          file_name={assertion.orig_filename}\n          devMode={reportUid === \"_dev\"}\n        />\n      );\n\n    case 'jpeg':\n    case 'jpg':\n    case 'bmp':\n    case 'png':\n        return getImageContent(get_path, assertion.description);\n\n    default:\n      // When running the development server, the real Testplan back-end is not\n      // running so we can't GET the attachment. Stick in a button that\n      // gives a debug message instead of the real link.\n      if (reportUid === \"_dev\") {\n        return (\n          <button onClick={() => alert(\"Would download: \" + file_path)}>\n            {assertion.orig_filename}\n          </button>\n        );\n      } else {\n        return (\n          <a href={get_path}>\n            {assertion.orig_filename}\n          </a>\n        );\n      }\n  }\n};\n\n/*\n * Helps prepare the contents of an Image.\n *\n * @param {str} image_path\n * @param {str} description\n * @return {JSX} Content for an image to be displayed\n * @private\n */\nconst getImageContent = (image_path, description) => (\n  <div>\n    <figure className={css(styles.caption)}>\n        <img src={image_path}\n             className=\"img-responsive ...\"\n             alt=\"Cannot Find File\"\n        />\n        <figcaption className={css(styles.caption)}>\n        <a href={image_path}>\n           {description ? description: \"Image\"}\n        </a>\n        </figcaption>\n    </figure>\n  </div>\n);\n\nexport const MatplotAssertion = (props) => {\n  const content = getMatplotContent(props.assertion, props.reportUid);\n  return (\n    <>\n      <Row>\n        <span>{content}</span>\n      </Row>\n    </>\n  );\n};\n\n/*\n * Prepare the contents of a MatPlot assertion.\n *\n * @param {object} assertion\n * @param {AssertionContent} defaultContent\n * @return {AssertionContent} Content for MatPlot assertion\n * @private\n */\nconst getMatplotContent = (assertion, reportUid) => {\n    const description = assertion.description;\n    const get_path = (\n      `/api/v1/reports/${reportUid}/attachments/${assertion.dst_path}`\n    );\n\n    if (reportUid === \"_dev\") {\n      return (\n        <figure className={css(styles.caption)}>\n          Would display MatPlot from: {get_path}\n          <figcaption className={css(styles.caption)}>\n            <u>{description ? description: \"MatPlot Image\"}</u>\n          </figcaption>\n        </figure>\n      );\n    } else {\n      return getImageContent(get_path, description);\n    }\n};\n\nconst styles = StyleSheet.create({\n  caption: {\n    'text-align': 'center'\n  },\n  contentSpan: {\n    lineHeight: '110%',\n  },\n});\n\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, CardBody, Collapse} from 'reactstrap';\nimport {css, StyleSheet} from 'aphrodite';\n\nimport BasicAssertion from './AssertionTypes/BasicAssertion';\nimport TableLogAssertion\n  from './AssertionTypes/TableAssertions/TableLogAssertion';\nimport TableMatchAssertion\n  from './AssertionTypes/TableAssertions/TableMatchAssertion';\nimport ColumnContainAssertion\n  from './AssertionTypes/TableAssertions/ColumnContainAssertion';\nimport DictLogAssertion from './AssertionTypes/DictAssertions/DictLogAssertion';\nimport FixLogAssertion from './AssertionTypes/DictAssertions/FixLogAssertion';\nimport DictMatchAssertion\n  from './AssertionTypes/DictAssertions/DictMatchAssertion';\nimport FixMatchAssertion\n  from './AssertionTypes/DictAssertions/FixMatchAssertion';\nimport NotImplementedAssertion from './AssertionTypes/NotImplementedAssertion';\nimport AssertionHeader from './AssertionHeader';\nimport AssertionGroup from './AssertionGroup';\nimport {BASIC_ASSERTION_TYPES} from '../Common/defaults';\nimport XYGraphAssertion\n  from './AssertionTypes/GraphAssertions/XYGraphAssertion';\nimport DiscreteChartAssertion\n  from './AssertionTypes/GraphAssertions/DiscreteChartAssertion';\nimport SummaryBaseAssertion from './AssertionSummary';\nimport {\n  AttachmentAssertion,\n  MatplotAssertion\n} from './AssertionTypes/AttachmentAssertions.js';\n\n/**\n * Component to render one assertion.\n */\nclass Assertion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleAssertion = this.toggleAssertion.bind(this);\n    this.state = {isOpen: this.props.assertion.passed === false};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // If we used a PureComponent it would do a shallow prop comparison which\n    // might suffice and we wouldn't need to include this.\n    return (nextProps.assertion !== this.props.assertion) ||\n      (nextProps.globalIsOpen !== this.props.globalIsOpen) ||\n      (nextState.isOpen !== this.state.isOpen);\n  }\n\n  /**\n   * Toggle the visibility of the assertion.\n   * @public\n   */\n  toggleAssertion() {\n    this.setState({isOpen: !this.state.isOpen});\n    this.props.resetGlobalIsOpen();\n  }\n\n  /**\n   * Set the state on props change. If expand all/collapse all buttons are\n   * clicked, the assertion's state must be overwritten to the global state.\n   *\n   * @param {object} props - Current props.\n   * @param {object} state - Previous state.\n   * @returns {object|null} - Return the new state if the global state changed\n   * or null otherwise.\n   * @public\n   */\n  static getDerivedStateFromProps(props, state) {\n    if (\n      props.globalIsOpen !== undefined &&\n      props.globalIsOpen !== state.isOpen\n    ) {\n      return {isOpen: props.globalIsOpen};\n    }\n    return null;\n  }\n\n  /**\n   * Get the component object of the assertion.\n   * @param {String} props - Assertion type props.\n   * @returns {Object|null} - Return the assertion component class if the\n   * assertion is implemented.\n   * @public\n   */\n  assertionComponent(assertionType) {\n    let graphAssertion;\n    if (this.props.assertion.discrete_chart) {\n      graphAssertion = DiscreteChartAssertion;\n    } else {\n      graphAssertion = XYGraphAssertion;\n    }\n\n    const assertionMap = {\n      TableLog: TableLogAssertion,\n      TableMatch: TableMatchAssertion,\n      TableDiff: TableMatchAssertion,\n      ColumnContain: ColumnContainAssertion,\n      DictLog: DictLogAssertion,\n      DictMatch: DictMatchAssertion,\n      FixLog: FixLogAssertion,\n      FixMatch: FixMatchAssertion,\n      Graph: graphAssertion,\n      Attachment: AttachmentAssertion,\n      MatPlot: MatplotAssertion,\n    };\n    if (assertionMap[assertionType]) {\n      return assertionMap[assertionType];\n    } else if (BASIC_ASSERTION_TYPES.indexOf(assertionType) >= 0) {\n      return BasicAssertion;\n    }\n    return null;\n  }\n\n  render() {\n    let isAssertionGroup = false;\n    let assertionType = this.props.assertion.type;\n    switch(assertionType){\n      case 'Group':\n        isAssertionGroup = true;\n        assertionType = <AssertionGroup\n                    entries={this.props.assertion.entries}\n                    globalIsOpen={this.props.globalIsOpen}\n                    resetGlobalIsOpen={this.props.resetGlobalIsOpen}\n                    filter={this.props.filter}\n                     />;\n        break;\n      case 'Summary':\n        assertionType = <SummaryBaseAssertion\n                    assertion={this.props.assertion}\n                    globalIsOpen={this.props.globalIsOpen}\n                    resetGlobalIsOpen={this.props.resetGlobalIsOpen}\n                    filter={this.props.filter}\n                    />;\n        break;\n      default: {\n        const AssertionTypeComponent = this.assertionComponent(assertionType);\n        if (AssertionTypeComponent) {\n        assertionType = (\n          <AssertionTypeComponent\n            assertion={this.props.assertion}\n            reportUid={this.props.reportUid}\n          />\n        );\n        } else {\n          assertionType = <NotImplementedAssertion />;\n        }\n      }\n    }\n\n    return (\n      <Card className={css(styles.card)}>\n        <AssertionHeader\n          assertion={this.props.assertion}\n          onClick={this.toggleAssertion}\n          index={this.props.index}\n        />\n        <Collapse\n          isOpen={this.state.isOpen}\n          className={css(styles.collapseDiv)}\n          style={{ paddingRight: isAssertionGroup ? null : '1.25rem' }}\n        >\n          <CardBody\n            className={\n              css(\n                isAssertionGroup\n                  ? styles.groupCardBody\n                  : styles.assertionCardBody)\n            }\n          >\n            {assertionType}\n          </CardBody>\n        </Collapse>\n      </Card>\n    );\n  }\n}\n\nAssertion.propTypes = {\n  /** Assertion to be rendered */\n  assertion: PropTypes.object,\n  /** State of the expand all/collapse all functionality */\n  globalIsOpen: PropTypes.bool,\n  /** Function to reset the expand all/collapse all state if an individual\n   * assertion's visibility is changed */\n  resetGlobalIsOpen: PropTypes.func,\n  /** Index of the assertion */\n  index: PropTypes.number,\n  /** Assertion filter */\n  filter: PropTypes.string,\n  /** Report Uid */\n  reportUid: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  assertionCardBody: {\n    padding: '.5rem .75rem',\n    fontSize: '13px',\n    fontFamily: 'monospace',\n  },\n\n  groupCardBody: {\n    padding: '0rem',\n  },\n\n  card: {\n    margin: '.5rem 0rem .5rem .5rem',\n    border: '0px',\n  },\n\n  collapseDiv: {\n    paddingLeft: '1.25rem',\n  }\n});\n\nexport default Assertion;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Assertion from './Assertion';\n\n/**\n * A component that wraps the rendered assertions. It is also the point where\n * recursion begins for grouped assertions.\n */\nclass AssertionGroup extends Component {\n  render() {\n    return this.props.entries.filter((assertion) => {\n      if (this.props.filter === 'pass') {\n        // Log assertion will be displayed\n        if (assertion.passed === false) return false;\n      } else if (this.props.filter === 'fail') {\n        // Log assertion will be displayed\n        if (assertion.passed === true) return false;\n      }\n      return true;\n    }).map((assertion, index) =>\n      <Assertion\n        key={'assertion_' + index}\n        assertion={assertion}\n        globalIsOpen={this.props.globalIsOpen}\n        resetGlobalIsOpen={this.props.resetGlobalIsOpen}\n        index={index}\n        filter={this.props.filter}\n        reportUid={this.props.reportUid}\n      />\n    );\n  }\n}\n\nAssertionGroup.propTypes = {\n  /** Array of assertions to be rendered */\n  entries: PropTypes.arrayOf(PropTypes.object),\n  /** State of the expand all/collapse all functionality */\n  globalIsOpen: PropTypes.bool,\n  /** Function to reset the expand all/collapse all state if an individual\n   * assertion's visibility is changed */\n  resetGlobalIsOpen: PropTypes.func,\n  /** Assertion filter */\n  filter: PropTypes.string,\n  /** ReportUid */\n  reportUid: PropTypes.string,\n};\n\nexport default AssertionGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {StyleSheet, css} from \"aphrodite\";\n\n\nconst LogGroup = (props) => {\n    if (props.logs && props.logs.length !== 0) {\n        const logInfos = props.logs.map(element => {\n            return (\n                <div key={element.uid}>\n                    <pre className={css(styles.logEntry)}>\n                        {element.message}\n                    </pre>\n                </div>\n            );\n        });\n        return (\n            <div className=\"LogGroup\">\n                {logInfos}\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nLogGroup.propTypes = {\n    /** Log list entries to be displayed */\n    logs: PropTypes.arrayOf(PropTypes.object),\n};\n\n\nconst styles = StyleSheet.create({\n    logEntry: {\n        color: 'red',\n    },\n});\n    \nexport default LogGroup;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {css, StyleSheet} from 'aphrodite';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n  faMinusCircle,\n  faPlusCircle,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport DescriptionPane from './DescriptionPane';\nimport InfiniteScroll from './InfiniteScroll';\nimport AssertionGroup from \"./AssertionGroup\";\nimport LogGroup from './LogGroup';\n\nlibrary.add(\n  faPlusCircle,\n  faMinusCircle\n);\n\n/**\n * Render the assertions of the selected test case.\n */\nclass AssertionPane extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      globalIsOpen: undefined,\n      testcaseUid: undefined,\n    };\n\n    this.expandAllAssertions = this.expandAllAssertions.bind(this);\n    this.collapseAllAssertions = this.collapseAllAssertions.bind(this);\n    this.resetGlobalIsOpen = this.resetGlobalIsOpen.bind(this);\n  }\n\n  /**\n   * Set the globalIsOpen state to true.\n   */\n  expandAllAssertions() {\n    this.setState({globalIsOpen: true});\n  }\n\n  /**\n   * Set the globalIsOpen state to false.\n   */\n  collapseAllAssertions() {\n    this.setState({globalIsOpen: false});\n  }\n\n  /**\n   * Set the globalIsOpen state to undefined.\n   */\n  resetGlobalIsOpen() {\n    this.setState({globalIsOpen: undefined});\n  }\n\n  /**\n   * Set the state on props change. This is needed to recognize that a different\n   * test case is being rendered. The state of the expand all/collapse all\n   * variable is also reset.\n   *\n   * @param {object} props - Current props.\n   * @param {object} state - Previous state.\n   * @returns {object|null} - Return the new state if the test case changed or\n   * null otherwise.\n   * @public\n   */\n  static getDerivedStateFromProps(props, state) {\n    if (\n      props.testcaseUid === undefined\n      || props.testcaseUid !== state.testcaseUid\n    ) {\n      return {testcaseUid: props.testcaseUid, globalIsOpen: undefined};\n    }\n    return null;\n  }\n\n  render() {\n    let assertionPaneStyle = {\n      position: 'absolute',\n      left: `${this.props.left}em`,\n      top: '5em',\n      height: `calc(100% - 5em)`,\n      width: `calc(100% - ${this.props.left}em)`,\n    };\n\n    if (this.props.assertions.length !== 0 || this.props.logs.length !==0) {\n      return (\n        <div style={assertionPaneStyle}>\n          <DescriptionPane \n            descriptionEntries={this.props.descriptionEntries}\n          />\n          <div className={css(styles.buttonsDiv)}>\n            <FontAwesomeIcon\n              size='1x'\n              key='faPlusCircle'\n              icon='plus-circle'\n              onClick={this.expandAllAssertions}\n              className={css(styles.icon)}\n            />\n            <FontAwesomeIcon\n              size='1x'\n              key='faMinusCircle'\n              icon='minus-circle'\n              onClick={this.collapseAllAssertions}\n              className={css(styles.icon)}\n            />\n          </div>\n          <div className={css(styles.infiniteScrollDiv)}>\n            {/*\n            The key is passed to force InfiniteScroll to update when only the\n            props of AssertionPane are changed. Normally when just props change\n            and not state the child component is not updated. Giving the\n            InfiniteScroll component a key tells react to update it. Unsure if\n            it updates it or creates a new instance, need to check.\n            */}\n            <InfiniteScroll\n              key={this.props.testcaseUid}\n              items={this.props.assertions}\n            >\n              <AssertionGroup\n                entries={[]}\n                globalIsOpen={this.state.globalIsOpen}\n                resetGlobalIsOpen={this.resetGlobalIsOpen}\n                filter={this.props.filter}\n                reportUid={this.props.reportUid}\n              />\n              <LogGroup \n                logs={this.props.logs}\n              />\n            </InfiniteScroll>\n          </div>\n        </div>);\n    } else {\n      return null;\n    }\n  }\n}\n\nAssertionPane.propTypes = {\n  /** List of assertions to be rendered */\n  assertions: PropTypes.arrayOf(PropTypes.object),\n  /** List of error log to be rendered */\n  logs: PropTypes.arrayOf(PropTypes.object),\n  /** Unique identifier of the test case */\n  testcaseUid: PropTypes.string,\n  /** Left positional value */\n  left: PropTypes.number,\n  /** Assertion filter */\n  filter: PropTypes.string,\n  /** Report UID */\n  reportUid: PropTypes.string,\n  /** Selected entries' description list to be displayed */\n  descriptionEntries: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst styles = StyleSheet.create({\n  icon: {\n    margin: '0rem .75rem 0rem 0rem',\n    cursor: 'pointer',\n  },\n\n  buttonsDiv: {\n    textAlign: 'right',\n  },\n\n  infiniteScrollDiv: {\n    height: 'calc(100% - 35px)',\n  }\n});\n\nexport default AssertionPane;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport {MEDIUM_GREY} from \"./defaults\";\n\n/**\n * Displayed a message in the center of the container.\n */\nclass Message extends Component {\n  render() {\n    const paneStyle = {\n      paddingLeft: `${this.props.left}em`, paddingTop: '4.5em'\n    };\n    return (\n      <div style={paneStyle}>\n        <h1 className={css(styles.message)}>{this.props.message}</h1>\n      </div>\n    );\n  }\n}\n\nMessage.propTypes = {\n  /** Message to be displayed */\n  message: PropTypes.string,\n  /** How far left the container should be placed */\n  left: PropTypes.number,\n};\n\nconst styles = StyleSheet.create({\n  message: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    minHeight: '100vh',\n    color: MEDIUM_GREY,\n  },\n});\n\nexport default Message;","/**\n * Report utility functions.\n */\nimport React from \"react\";\n\nimport AssertionPane from '../AssertionPane/AssertionPane';\nimport Message from '../Common/Message';\n\n/**\n * Merge two tag objects into a single tag object.\n *\n * @param {Object} tagsA - first tag object, contains simple & named tags.\n * @param {Object} tagsB - second tag object, contains simple & named tags.\n * @returns {Object} - merged tag object.\n * @private\n */\nfunction _mergeTags(tagsA, tagsB) {\n  // Don't edit one of the objects in place, copy to new object.\n  let mergedTags = {};\n  for (const tagName in tagsA) {\n    if (tagsA.hasOwnProperty(tagName)) {\n      mergedTags[tagName] = tagsA[tagName];\n    }\n  }\n\n  // Merge object B into object A.\n  for (const tagName in tagsB) {\n    if (tagsB.hasOwnProperty(tagName)) {\n      const tags = tagsB[tagName];\n      if (tagsA.hasOwnProperty(tagName)) {\n        let tagsArray = tags.concat(tagsA[tagName]);\n        let tagsSet = new Set(tagsArray);\n        mergedTags[tagName] = [...tagsSet];\n      } else {\n        mergedTags[tagName] = tags;\n      }\n    }\n  }\n  return mergedTags;\n}\n\n/**\n * Propagate indices through report to be utilised by filter box. A single entry\n * will contain:\n *   * tags - its & its ancestors tags.\n *   * tags_index - its, its ancestors & its descendents tags.\n *   * name_type_index - its, its ancestors & its descendents names & types.\n *   * counter - number of passing & failing descendent testcases.\n *\n * @param {Array} entries - Array of Testplan report entries.\n * @param {Object|undefined} parentIndices - An entry's parent's tags_index &\n * name_type_index.\n * @returns {Object} - The indices for all of the entries in the \"entries\"\n * Array.\n * @private\n */\nconst propagateIndicesRecur = (entries, parentIndices) => {\n  if (parentIndices === undefined) {\n    parentIndices = {\n      tags_index: {},\n      name_type_index: new Set(),\n    };\n  }\n  let indices = {\n    tags_index: {},\n    name_type_index: new Set(),\n    counter: {\n      passed: 0,\n      failed: 0,\n    },\n  };\n\n  for (let entry of entries) {\n    let entryType = entry.category;\n    // Initialize indices.\n    let tagsIndex = {};\n    const entryNameType = entry.name + '|' + entryType;\n    let nameTypeIndex = new Set([\n      entryNameType,\n      ...parentIndices.name_type_index\n    ]);\n\n    let tags = parentIndices.tags_index;\n    if (entry.hasOwnProperty('tags')) {\n      entry.tags = _mergeTags(entry.tags, parentIndices.tags_index);\n      tags = entry.tags;\n    }\n\n    if (entryType !== 'testcase') {\n      // Propagate indices to children.\n      let descendantsIndices = propagateIndicesRecur(\n        entry.entries,\n        {tags_index: tags, name_type_index: nameTypeIndex}\n      );\n      tagsIndex = _mergeTags(tagsIndex, descendantsIndices.tags_index);\n      nameTypeIndex = new Set([\n        ...nameTypeIndex,\n        ...descendantsIndices.name_type_index\n      ]);\n    }\n\n    // Set entry's indices.\n    tagsIndex = _mergeTags(tagsIndex, tags);\n    entry.tags_index = tagsIndex;\n    entry.name_type_index = nameTypeIndex;\n\n    // Update Array of entries indices.\n    indices.tags_index = _mergeTags(indices.tags_index, tagsIndex);\n    indices.name_type_index = new Set([\n      ...indices.name_type_index,\n      ...nameTypeIndex\n    ]);\n  }\n  return indices;\n};\n\n/**\n * Propagate indices through report to be utilised by filter box. A single entry\n * will contain:\n *   * tags - its & its ancestors tags.\n *   * tags_index - its, its ancestors & its descendents tags.\n *   * name_type_index - its, its ancestors & its descendents names & types.\n *   * counter - number of passing & failing descendent testcases.\n *\n * @param {Array} entries - A single Testplan report in an Array.\n * @returns {Array} - The Testplan report with indices, in an Array.\n */\nconst PropagateIndices = (report) => {\n  propagateIndicesRecur([report], undefined);\n  return report;\n};\n\n/**\n * Return the updated state after a new entry is selected from the Nav\n * component.\n *\n * @param {Object} entry - Nav entry metadata.\n * @param {number} depth - depth of Nav entry in Testplan report.\n * @public\n */\nconst UpdateSelectedState = (state, entry, depth) => {\n  const selectedUIDs = state.selectedUIDs.slice(0, depth);\n  selectedUIDs.push(entry.uid);\n  if (entry.category === 'testcase') {\n    return {\n      selectedUIDs: selectedUIDs,\n      testcaseUid: entry.uid,\n      logs: entry.logs,\n    };\n  } else {\n    return {\n      selectedUIDs: selectedUIDs,\n      testcaseUid: null,\n      logs: entry.logs,\n    };\n  }\n};\n\n/**\n * Get the current report data, status and fetch message as required.\n */\nconst GetReportState = (state) => {\n  // Handle the Testplan report if it has been fetched.\n  if (!state.report) {\n    // The Testplan report hasn't been fetched yet.\n    return {\n      reportStatus: null,\n      reportFetchMessage: getReportFetchMessage(state),\n    };\n  } else {\n    // The Testplan report has been fetched.\n    return {\n      reportStatus: state.report.status,\n      reportFetchMessage: null,\n    };\n  }\n};\n\n/**\n * Get the component to display in the centre pane.\n */\nconst GetCenterPane = (\n  state,\n  props,\n  reportFetchMessage,\n  reportUid,\n  selectedEntries\n) => {\n  const logs = state.logs || [];\n  const selectedDescription = selectedEntries.map((element) => {\n    return element.description;\n  }).filter((element) => {\n    return element; // filter empty description\n  });\n  const assertions = getAssertions(selectedEntries);\n\n  if (assertions !== null || logs.length !==0) {\n    return (\n      <AssertionPane\n        assertions={assertions}\n        logs={logs}\n        descriptionEntries={selectedDescription}\n        left={state.navWidth + 1.5}\n        testcaseUid={state.testcaseUid}\n        filter={state.filter}\n        reportUid={reportUid}\n      />\n    );\n  } else if (reportFetchMessage !== null) {\n    return (\n      <Message\n        message={reportFetchMessage}\n        left={state.navWidth}\n      />\n    );\n  } else {\n    return (\n      <Message\n        message='Please select an entry.'\n        left={state.navWidth}\n      />\n    );\n  }\n};\n\n/** TODO */\nconst getAssertions = (selectedEntries) => {\n  const selectedEntry = selectedEntries[selectedEntries.length - 1];\n  if (selectedEntry && selectedEntry.category === 'testcase') {\n    return selectedEntry.entries;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Get a message relating to the progress of fetching the testplan report.\n */\nconst getReportFetchMessage = (state) => {\n  if (state.loading) {\n    return 'Fetching Testplan report...';\n  } else if (state.error !== null){\n    return `Error fetching Testplan report. (${state.error.message})`;\n  } else {\n    return 'Waiting to fetch Testplan report...';\n  }\n};\n\n/**\n * Get the selected entries in the report, from their UIDs.\n */\nconst GetSelectedEntries = (selectedUIDs, report) => {\n  const [headSelectedUID, ...tailSelectedUIDs] = selectedUIDs;\n  if (!headSelectedUID || !report) {\n    return [];\n  }\n\n  if (tailSelectedUIDs.length > 0) {\n    const childEntry = report.entries.find(\n      (entry) => entry.uid === tailSelectedUIDs[0]\n    );\n    return [report, ...GetSelectedEntries(tailSelectedUIDs, childEntry)];\n  } else {\n    return [report];\n  }\n};\n\nexport {\n  PropagateIndices,\n  UpdateSelectedState,\n  GetReportState,\n  GetCenterPane,\n  GetSelectedEntries,\n};\n\n","/**\n * Sample Testplan reports to be used in development & testing.\n */\nconst TESTPLAN_REPORT = {\n  \"name\": \"Sample Testplan\",\n  \"status\": \"failed\",\n  \"uid\": \"520a92e4-325e-4077-93e6-55d7091a3f83\",\n  \"tags_index\": {},\n  \"information\": [\n    [\n        \"user\",\n        \"unknown\"\n    ],\n    [\n        \"command_line_string\",\n        \"/home/unknown/path_to_testplan_script/testplan.py\"\n    ],\n  ],\n  \"status_override\": null,\n  \"meta\": {},\n  \"timer\": {\n    \"run\": {\n      \"start\": \"2018-10-15T14:30:10.998071+00:00\",\n      \"end\": \"2018-10-15T14:30:11.296158+00:00\"\n    }\n  },\n  \"entries\": [\n    {\n      \"name\": \"Primary\",\n      \"status\": \"failed\",\n      \"category\": \"multitest\",\n      \"description\": null,\n      \"status_override\": null,\n      \"uid\": \"21739167-b30f-4c13-a315-ef6ae52fd1f7\",\n      \"type\": \"TestGroupReport\",\n      \"logs\": [],\n      \"tags\": {\n        \"simple\": [\"server\"]\n      },\n      \"timer\": {\n        \"run\": {\n          \"start\": \"2018-10-15T14:30:11.009705+00:00\",\n          \"end\": \"2018-10-15T14:30:11.159661+00:00\"\n        }\n      },\n      \"entries\": [\n        {\n          \"status\": \"failed\",\n          \"category\": \"testsuite\",\n          \"name\": \"AlphaSuite\",\n          \"status_override\": null,\n          \"description\": \"This is a failed testsuite\",\n          \"uid\": \"cb144b10-bdb0-44d3-9170-d8016dd19ee7\",\n          \"type\": \"TestGroupReport\",\n          \"logs\": [],\n          \"tags\": {\n            \"simple\": [\"server\"]\n          },\n          \"timer\": {\n            \"run\": {\n              \"start\": \"2018-10-15T14:30:11.009872+00:00\",\n              \"end\": \"2018-10-15T14:30:11.158224+00:00\"\n            }\n          },\n          \"entries\": [\n            {\n              \"name\": \"test_equality_passing\",\n              \"category\": \"testcase\",\n              \"status\": \"passed\",\n              \"status_override\": null,\n              \"description\": \"A testcase example\",\n              \"uid\": \"736706ef-ba65-475d-96c5-f2855f431028\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"tags\": {\n                \"colour\": [\"white\"]\n              },\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:11.010072+00:00\",\n                  \"end\": \"2018-10-15T14:30:11.132214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:11.010098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:11.010094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n            {\n              \"name\": \"test_equality_passing2\",\n              \"category\": \"testcase\",\n              \"status\": \"failed\",\n              \"tags\": {},\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"78686a4d-7b94-4ae6-ab50-d9960a7fb714\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:11.510072+00:00\",\n                  \"end\": \"2018-10-15T14:30:11.632214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:11.510098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:11.510094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n          ],\n        },\n        {\n          \"status\": \"passed\",\n          \"category\": \"testsuite\",\n          \"name\": \"BetaSuite\",\n          \"status_override\": null,\n          \"description\": null,\n          \"uid\": \"6fc5c008-4d1a-454e-80b6-74bdc9bca49e\",\n          \"type\": \"TestGroupReport\",\n          \"logs\": [],\n          \"tags\": {\n            \"simple\": [\"client\"]\n          },\n          \"timer\": {\n            \"run\": {\n              \"start\": \"2018-10-15T14:30:11.009872+00:00\",\n              \"end\": \"2018-10-15T14:30:11.158224+00:00\"\n            }\n          },\n          \"entries\": [\n            {\n              \"name\": \"test_equality_passing\",\n              \"category\": \"testcase\",\n              \"status\": \"passed\",\n              \"tags\": {},\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"8865a23d-1823-4c8d-ab37-58d24fc8ac05\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:11.010072+00:00\",\n                  \"end\": \"2018-10-15T14:30:11.132214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:11.010098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:11.010094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      \"name\": \"Secondary\",\n      \"status\": \"passed\",\n      \"category\": \"multitest\",\n      \"tags\": {},\n      \"description\": null,\n      \"status_override\": null,\n      \"uid\": \"8c3c7e6b-48e8-40cd-86db-8c8aed2592c8\",\n      \"type\": \"TestGroupReport\",\n      \"logs\": [],\n      \"timer\": {\n        \"run\": {\n          \"start\": \"2018-10-15T14:30:12.009705+00:00\",\n          \"end\": \"2018-10-15T14:30:12.159661+00:00\"\n        }\n      },\n      \"entries\": [\n        {\n          \"status\": \"passed\",\n          \"category\": \"testsuite\",\n          \"name\": \"GammaSuite\",\n          \"tags\": {},\n          \"status_override\": null,\n          \"description\": null,\n          \"uid\": \"08d4c671-d55d-49d4-96ba-dc654d12be26\",\n          \"type\": \"TestGroupReport\",\n          \"logs\": [],\n          \"timer\": {\n            \"run\": {\n              \"start\": \"2018-10-15T14:30:12.009872+00:00\",\n              \"end\": \"2018-10-15T14:30:12.158224+00:00\"\n            }\n          },\n          \"entries\": [\n            {\n              \"name\": \"test_equality_passing\",\n              \"category\": \"testcase\",\n              \"status\": \"passed\",\n              \"tags\": {},\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"f73bd6ea-d378-437b-a5db-00d9e427f36a\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:12.010072+00:00\",\n                  \"end\": \"2018-10-15T14:30:12.132214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:12.010098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:12.010094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n          ],\n        }\n      ],\n    },\n  ],\n};\n\nvar fakeReportAssertions = {\n    \"category\": \"testplan\",\n    \"tags_index\": {},\n    \"meta\": {},\n    \"information\": [\n        [\n            \"user\",\n            \"yifan\"\n        ],\n        [\n            \"command_line_string\",\n            \"oss/examples/Assertions/Basic/test_plan.py --json example.json\"\n        ],\n        [\n            \"python_version\",\n            \"3.7.1\"\n        ]\n    ],\n    \"counter\": {\n        \"passed\": 2,\n        \"failed\": 6,\n        \"total\": 8\n    },\n    \"uid\": \"c648a283-22f3-4503-ae6d-c982b4c7cca0\",\n    \"attachments\": {},\n    \"status\": \"failed\",\n    \"timer\": {\n        \"run\": {\n            \"end\": \"2020-01-10T03:06:59.348924+00:00\",\n            \"start\": \"2020-01-10T03:06:58.537339+00:00\"\n        }\n    },\n    \"runtime_status\": \"finished\",\n    \"name\": \"Assertions Example\",\n    \"status_override\": null,\n    \"entries\": [\n        {\n            \"description\": null,\n            \"counter\": {\n                \"passed\": 2,\n                \"failed\": 6,\n                \"total\": 8\n            },\n            \"name\": \"Assertions Test\",\n            \"tags\": {},\n            \"env_status\": \"STOPPED\",\n            \"type\": \"TestGroupReport\",\n            \"status_reason\": null,\n            \"runtime_status\": \"finished\",\n            \"fix_spec_path\": null,\n            \"part\": null,\n            \"uid\": \"99aef9f5-6957-4842-a6fa-e0cd9e358473\",\n            \"status\": \"failed\",\n            \"parent_uids\": [\n                \"Assertions Example\"\n            ],\n            \"timer\": {\n                \"run\": {\n                    \"end\": \"2020-01-10T03:06:59.141338+00:00\",\n                    \"start\": \"2020-01-10T03:06:58.629871+00:00\"\n                }\n            },\n            \"hash\": 3697482064019099674,\n            \"status_override\": null,\n            \"logs\": [],\n            \"category\": \"multitest\",\n            \"entries\": [\n                {\n                    \"description\": null,\n                    \"counter\": {\n                        \"passed\": 2,\n                        \"failed\": 6,\n                        \"total\": 8\n                    },\n                    \"name\": \"SampleSuite\",\n                    \"tags\": {},\n                    \"env_status\": null,\n                    \"type\": \"TestGroupReport\",\n                    \"status_reason\": null,\n                    \"runtime_status\": \"finished\",\n                    \"fix_spec_path\": null,\n                    \"part\": null,\n                    \"uid\": \"9f98c732-d040-4a13-84e1-563adcd9dd32\",\n                    \"status\": \"failed\",\n                    \"parent_uids\": [\n                        \"Assertions Example\",\n                        \"Assertions Test\"\n                    ],\n                    \"timer\": {\n                        \"run\": {\n                            \"end\": \"2020-01-10T03:06:59.135813+00:00\",\n                            \"start\": \"2020-01-10T03:06:58.629972+00:00\"\n                        }\n                    },\n                    \"hash\": -4958192469702756289,\n                    \"status_override\": null,\n                    \"logs\": [],\n                    \"category\": \"testsuite\",\n                    \"entries\": [\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 0,\n                                \"failed\": 1,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"25d0115f-91c4-481b-ad0f-37382d95fabd\",\n                            \"status\": \"failed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:58.939142+00:00\",\n                                    \"start\": \"2020-01-10T03:06:58.630091+00:00\"\n                                }\n                            },\n                            \"hash\": 4069384282795794238,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_basic_assertions\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"==\",\n                                    \"type\": \"Equal\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.630121+00:00\",\n                                    \"second\": \"foo\",\n                                    \"passed\": true,\n                                    \"first\": \"foo\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.630129+00:00\",\n                                    \"line_no\": 25\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Description for failing equality\",\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"==\",\n                                    \"type\": \"Equal\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.893461+00:00\",\n                                    \"second\": 2,\n                                    \"passed\": false,\n                                    \"first\": 1,\n                                    \"machine_time\": \"2020-01-10T11:06:58.893477+00:00\",\n                                    \"line_no\": 28\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"!=\",\n                                    \"type\": \"NotEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.895795+00:00\",\n                                    \"second\": \"bar\",\n                                    \"passed\": true,\n                                    \"first\": \"foo\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.895806+00:00\",\n                                    \"line_no\": 30\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \">\",\n                                    \"type\": \"Greater\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.898075+00:00\",\n                                    \"second\": 2,\n                                    \"passed\": true,\n                                    \"first\": 5,\n                                    \"machine_time\": \"2020-01-10T11:06:58.898084+00:00\",\n                                    \"line_no\": 31\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \">=\",\n                                    \"type\": \"GreaterEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.899619+00:00\",\n                                    \"second\": 2,\n                                    \"passed\": true,\n                                    \"first\": 2,\n                                    \"machine_time\": \"2020-01-10T11:06:58.899627+00:00\",\n                                    \"line_no\": 32\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \">=\",\n                                    \"type\": \"GreaterEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.901156+00:00\",\n                                    \"second\": 1,\n                                    \"passed\": true,\n                                    \"first\": 2,\n                                    \"machine_time\": \"2020-01-10T11:06:58.901163+00:00\",\n                                    \"line_no\": 33\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"<\",\n                                    \"type\": \"Less\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.902604+00:00\",\n                                    \"second\": 20,\n                                    \"passed\": true,\n                                    \"first\": 10,\n                                    \"machine_time\": \"2020-01-10T11:06:58.902613+00:00\",\n                                    \"line_no\": 34\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"<=\",\n                                    \"type\": \"LessEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.904109+00:00\",\n                                    \"second\": 10,\n                                    \"passed\": true,\n                                    \"first\": 10,\n                                    \"machine_time\": \"2020-01-10T11:06:58.904117+00:00\",\n                                    \"line_no\": 35\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"<=\",\n                                    \"type\": \"LessEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.905543+00:00\",\n                                    \"second\": 30,\n                                    \"passed\": true,\n                                    \"first\": 10,\n                                    \"machine_time\": \"2020-01-10T11:06:58.905550+00:00\",\n                                    \"line_no\": 36\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"==\",\n                                    \"type\": \"Equal\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.906994+00:00\",\n                                    \"second\": 15,\n                                    \"passed\": true,\n                                    \"first\": 15,\n                                    \"machine_time\": \"2020-01-10T11:06:58.907002+00:00\",\n                                    \"line_no\": 41\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"!=\",\n                                    \"type\": \"NotEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.908433+00:00\",\n                                    \"second\": 20,\n                                    \"passed\": true,\n                                    \"first\": 10,\n                                    \"machine_time\": \"2020-01-10T11:06:58.908440+00:00\",\n                                    \"line_no\": 42\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"<\",\n                                    \"type\": \"Less\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.909946+00:00\",\n                                    \"second\": 3,\n                                    \"passed\": true,\n                                    \"first\": 2,\n                                    \"machine_time\": \"2020-01-10T11:06:58.909954+00:00\",\n                                    \"line_no\": 43\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \">\",\n                                    \"type\": \"Greater\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.911441+00:00\",\n                                    \"second\": 2,\n                                    \"passed\": true,\n                                    \"first\": 3,\n                                    \"machine_time\": \"2020-01-10T11:06:58.911449+00:00\",\n                                    \"line_no\": 44\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"<=\",\n                                    \"type\": \"LessEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.912920+00:00\",\n                                    \"second\": 15,\n                                    \"passed\": true,\n                                    \"first\": 10,\n                                    \"machine_time\": \"2020-01-10T11:06:58.912928+00:00\",\n                                    \"line_no\": 45\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \">=\",\n                                    \"type\": \"GreaterEqual\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.914465+00:00\",\n                                    \"second\": 10,\n                                    \"passed\": true,\n                                    \"first\": 15,\n                                    \"machine_time\": \"2020-01-10T11:06:58.914473+00:00\",\n                                    \"line_no\": 46\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"rel_tol\": 0.1,\n                                    \"label\": \"~=\",\n                                    \"type\": \"IsClose\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.915976+00:00\",\n                                    \"second\": 95,\n                                    \"abs_tol\": 0.0,\n                                    \"passed\": true,\n                                    \"first\": 100,\n                                    \"machine_time\": \"2020-01-10T11:06:58.915984+00:00\",\n                                    \"line_no\": 50\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"rel_tol\": 0.01,\n                                    \"label\": \"~=\",\n                                    \"type\": \"IsClose\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.917481+00:00\",\n                                    \"second\": 95,\n                                    \"abs_tol\": 0.0,\n                                    \"passed\": false,\n                                    \"first\": 100,\n                                    \"machine_time\": \"2020-01-10T11:06:58.917489+00:00\",\n                                    \"line_no\": 51\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"Log\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.919181+00:00\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.919189+00:00\",\n                                    \"line_no\": 56,\n                                    \"message\": \"This is a log message, it will be displayed along with other assertion details.\"\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Boolean Truthiness check\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"IsTrue\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.921013+00:00\",\n                                    \"expr\": true,\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.921021+00:00\",\n                                    \"line_no\": 61\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Boolean Falseness check\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"IsFalse\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.923056+00:00\",\n                                    \"expr\": false,\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.923064+00:00\",\n                                    \"line_no\": 62\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"This is an explicit failure.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"Fail\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.924595+00:00\",\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:58.924621+00:00\",\n                                    \"line_no\": 64\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Passing membership\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"Contain\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.926405+00:00\",\n                                    \"container\": \"foobar\",\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.926413+00:00\",\n                                    \"line_no\": 67,\n                                    \"member\": \"foo\"\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Failing membership\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"NotContain\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.928507+00:00\",\n                                    \"container\": \"{'a': 1, 'b': 2}\",\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.928515+00:00\",\n                                    \"line_no\": 71,\n                                    \"member\": 10\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Comparison of slices\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"EqualSlices\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.930479+00:00\",\n                                    \"data\": [\n                                        [\n                                            \"slice(2, 4, None)\",\n                                            [\n                                                2,\n                                                3\n                                            ],\n                                            [],\n                                            [\n                                                3,\n                                                4\n                                            ],\n                                            [\n                                                3,\n                                                4\n                                            ]\n                                        ],\n                                        [\n                                            \"slice(6, 8, None)\",\n                                            [\n                                                6,\n                                                7\n                                            ],\n                                            [],\n                                            [\n                                                7,\n                                                8\n                                            ],\n                                            [\n                                                7,\n                                                8\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"included_indices\": [],\n                                    \"machine_time\": \"2020-01-10T11:06:58.930488+00:00\",\n                                    \"expected\": [\n                                        \"a\",\n                                        \"b\",\n                                        3,\n                                        4,\n                                        \"c\",\n                                        \"d\",\n                                        7,\n                                        8\n                                    ],\n                                    \"line_no\": 79,\n                                    \"actual\": [\n                                        1,\n                                        2,\n                                        3,\n                                        4,\n                                        5,\n                                        6,\n                                        7,\n                                        8\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Comparison of slices (exclusion)\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"EqualExcludeSlices\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.932694+00:00\",\n                                    \"data\": [\n                                        [\n                                            \"slice(0, 2, None)\",\n                                            [\n                                                2,\n                                                3,\n                                                4,\n                                                5,\n                                                6,\n                                                7\n                                            ],\n                                            [\n                                                4,\n                                                5,\n                                                6,\n                                                7\n                                            ],\n                                            [\n                                                3,\n                                                4,\n                                                5,\n                                                6,\n                                                7,\n                                                8\n                                            ],\n                                            [\n                                                3,\n                                                4,\n                                                \"c\",\n                                                \"d\",\n                                                \"e\",\n                                                \"f\"\n                                            ]\n                                        ],\n                                        [\n                                            \"slice(4, 8, None)\",\n                                            [\n                                                0,\n                                                1,\n                                                2,\n                                                3\n                                            ],\n                                            [\n                                                0,\n                                                1\n                                            ],\n                                            [\n                                                1,\n                                                2,\n                                                3,\n                                                4\n                                            ],\n                                            [\n                                                \"a\",\n                                                \"b\",\n                                                3,\n                                                4\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"included_indices\": [\n                                        2,\n                                        3\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:58.932703+00:00\",\n                                    \"expected\": [\n                                        \"a\",\n                                        \"b\",\n                                        3,\n                                        4,\n                                        \"c\",\n                                        \"d\",\n                                        \"e\",\n                                        \"f\"\n                                    ],\n                                    \"line_no\": 91,\n                                    \"actual\": [\n                                        1,\n                                        2,\n                                        3,\n                                        4,\n                                        5,\n                                        6,\n                                        7,\n                                        8\n                                    ]\n                                },\n                                {\n                                    \"unified\": false,\n                                    \"category\": \"DEFAULT\",\n                                    \"ignore_blank_lines\": true,\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"LineDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.934779+00:00\",\n                                    \"delta\": [],\n                                    \"second\": [\n                                        \"abc\\n\",\n                                        \"xyz\\n\",\n                                        \"\\n\"\n                                    ],\n                                    \"context\": false,\n                                    \"passed\": true,\n                                    \"first\": [\n                                        \"abc\\n\",\n                                        \"xyz\\n\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:58.934786+00:00\",\n                                    \"ignore_space_change\": false,\n                                    \"line_no\": 98,\n                                    \"ignore_whitespaces\": false\n                                },\n                                {\n                                    \"unified\": 3,\n                                    \"category\": \"DEFAULT\",\n                                    \"ignore_blank_lines\": false,\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"LineDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.936975+00:00\",\n                                    \"delta\": [],\n                                    \"second\": [\n                                        \"1\\n\",\n                                        \"1\\n\",\n                                        \"1\\n\",\n                                        \"abc \\n\",\n                                        \"xy\\t\\tz\\n\",\n                                        \"2\\n\",\n                                        \"2\\n\",\n                                        \"2\\n\"\n                                    ],\n                                    \"context\": false,\n                                    \"passed\": true,\n                                    \"first\": [\n                                        \"1\\r\\n\",\n                                        \"1\\r\\n\",\n                                        \"1\\r\\n\",\n                                        \"abc\\r\\n\",\n                                        \"xy z\\r\\n\",\n                                        \"2\\r\\n\",\n                                        \"2\\r\\n\",\n                                        \"2\\r\\n\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:58.936983+00:00\",\n                                    \"ignore_space_change\": true,\n                                    \"line_no\": 102,\n                                    \"ignore_whitespaces\": false\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 1,\n                                \"failed\": 0,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"cd31b565-3702-4540-a140-ff9fd480e8ce\",\n                            \"status\": \"passed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:58.963478+00:00\",\n                                    \"start\": \"2020-01-10T03:06:58.954190+00:00\"\n                                }\n                            },\n                            \"hash\": -6066149844839810607,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_raised_exceptions\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": null,\n                                    \"type\": \"ExceptionRaised\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.954270+00:00\",\n                                    \"func_match\": true,\n                                    \"raised_exception\": [\n                                        \"<class 'KeyError'>\",\n                                        \"'bar'\"\n                                    ],\n                                    \"exception_match\": true,\n                                    \"expected_exceptions\": [\n                                        \"KeyError\"\n                                    ],\n                                    \"passed\": true,\n                                    \"pattern_match\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.954275+00:00\",\n                                    \"func\": null,\n                                    \"line_no\": 112\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Exception raised with custom pattern.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foobar\",\n                                    \"type\": \"ExceptionRaised\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.955863+00:00\",\n                                    \"func_match\": true,\n                                    \"raised_exception\": [\n                                        \"<class 'ValueError'>\",\n                                        \"abc foobar xyz\"\n                                    ],\n                                    \"exception_match\": true,\n                                    \"expected_exceptions\": [\n                                        \"ValueError\"\n                                    ],\n                                    \"passed\": true,\n                                    \"pattern_match\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.955871+00:00\",\n                                    \"func\": null,\n                                    \"line_no\": 121\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Exception raised with custom func.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": null,\n                                    \"type\": \"ExceptionRaised\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.957489+00:00\",\n                                    \"func_match\": true,\n                                    \"raised_exception\": [\n                                        \"<class '__main__.SampleSuite.test_raised_exceptions.<locals>.MyException'>\",\n                                        \"4\"\n                                    ],\n                                    \"exception_match\": true,\n                                    \"expected_exceptions\": [\n                                        \"MyException\"\n                                    ],\n                                    \"passed\": true,\n                                    \"pattern_match\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.957497+00:00\",\n                                    \"func\": \"<function SampleSuite.test_raised_exceptions.<locals>.custom_func at 0x7f9cfc64fea0>\",\n                                    \"line_no\": 139\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": null,\n                                    \"type\": \"ExceptionNotRaised\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.958956+00:00\",\n                                    \"func_match\": true,\n                                    \"raised_exception\": [\n                                        \"<class 'KeyError'>\",\n                                        \"'bar'\"\n                                    ],\n                                    \"exception_match\": false,\n                                    \"expected_exceptions\": [\n                                        \"TypeError\"\n                                    ],\n                                    \"passed\": true,\n                                    \"pattern_match\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.958964+00:00\",\n                                    \"func\": null,\n                                    \"line_no\": 146\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Exception not raised with custom pattern.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foobar\",\n                                    \"type\": \"ExceptionNotRaised\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.960503+00:00\",\n                                    \"func_match\": true,\n                                    \"raised_exception\": [\n                                        \"<class 'ValueError'>\",\n                                        \"abc\"\n                                    ],\n                                    \"exception_match\": true,\n                                    \"expected_exceptions\": [\n                                        \"ValueError\"\n                                    ],\n                                    \"passed\": true,\n                                    \"pattern_match\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:58.960510+00:00\",\n                                    \"func\": null,\n                                    \"line_no\": 157\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Exception not raised with custom func.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": null,\n                                    \"type\": \"ExceptionNotRaised\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.962023+00:00\",\n                                    \"func_match\": false,\n                                    \"raised_exception\": [\n                                        \"<class '__main__.SampleSuite.test_raised_exceptions.<locals>.MyException'>\",\n                                        \"5\"\n                                    ],\n                                    \"exception_match\": true,\n                                    \"expected_exceptions\": [\n                                        \"MyException\"\n                                    ],\n                                    \"passed\": true,\n                                    \"pattern_match\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:58.962031+00:00\",\n                                    \"func\": \"<function SampleSuite.test_raised_exceptions.<locals>.custom_func at 0x7f9cfc64fea0>\",\n                                    \"line_no\": 165\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 0,\n                                \"failed\": 1,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"fca0596d-c220-4267-9a38-57968aca92d5\",\n                            \"status\": \"failed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:58.979777+00:00\",\n                                    \"start\": \"2020-01-10T03:06:58.971424+00:00\"\n                                }\n                            },\n                            \"hash\": -2707574492059523373,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_assertion_group\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Equality assertion outside the group\",\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"==\",\n                                    \"type\": \"Equal\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.971447+00:00\",\n                                    \"second\": 1,\n                                    \"passed\": true,\n                                    \"first\": 1,\n                                    \"machine_time\": \"2020-01-10T11:06:58.971451+00:00\",\n                                    \"line_no\": 173\n                                },\n                                {\n                                    \"description\": \"Custom group description\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"Group\",\n                                    \"passed\": false,\n                                    \"entries\": [\n                                        {\n                                            \"category\": \"DEFAULT\",\n                                            \"description\": \"Assertion within a group\",\n                                            \"meta_type\": \"assertion\",\n                                            \"label\": \"!=\",\n                                            \"type\": \"NotEqual\",\n                                            \"utc_time\": \"2020-01-10T03:06:58.973038+00:00\",\n                                            \"second\": 3,\n                                            \"passed\": true,\n                                            \"first\": 2,\n                                            \"machine_time\": \"2020-01-10T11:06:58.973047+00:00\",\n                                            \"line_no\": 176\n                                        },\n                                        {\n                                            \"category\": \"DEFAULT\",\n                                            \"description\": null,\n                                            \"meta_type\": \"assertion\",\n                                            \"label\": \">\",\n                                            \"type\": \"Greater\",\n                                            \"utc_time\": \"2020-01-10T03:06:58.974577+00:00\",\n                                            \"second\": 3,\n                                            \"passed\": true,\n                                            \"first\": 5,\n                                            \"machine_time\": \"2020-01-10T11:06:58.974586+00:00\",\n                                            \"line_no\": 177\n                                        },\n                                        {\n                                            \"description\": \"This is a sub group\",\n                                            \"meta_type\": \"assertion\",\n                                            \"type\": \"Group\",\n                                            \"passed\": false,\n                                            \"entries\": [\n                                                {\n                                                    \"category\": \"DEFAULT\",\n                                                    \"description\": \"Assertion within sub group\",\n                                                    \"meta_type\": \"assertion\",\n                                                    \"label\": \"<\",\n                                                    \"type\": \"Less\",\n                                                    \"utc_time\": \"2020-01-10T03:06:58.976376+00:00\",\n                                                    \"second\": 3,\n                                                    \"passed\": false,\n                                                    \"first\": 6,\n                                                    \"machine_time\": \"2020-01-10T11:06:58.976384+00:00\",\n                                                    \"line_no\": 181\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Final assertion outside all groups\",\n                                    \"meta_type\": \"assertion\",\n                                    \"label\": \"==\",\n                                    \"type\": \"Equal\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.978219+00:00\",\n                                    \"second\": \"foo\",\n                                    \"passed\": true,\n                                    \"first\": \"foo\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.978227+00:00\",\n                                    \"line_no\": 184\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 0,\n                                \"failed\": 1,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"a3fd1023-b150-487a-bc7d-c0f64e326e63\",\n                            \"status\": \"failed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:59.006101+00:00\",\n                                    \"start\": \"2020-01-10T03:06:58.987035+00:00\"\n                                }\n                            },\n                            \"hash\": -8719069130512673532,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_regex_namespace\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"string pattern match\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foo\",\n                                    \"type\": \"RegexMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.987140+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            0,\n                                            3\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"string\": \"foobar\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.987146+00:00\",\n                                    \"line_no\": 196\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"SRE match\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foo\",\n                                    \"type\": \"RegexMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.988905+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            0,\n                                            3\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"string\": \"foobar\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.988913+00:00\",\n                                    \"line_no\": 201\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"first line.*second\",\n                                    \"type\": \"RegexMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.991277+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            0,\n                                            17\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"string\": \"first line\\nsecond line\\nthird line\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.991285+00:00\",\n                                    \"line_no\": 212\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"baz\",\n                                    \"type\": \"RegexMatchNotExists\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.992937+00:00\",\n                                    \"match_indexes\": [],\n                                    \"passed\": true,\n                                    \"string\": \"foobar\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.992945+00:00\",\n                                    \"line_no\": 217\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foobar\",\n                                    \"type\": \"RegexMatchNotExists\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.994520+00:00\",\n                                    \"match_indexes\": [],\n                                    \"passed\": true,\n                                    \"string\": \"first line\\nsecond line\\nthird line\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.994527+00:00\",\n                                    \"line_no\": 222\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"second\",\n                                    \"type\": \"RegexSearch\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.996148+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            11,\n                                            17\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"string\": \"first line\\nsecond line\\nthird line\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.996156+00:00\",\n                                    \"line_no\": 225\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Passing search empty\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foobar\",\n                                    \"type\": \"RegexSearchNotExists\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.997760+00:00\",\n                                    \"match_indexes\": [],\n                                    \"passed\": true,\n                                    \"string\": \"first line\\nsecond line\\nthird line\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.997768+00:00\",\n                                    \"line_no\": 230\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Failing search_empty\",\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"second\",\n                                    \"type\": \"RegexSearchNotExists\",\n                                    \"utc_time\": \"2020-01-10T03:06:58.999296+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            11,\n                                            17\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"string\": \"first line\\nsecond line\\nthird line\",\n                                    \"machine_time\": \"2020-01-10T11:06:58.999303+00:00\",\n                                    \"line_no\": 233\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foo\",\n                                    \"type\": \"RegexFindIter\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.000852+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            0,\n                                            3\n                                        ],\n                                        [\n                                            4,\n                                            7\n                                        ],\n                                        [\n                                            8,\n                                            11\n                                        ],\n                                        [\n                                            20,\n                                            23\n                                        ]\n                                    ],\n                                    \"condition\": \"<lambda>\",\n                                    \"passed\": true,\n                                    \"string\": \"foo foo foo bar bar foo bar\",\n                                    \"machine_time\": \"2020-01-10T11:06:59.000860+00:00\",\n                                    \"condition_match\": true,\n                                    \"line_no\": 243\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"foo\",\n                                    \"type\": \"RegexFindIter\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.002669+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            0,\n                                            3\n                                        ],\n                                        [\n                                            4,\n                                            7\n                                        ],\n                                        [\n                                            8,\n                                            11\n                                        ],\n                                        [\n                                            20,\n                                            23\n                                        ]\n                                    ],\n                                    \"condition\": \"(VAL > 2 and VAL < 5)\",\n                                    \"passed\": true,\n                                    \"string\": \"foo foo foo bar bar foo bar\",\n                                    \"machine_time\": \"2020-01-10T11:06:59.002676+00:00\",\n                                    \"condition_match\": true,\n                                    \"line_no\": 250\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"pattern\": \"\\\\w+ line$\",\n                                    \"type\": \"RegexMatchLine\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.004622+00:00\",\n                                    \"match_indexes\": [\n                                        [\n                                            0,\n                                            0,\n                                            10\n                                        ],\n                                        [\n                                            1,\n                                            0,\n                                            11\n                                        ],\n                                        [\n                                            2,\n                                            0,\n                                            10\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"string\": \"first line\\nsecond line\\nthird line\",\n                                    \"machine_time\": \"2020-01-10T11:06:59.004630+00:00\",\n                                    \"line_no\": 257\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 0,\n                                \"failed\": 1,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"e8fb2848-cc83-4df3-83e0-82fe839d6526\",\n                            \"status\": \"failed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:59.072704+00:00\",\n                                    \"start\": \"2020-01-10T03:06:59.016322+00:00\"\n                                }\n                            },\n                            \"hash\": -8829886055223884393,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_table_namespace\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: list of list vs list of list\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.016418+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                \"Bob\",\n                                                32\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                \"Susan\",\n                                                24\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": true,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.016424+00:00\",\n                                    \"line_no\": 284,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: list of dict vs list of dict\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.018525+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                \"Bob\",\n                                                32\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                \"Susan\",\n                                                24\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": true,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.018533+00:00\",\n                                    \"line_no\": 289,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: list of dict vs list of list\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.020629+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                \"Bob\",\n                                                32\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                \"Susan\",\n                                                24\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": true,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.020640+00:00\",\n                                    \"line_no\": 294,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: list of list vs list of list\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.023695+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [],\n                                    \"report_fails_only\": true,\n                                    \"passed\": true,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.023703+00:00\",\n                                    \"line_no\": 299,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: list of dict vs list of dict\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.026093+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [],\n                                    \"report_fails_only\": true,\n                                    \"passed\": true,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.026102+00:00\",\n                                    \"line_no\": 304,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: list of dict vs list of list\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.027835+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [],\n                                    \"report_fails_only\": true,\n                                    \"passed\": true,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.027843+00:00\",\n                                    \"line_no\": 309,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: simple comparators\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.029541+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                \"Bob\",\n                                                32\n                                            ],\n                                            {},\n                                            {},\n                                            {\n                                                \"name\": \"REGEX(\\\\w{3})\",\n                                                \"age\": \"<lambda>\"\n                                            }\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                \"Susan\",\n                                                24\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {\n                                                \"name\": \"<lambda>\"\n                                            },\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": false,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.029549+00:00\",\n                                    \"line_no\": 338,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: simple comparators\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.031666+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {\n                                                \"name\": \"<lambda>\"\n                                            },\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": true,\n                                    \"passed\": false,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.031674+00:00\",\n                                    \"line_no\": 343,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: readable comparators\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.034598+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                \"Bob\",\n                                                32\n                                            ],\n                                            {},\n                                            {},\n                                            {\n                                                \"name\": \"REGEX(\\\\w{3})\",\n                                                \"age\": \"(VAL > 30 and VAL < 40)\"\n                                            }\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                \"Susan\",\n                                                24\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {\n                                                \"name\": \"VAL in ['David', 'Helen', 'Pablo']\"\n                                            },\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": false,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.034625+00:00\",\n                                    \"line_no\": 361,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: readable comparators\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.037495+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            2,\n                                            [\n                                                \"Rick\",\n                                                67\n                                            ],\n                                            {\n                                                \"name\": \"VAL in ['David', 'Helen', 'Pablo']\"\n                                            },\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": true,\n                                    \"passed\": false,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.037502+00:00\",\n                                    \"line_no\": 366,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: Trimmed columns\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.040045+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"column_1\",\n                                        \"column_2\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                0,\n                                                0\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                1,\n                                                2\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                2,\n                                                4\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            3,\n                                            [\n                                                3,\n                                                6\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            4,\n                                            [\n                                                4,\n                                                8\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            5,\n                                            [\n                                                5,\n                                                10\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            6,\n                                            [\n                                                6,\n                                                12\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            7,\n                                            [\n                                                7,\n                                                14\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            8,\n                                            [\n                                                8,\n                                                16\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            9,\n                                            [\n                                                9,\n                                                18\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": true,\n                                    \"include_columns\": [\n                                        \"column_1\",\n                                        \"column_2\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.040052+00:00\",\n                                    \"line_no\": 383,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: Trimmed columns\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.042860+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 0,\n                                    \"columns\": [\n                                        \"column_1\",\n                                        \"column_2\"\n                                    ],\n                                    \"data\": [],\n                                    \"report_fails_only\": true,\n                                    \"passed\": true,\n                                    \"include_columns\": [\n                                        \"column_1\",\n                                        \"column_2\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.042869+00:00\",\n                                    \"line_no\": 391,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Match: Trimmed rows\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableMatch\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.046590+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 2,\n                                    \"columns\": [\n                                        \"amount\",\n                                        \"product_id\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            0,\n                                            [\n                                                0,\n                                                4240\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            1,\n                                            [\n                                                10,\n                                                3961\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            2,\n                                            [\n                                                20,\n                                                1627\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            3,\n                                            [\n                                                30,\n                                                1351\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            4,\n                                            [\n                                                40,\n                                                2123\n                                            ],\n                                            {},\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            5,\n                                            [\n                                                25,\n                                                1111\n                                            ],\n                                            {\n                                                \"amount\": 35\n                                            },\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            6,\n                                            [\n                                                20,\n                                                2222\n                                            ],\n                                            {\n                                                \"product_id\": 1234\n                                            },\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": false,\n                                    \"passed\": false,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.046598+00:00\",\n                                    \"line_no\": 428,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Diff: Trimmed rows\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"TableDiff\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.049590+00:00\",\n                                    \"exclude_columns\": null,\n                                    \"fail_limit\": 2,\n                                    \"columns\": [\n                                        \"amount\",\n                                        \"product_id\"\n                                    ],\n                                    \"data\": [\n                                        [\n                                            5,\n                                            [\n                                                25,\n                                                1111\n                                            ],\n                                            {\n                                                \"amount\": 35\n                                            },\n                                            {},\n                                            {}\n                                        ],\n                                        [\n                                            6,\n                                            [\n                                                20,\n                                                2222\n                                            ],\n                                            {\n                                                \"product_id\": 1234\n                                            },\n                                            {},\n                                            {}\n                                        ]\n                                    ],\n                                    \"report_fails_only\": true,\n                                    \"passed\": false,\n                                    \"include_columns\": null,\n                                    \"machine_time\": \"2020-01-10T11:06:59.049598+00:00\",\n                                    \"line_no\": 437,\n                                    \"message\": null,\n                                    \"strict\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"column\": \"symbol\",\n                                    \"limit\": null,\n                                    \"type\": \"ColumnContain\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.051390+00:00\",\n                                    \"data\": [\n                                        [\n                                            0,\n                                            \"AAPL\",\n                                            true\n                                        ],\n                                        [\n                                            1,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            2,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            3,\n                                            \"AMZN\",\n                                            true\n                                        ],\n                                        [\n                                            4,\n                                            \"MSFT\",\n                                            false\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.051397+00:00\",\n                                    \"values\": [\n                                        \"AAPL\",\n                                        \"AMZN\"\n                                    ],\n                                    \"line_no\": 454,\n                                    \"report_fails_only\": false\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"column\": \"symbol\",\n                                    \"limit\": 20,\n                                    \"type\": \"ColumnContain\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.057037+00:00\",\n                                    \"data\": [\n                                        [\n                                            1,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            2,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            4,\n                                            \"MSFT\",\n                                            false\n                                        ],\n                                        [\n                                            6,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            7,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            9,\n                                            \"MSFT\",\n                                            false\n                                        ],\n                                        [\n                                            11,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            12,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            14,\n                                            \"MSFT\",\n                                            false\n                                        ],\n                                        [\n                                            16,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            17,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            19,\n                                            \"MSFT\",\n                                            false\n                                        ],\n                                        [\n                                            21,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            22,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            24,\n                                            \"MSFT\",\n                                            false\n                                        ],\n                                        [\n                                            26,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            27,\n                                            \"FB\",\n                                            false\n                                        ],\n                                        [\n                                            29,\n                                            \"MSFT\",\n                                            false\n                                        ],\n                                        [\n                                            31,\n                                            \"GOOG\",\n                                            false\n                                        ],\n                                        [\n                                            32,\n                                            \"FB\",\n                                            false\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.057048+00:00\",\n                                    \"values\": [\n                                        \"AAPL\",\n                                        \"AMZN\"\n                                    ],\n                                    \"line_no\": 467,\n                                    \"report_fails_only\": true\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Log: list of dicts\",\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"TableLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.060012+00:00\",\n                                    \"table\": [\n                                        {\n                                            \"name\": \"Bob\",\n                                            \"age\": 32\n                                        },\n                                        {\n                                            \"name\": \"Susan\",\n                                            \"age\": 24\n                                        },\n                                        {\n                                            \"name\": \"Rick\",\n                                            \"age\": 67\n                                        }\n                                    ],\n                                    \"display_index\": false,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.060020+00:00\",\n                                    \"line_no\": 472,\n                                    \"indices\": [\n                                        0,\n                                        1,\n                                        2\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Log: list of lists\",\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"TableLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.061711+00:00\",\n                                    \"table\": [\n                                        {\n                                            \"name\": \"Bob\",\n                                            \"age\": 32\n                                        },\n                                        {\n                                            \"name\": \"Susan\",\n                                            \"age\": 24\n                                        },\n                                        {\n                                            \"name\": \"Rick\",\n                                            \"age\": 67\n                                        }\n                                    ],\n                                    \"display_index\": false,\n                                    \"columns\": [\n                                        \"name\",\n                                        \"age\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.061718+00:00\",\n                                    \"line_no\": 473,\n                                    \"indices\": [\n                                        0,\n                                        1,\n                                        2\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Log: many rows\",\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"TableLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.063421+00:00\",\n                                    \"table\": [\n                                        {\n                                            \"symbol\": \"AAPL\",\n                                            \"amount\": 12\n                                        },\n                                        {\n                                            \"symbol\": \"GOOG\",\n                                            \"amount\": 21\n                                        },\n                                        {\n                                            \"symbol\": \"FB\",\n                                            \"amount\": 32\n                                        },\n                                        {\n                                            \"symbol\": \"AMZN\",\n                                            \"amount\": 5\n                                        },\n                                        {\n                                            \"symbol\": \"MSFT\",\n                                            \"amount\": 42\n                                        },\n                                        {\n                                            \"symbol\": \"AAPL\",\n                                            \"amount\": 12\n                                        },\n                                        {\n                                            \"symbol\": \"GOOG\",\n                                            \"amount\": 21\n                                        },\n                                        {\n                                            \"symbol\": \"FB\",\n                                            \"amount\": 32\n                                        },\n                                        {\n                                            \"symbol\": \"AMZN\",\n                                            \"amount\": 5\n                                        },\n                                        {\n                                            \"symbol\": \"MSFT\",\n                                            \"amount\": 42\n                                        },\n                                        {\n                                            \"symbol\": \"AAPL\",\n                                            \"amount\": 12\n                                        },\n                                        {\n                                            \"symbol\": \"GOOG\",\n                                            \"amount\": 21\n                                        },\n                                        {\n                                            \"symbol\": \"FB\",\n                                            \"amount\": 32\n                                        },\n                                        {\n                                            \"symbol\": \"AMZN\",\n                                            \"amount\": 5\n                                        },\n                                        {\n                                            \"symbol\": \"MSFT\",\n                                            \"amount\": 42\n                                        },\n                                        {\n                                            \"symbol\": \"AAPL\",\n                                            \"amount\": 12\n                                        },\n                                        {\n                                            \"symbol\": \"GOOG\",\n                                            \"amount\": 21\n                                        },\n                                        {\n                                            \"symbol\": \"FB\",\n                                            \"amount\": 32\n                                        },\n                                        {\n                                            \"symbol\": \"AMZN\",\n                                            \"amount\": 5\n                                        },\n                                        {\n                                            \"symbol\": \"MSFT\",\n                                            \"amount\": 42\n                                        }\n                                    ],\n                                    \"display_index\": false,\n                                    \"columns\": [\n                                        \"symbol\",\n                                        \"amount\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.063429+00:00\",\n                                    \"line_no\": 479,\n                                    \"indices\": [\n                                        0,\n                                        1,\n                                        2,\n                                        3,\n                                        4,\n                                        5,\n                                        6,\n                                        7,\n                                        8,\n                                        9,\n                                        10,\n                                        11,\n                                        12,\n                                        13,\n                                        14,\n                                        15,\n                                        16,\n                                        17,\n                                        18,\n                                        19\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Log: many columns\",\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"TableLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.065884+00:00\",\n                                    \"table\": [\n                                        {\n                                            \"col_0\": \"row 0 col 0\",\n                                            \"col_1\": \"row 0 col 1\",\n                                            \"col_2\": \"row 0 col 2\",\n                                            \"col_3\": \"row 0 col 3\",\n                                            \"col_4\": \"row 0 col 4\",\n                                            \"col_5\": \"row 0 col 5\",\n                                            \"col_6\": \"row 0 col 6\",\n                                            \"col_7\": \"row 0 col 7\",\n                                            \"col_8\": \"row 0 col 8\",\n                                            \"col_9\": \"row 0 col 9\",\n                                            \"col_10\": \"row 0 col 10\",\n                                            \"col_11\": \"row 0 col 11\",\n                                            \"col_12\": \"row 0 col 12\",\n                                            \"col_13\": \"row 0 col 13\",\n                                            \"col_14\": \"row 0 col 14\",\n                                            \"col_15\": \"row 0 col 15\",\n                                            \"col_16\": \"row 0 col 16\",\n                                            \"col_17\": \"row 0 col 17\",\n                                            \"col_18\": \"row 0 col 18\",\n                                            \"col_19\": \"row 0 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 1 col 0\",\n                                            \"col_1\": \"row 1 col 1\",\n                                            \"col_2\": \"row 1 col 2\",\n                                            \"col_3\": \"row 1 col 3\",\n                                            \"col_4\": \"row 1 col 4\",\n                                            \"col_5\": \"row 1 col 5\",\n                                            \"col_6\": \"row 1 col 6\",\n                                            \"col_7\": \"row 1 col 7\",\n                                            \"col_8\": \"row 1 col 8\",\n                                            \"col_9\": \"row 1 col 9\",\n                                            \"col_10\": \"row 1 col 10\",\n                                            \"col_11\": \"row 1 col 11\",\n                                            \"col_12\": \"row 1 col 12\",\n                                            \"col_13\": \"row 1 col 13\",\n                                            \"col_14\": \"row 1 col 14\",\n                                            \"col_15\": \"row 1 col 15\",\n                                            \"col_16\": \"row 1 col 16\",\n                                            \"col_17\": \"row 1 col 17\",\n                                            \"col_18\": \"row 1 col 18\",\n                                            \"col_19\": \"row 1 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 2 col 0\",\n                                            \"col_1\": \"row 2 col 1\",\n                                            \"col_2\": \"row 2 col 2\",\n                                            \"col_3\": \"row 2 col 3\",\n                                            \"col_4\": \"row 2 col 4\",\n                                            \"col_5\": \"row 2 col 5\",\n                                            \"col_6\": \"row 2 col 6\",\n                                            \"col_7\": \"row 2 col 7\",\n                                            \"col_8\": \"row 2 col 8\",\n                                            \"col_9\": \"row 2 col 9\",\n                                            \"col_10\": \"row 2 col 10\",\n                                            \"col_11\": \"row 2 col 11\",\n                                            \"col_12\": \"row 2 col 12\",\n                                            \"col_13\": \"row 2 col 13\",\n                                            \"col_14\": \"row 2 col 14\",\n                                            \"col_15\": \"row 2 col 15\",\n                                            \"col_16\": \"row 2 col 16\",\n                                            \"col_17\": \"row 2 col 17\",\n                                            \"col_18\": \"row 2 col 18\",\n                                            \"col_19\": \"row 2 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 3 col 0\",\n                                            \"col_1\": \"row 3 col 1\",\n                                            \"col_2\": \"row 3 col 2\",\n                                            \"col_3\": \"row 3 col 3\",\n                                            \"col_4\": \"row 3 col 4\",\n                                            \"col_5\": \"row 3 col 5\",\n                                            \"col_6\": \"row 3 col 6\",\n                                            \"col_7\": \"row 3 col 7\",\n                                            \"col_8\": \"row 3 col 8\",\n                                            \"col_9\": \"row 3 col 9\",\n                                            \"col_10\": \"row 3 col 10\",\n                                            \"col_11\": \"row 3 col 11\",\n                                            \"col_12\": \"row 3 col 12\",\n                                            \"col_13\": \"row 3 col 13\",\n                                            \"col_14\": \"row 3 col 14\",\n                                            \"col_15\": \"row 3 col 15\",\n                                            \"col_16\": \"row 3 col 16\",\n                                            \"col_17\": \"row 3 col 17\",\n                                            \"col_18\": \"row 3 col 18\",\n                                            \"col_19\": \"row 3 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 4 col 0\",\n                                            \"col_1\": \"row 4 col 1\",\n                                            \"col_2\": \"row 4 col 2\",\n                                            \"col_3\": \"row 4 col 3\",\n                                            \"col_4\": \"row 4 col 4\",\n                                            \"col_5\": \"row 4 col 5\",\n                                            \"col_6\": \"row 4 col 6\",\n                                            \"col_7\": \"row 4 col 7\",\n                                            \"col_8\": \"row 4 col 8\",\n                                            \"col_9\": \"row 4 col 9\",\n                                            \"col_10\": \"row 4 col 10\",\n                                            \"col_11\": \"row 4 col 11\",\n                                            \"col_12\": \"row 4 col 12\",\n                                            \"col_13\": \"row 4 col 13\",\n                                            \"col_14\": \"row 4 col 14\",\n                                            \"col_15\": \"row 4 col 15\",\n                                            \"col_16\": \"row 4 col 16\",\n                                            \"col_17\": \"row 4 col 17\",\n                                            \"col_18\": \"row 4 col 18\",\n                                            \"col_19\": \"row 4 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 5 col 0\",\n                                            \"col_1\": \"row 5 col 1\",\n                                            \"col_2\": \"row 5 col 2\",\n                                            \"col_3\": \"row 5 col 3\",\n                                            \"col_4\": \"row 5 col 4\",\n                                            \"col_5\": \"row 5 col 5\",\n                                            \"col_6\": \"row 5 col 6\",\n                                            \"col_7\": \"row 5 col 7\",\n                                            \"col_8\": \"row 5 col 8\",\n                                            \"col_9\": \"row 5 col 9\",\n                                            \"col_10\": \"row 5 col 10\",\n                                            \"col_11\": \"row 5 col 11\",\n                                            \"col_12\": \"row 5 col 12\",\n                                            \"col_13\": \"row 5 col 13\",\n                                            \"col_14\": \"row 5 col 14\",\n                                            \"col_15\": \"row 5 col 15\",\n                                            \"col_16\": \"row 5 col 16\",\n                                            \"col_17\": \"row 5 col 17\",\n                                            \"col_18\": \"row 5 col 18\",\n                                            \"col_19\": \"row 5 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 6 col 0\",\n                                            \"col_1\": \"row 6 col 1\",\n                                            \"col_2\": \"row 6 col 2\",\n                                            \"col_3\": \"row 6 col 3\",\n                                            \"col_4\": \"row 6 col 4\",\n                                            \"col_5\": \"row 6 col 5\",\n                                            \"col_6\": \"row 6 col 6\",\n                                            \"col_7\": \"row 6 col 7\",\n                                            \"col_8\": \"row 6 col 8\",\n                                            \"col_9\": \"row 6 col 9\",\n                                            \"col_10\": \"row 6 col 10\",\n                                            \"col_11\": \"row 6 col 11\",\n                                            \"col_12\": \"row 6 col 12\",\n                                            \"col_13\": \"row 6 col 13\",\n                                            \"col_14\": \"row 6 col 14\",\n                                            \"col_15\": \"row 6 col 15\",\n                                            \"col_16\": \"row 6 col 16\",\n                                            \"col_17\": \"row 6 col 17\",\n                                            \"col_18\": \"row 6 col 18\",\n                                            \"col_19\": \"row 6 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 7 col 0\",\n                                            \"col_1\": \"row 7 col 1\",\n                                            \"col_2\": \"row 7 col 2\",\n                                            \"col_3\": \"row 7 col 3\",\n                                            \"col_4\": \"row 7 col 4\",\n                                            \"col_5\": \"row 7 col 5\",\n                                            \"col_6\": \"row 7 col 6\",\n                                            \"col_7\": \"row 7 col 7\",\n                                            \"col_8\": \"row 7 col 8\",\n                                            \"col_9\": \"row 7 col 9\",\n                                            \"col_10\": \"row 7 col 10\",\n                                            \"col_11\": \"row 7 col 11\",\n                                            \"col_12\": \"row 7 col 12\",\n                                            \"col_13\": \"row 7 col 13\",\n                                            \"col_14\": \"row 7 col 14\",\n                                            \"col_15\": \"row 7 col 15\",\n                                            \"col_16\": \"row 7 col 16\",\n                                            \"col_17\": \"row 7 col 17\",\n                                            \"col_18\": \"row 7 col 18\",\n                                            \"col_19\": \"row 7 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 8 col 0\",\n                                            \"col_1\": \"row 8 col 1\",\n                                            \"col_2\": \"row 8 col 2\",\n                                            \"col_3\": \"row 8 col 3\",\n                                            \"col_4\": \"row 8 col 4\",\n                                            \"col_5\": \"row 8 col 5\",\n                                            \"col_6\": \"row 8 col 6\",\n                                            \"col_7\": \"row 8 col 7\",\n                                            \"col_8\": \"row 8 col 8\",\n                                            \"col_9\": \"row 8 col 9\",\n                                            \"col_10\": \"row 8 col 10\",\n                                            \"col_11\": \"row 8 col 11\",\n                                            \"col_12\": \"row 8 col 12\",\n                                            \"col_13\": \"row 8 col 13\",\n                                            \"col_14\": \"row 8 col 14\",\n                                            \"col_15\": \"row 8 col 15\",\n                                            \"col_16\": \"row 8 col 16\",\n                                            \"col_17\": \"row 8 col 17\",\n                                            \"col_18\": \"row 8 col 18\",\n                                            \"col_19\": \"row 8 col 19\"\n                                        },\n                                        {\n                                            \"col_0\": \"row 9 col 0\",\n                                            \"col_1\": \"row 9 col 1\",\n                                            \"col_2\": \"row 9 col 2\",\n                                            \"col_3\": \"row 9 col 3\",\n                                            \"col_4\": \"row 9 col 4\",\n                                            \"col_5\": \"row 9 col 5\",\n                                            \"col_6\": \"row 9 col 6\",\n                                            \"col_7\": \"row 9 col 7\",\n                                            \"col_8\": \"row 9 col 8\",\n                                            \"col_9\": \"row 9 col 9\",\n                                            \"col_10\": \"row 9 col 10\",\n                                            \"col_11\": \"row 9 col 11\",\n                                            \"col_12\": \"row 9 col 12\",\n                                            \"col_13\": \"row 9 col 13\",\n                                            \"col_14\": \"row 9 col 14\",\n                                            \"col_15\": \"row 9 col 15\",\n                                            \"col_16\": \"row 9 col 16\",\n                                            \"col_17\": \"row 9 col 17\",\n                                            \"col_18\": \"row 9 col 18\",\n                                            \"col_19\": \"row 9 col 19\"\n                                        }\n                                    ],\n                                    \"display_index\": false,\n                                    \"columns\": [\n                                        \"col_0\",\n                                        \"col_1\",\n                                        \"col_2\",\n                                        \"col_3\",\n                                        \"col_4\",\n                                        \"col_5\",\n                                        \"col_6\",\n                                        \"col_7\",\n                                        \"col_8\",\n                                        \"col_9\",\n                                        \"col_10\",\n                                        \"col_11\",\n                                        \"col_12\",\n                                        \"col_13\",\n                                        \"col_14\",\n                                        \"col_15\",\n                                        \"col_16\",\n                                        \"col_17\",\n                                        \"col_18\",\n                                        \"col_19\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.065891+00:00\",\n                                    \"line_no\": 490,\n                                    \"indices\": [\n                                        0,\n                                        1,\n                                        2,\n                                        3,\n                                        4,\n                                        5,\n                                        6,\n                                        7,\n                                        8,\n                                        9\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Table Log: long cells\",\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"TableLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.070773+00:00\",\n                                    \"table\": [\n                                        {\n                                            \"Name\": \"Bob Stevens\",\n                                            \"Age\": \"33\",\n                                            \"Address\": \"89 Trinsdale Avenue, LONDON, E8 0XW\"\n                                        },\n                                        {\n                                            \"Name\": \"Susan Evans\",\n                                            \"Age\": \"21\",\n                                            \"Address\": \"100 Loop Road, SWANSEA, U8 12JK\"\n                                        },\n                                        {\n                                            \"Name\": \"Trevor Dune\",\n                                            \"Age\": \"88\",\n                                            \"Address\": \"28 Kings Lane, MANCHESTER, MT16 2YT\"\n                                        },\n                                        {\n                                            \"Name\": \"Belinda Baggins\",\n                                            \"Age\": \"38\",\n                                            \"Address\": \"31 Prospect Hill, DOYNTON, BS30 9DN\"\n                                        },\n                                        {\n                                            \"Name\": \"Cosimo Hornblower\",\n                                            \"Age\": \"89\",\n                                            \"Address\": \"65 Prospect Hill, SURREY, PH33 4TY\"\n                                        },\n                                        {\n                                            \"Name\": \"Sabine Wurfel\",\n                                            \"Age\": \"31\",\n                                            \"Address\": \"88 Clasper Way, HEXWORTHY, PL20 4BG\"\n                                        }\n                                    ],\n                                    \"display_index\": false,\n                                    \"columns\": [\n                                        \"Name\",\n                                        \"Age\",\n                                        \"Address\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.070780+00:00\",\n                                    \"line_no\": 504,\n                                    \"indices\": [\n                                        0,\n                                        1,\n                                        2,\n                                        3,\n                                        4,\n                                        5\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 0,\n                                \"failed\": 1,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"ca8979be-8eb3-4ff4-8c18-aba4c8348bac\",\n                            \"status\": \"failed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:59.102866+00:00\",\n                                    \"start\": \"2020-01-10T03:06:59.087638+00:00\"\n                                }\n                            },\n                            \"hash\": -6007544999293600650,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_dict_namespace\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Simple dict match\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.087672+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"bar\",\n                                            \"Failed\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"5\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"extra-key\",\n                                            \"Failed\",\n                                            [\n                                                null,\n                                                \"ABSENT\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"10\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.087677+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 524\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Nested dict match\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.089583+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"Failed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            \"alpha\",\n                                            \"Failed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Failed\",\n                                            [\n                                                \"int\",\n                                                \"3\"\n                                            ],\n                                            [\n                                                null,\n                                                null\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            \"beta\",\n                                            \"Failed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            2,\n                                            \"color\",\n                                            \"Failed\",\n                                            [\n                                                \"str\",\n                                                \"red\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"blue\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.089619+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 542\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Dict match: Custom comparators\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.091710+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"3\"\n                                            ],\n                                            [\n                                                \"func\",\n                                                \"<lambda>\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"bar\",\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            \"color\",\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"blue\"\n                                            ],\n                                            [\n                                                \"func\",\n                                                \"VAL in ['blue', 'red', 'yellow']\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"baz\",\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"hello world\"\n                                            ],\n                                            [\n                                                \"REGEX\",\n                                                \"\\\\w+ world\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:59.091718+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 560\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"default assertion passes because the values are numerically equal\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.093424+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ],\n                                            [\n                                                \"float\",\n                                                1.0\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"bar\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ],\n                                            [\n                                                \"float\",\n                                                2.0\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"baz\",\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"3\"\n                                            ],\n                                            [\n                                                \"float\",\n                                                3.0\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:59.093432+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 572\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"when we check types the assertion will fail\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.094973+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"Failed\",\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ],\n                                            [\n                                                \"float\",\n                                                1.0\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"bar\",\n                                            \"Failed\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ],\n                                            [\n                                                \"float\",\n                                                2.0\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"baz\",\n                                            \"Failed\",\n                                            [\n                                                \"int\",\n                                                \"3\"\n                                            ],\n                                            [\n                                                \"float\",\n                                                3.0\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.094981+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 578\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"use a custom comparison function to check within a tolerance\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.096547+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"Passed\",\n                                            [\n                                                \"float\",\n                                                1.02\n                                            ],\n                                            [\n                                                \"float\",\n                                                0.98\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"bar\",\n                                            \"Passed\",\n                                            [\n                                                \"float\",\n                                                2.28\n                                            ],\n                                            [\n                                                \"float\",\n                                                2.33\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"baz\",\n                                            \"Passed\",\n                                            [\n                                                \"float\",\n                                                3.5\n                                            ],\n                                            [\n                                                \"float\",\n                                                3.46\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"machine_time\": \"2020-01-10T11:06:59.096554+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 587\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"only report the failing comparison\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"DictMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.098102+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            \"bad_key\",\n                                            \"Failed\",\n                                            [\n                                                \"str\",\n                                                \"actual\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"expected\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.098109+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 601\n                                },\n                                {\n                                    \"absent_keys_diff\": [\n                                        \"bar\"\n                                    ],\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"has_keys_diff\": [\n                                        \"alpha\"\n                                    ],\n                                    \"type\": \"DictCheck\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.099751+00:00\",\n                                    \"passed\": false,\n                                    \"absent_keys\": [\n                                        \"bar\",\n                                        \"beta\"\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.099760+00:00\",\n                                    \"line_no\": 611,\n                                    \"has_keys\": [\n                                        \"foo\",\n                                        \"alpha\"\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"DictLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.101282+00:00\",\n                                    \"flattened_dict\": [\n                                        [\n                                            0,\n                                            \"foo\",\n                                            \"\"\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            [\n                                                \"int\",\n                                                \"3\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"bar\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            \"color\",\n                                            [\n                                                \"str\",\n                                                \"blue\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"baz\",\n                                            [\n                                                \"str\",\n                                                \"hello world\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.101290+00:00\",\n                                    \"line_no\": 620\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 0,\n                                \"failed\": 1,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"826ee3d4-0dea-412b-9652-86f5847706d9\",\n                            \"status\": \"failed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:59.116938+00:00\",\n                                    \"start\": \"2020-01-10T03:06:59.111312+00:00\"\n                                }\n                            },\n                            \"hash\": 3253704292606433761,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_fix_namespace\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"FixMatch\",\n                                    \"include_keys\": null,\n                                    \"utc_time\": \"2020-01-10T03:06:59.111446+00:00\",\n                                    \"actual_description\": null,\n                                    \"expected_description\": null,\n                                    \"comparison\": [\n                                        [\n                                            0,\n                                            36,\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"6\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"6\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            22,\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"5\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"5\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            55,\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ],\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            38,\n                                            \"Passed\",\n                                            [\n                                                \"int\",\n                                                \"5\"\n                                            ],\n                                            [\n                                                \"func\",\n                                                \"VAL >= 4\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            555,\n                                            \"Failed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"Failed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            600,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"A\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"A\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            601,\n                                            \"Failed\",\n                                            [\n                                                \"str\",\n                                                \"A\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"B\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            683,\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            2,\n                                            688,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"a\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"a\"\n                                            ]\n                                        ],\n                                        [\n                                            2,\n                                            689,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"a\"\n                                            ],\n                                            [\n                                                \"REGEX\",\n                                                \"[a-z]\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            2,\n                                            688,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"b\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"b\"\n                                            ]\n                                        ],\n                                        [\n                                            2,\n                                            689,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"b\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"b\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"Failed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            600,\n                                            \"Failed\",\n                                            [\n                                                \"str\",\n                                                \"B\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"C\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            601,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"B\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"B\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            683,\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            2,\n                                            688,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"c\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"c\"\n                                            ]\n                                        ],\n                                        [\n                                            2,\n                                            689,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"c\"\n                                            ],\n                                            [\n                                                \"func\",\n                                                \"VAL in ('c', 'd')\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            \"\",\n                                            \"Passed\",\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            2,\n                                            688,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"d\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"d\"\n                                            ]\n                                        ],\n                                        [\n                                            2,\n                                            689,\n                                            \"Passed\",\n                                            [\n                                                \"str\",\n                                                \"d\"\n                                            ],\n                                            [\n                                                \"str\",\n                                                \"d\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"passed\": false,\n                                    \"machine_time\": \"2020-01-10T11:06:59.111452+00:00\",\n                                    \"exclude_keys\": null,\n                                    \"line_no\": 708\n                                },\n                                {\n                                    \"absent_keys_diff\": [\n                                        555\n                                    ],\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"assertion\",\n                                    \"has_keys_diff\": [\n                                        26,\n                                        11\n                                    ],\n                                    \"type\": \"FixCheck\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.113689+00:00\",\n                                    \"passed\": false,\n                                    \"absent_keys\": [\n                                        444,\n                                        555\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.113697+00:00\",\n                                    \"line_no\": 716,\n                                    \"has_keys\": [\n                                        26,\n                                        22,\n                                        11\n                                    ]\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": null,\n                                    \"meta_type\": \"entry\",\n                                    \"type\": \"FixLog\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.115483+00:00\",\n                                    \"flattened_dict\": [\n                                        [\n                                            0,\n                                            36,\n                                            [\n                                                \"int\",\n                                                \"6\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            22,\n                                            [\n                                                \"int\",\n                                                \"5\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            55,\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            38,\n                                            [\n                                                \"int\",\n                                                \"5\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            555,\n                                            \"\"\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            556,\n                                            [\n                                                \"str\",\n                                                \"USD\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            624,\n                                            [\n                                                \"int\",\n                                                \"1\"\n                                            ]\n                                        ],\n                                        [\n                                            0,\n                                            \"\",\n                                            \"\"\n                                        ],\n                                        [\n                                            1,\n                                            556,\n                                            [\n                                                \"str\",\n                                                \"EUR\"\n                                            ]\n                                        ],\n                                        [\n                                            1,\n                                            624,\n                                            [\n                                                \"int\",\n                                                \"2\"\n                                            ]\n                                        ]\n                                    ],\n                                    \"machine_time\": \"2020-01-10T11:06:59.115490+00:00\",\n                                    \"line_no\": 729\n                                }\n                            ]\n                        },\n                        {\n                            \"category\": \"testcase\",\n                            \"logs\": [],\n                            \"description\": null,\n                            \"suite_related\": false,\n                            \"counter\": {\n                                \"passed\": 1,\n                                \"failed\": 0,\n                                \"total\": 1\n                            },\n                            \"status_reason\": null,\n                            \"type\": \"TestCaseReport\",\n                            \"uid\": \"52a8a7d9-80e6-4f7f-8eef-065bb25d38f8\",\n                            \"status\": \"passed\",\n                            \"parent_uids\": [\n                                \"Assertions Example\",\n                                \"Assertions Test\",\n                                \"SampleSuite\"\n                            ],\n                            \"timer\": {\n                                \"run\": {\n                                    \"end\": \"2020-01-10T03:06:59.129247+00:00\",\n                                    \"start\": \"2020-01-10T03:06:59.123570+00:00\"\n                                }\n                            },\n                            \"hash\": -5041530229790182508,\n                            \"runtime_status\": \"finished\",\n                            \"name\": \"test_xml_namespace\",\n                            \"status_override\": null,\n                            \"tags\": {},\n                            \"entries\": [\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"Simple XML check for existence of xpath.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"XMLCheck\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.123813+00:00\",\n                                    \"namespaces\": null,\n                                    \"data\": [],\n                                    \"passed\": true,\n                                    \"xml\": \"<Root>\\n                <Test>Foo</Test>\\n            </Root>\\n\",\n                                    \"machine_time\": \"2020-01-10T11:06:59.123821+00:00\",\n                                    \"tags\": null,\n                                    \"line_no\": 751,\n                                    \"message\": \"xpath: `/Root/Test` exists in the XML.\",\n                                    \"xpath\": \"/Root/Test\"\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"XML check for tags in the given xpath.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"XMLCheck\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.125438+00:00\",\n                                    \"namespaces\": null,\n                                    \"data\": [\n                                        [\n                                            \"Value1\",\n                                            null,\n                                            null,\n                                            null\n                                        ],\n                                        [\n                                            \"Value2\",\n                                            null,\n                                            null,\n                                            null\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"xml\": \"<Root>\\n                <Test>Value1</Test>\\n                <Test>Value2</Test>\\n            </Root>\\n\",\n                                    \"machine_time\": \"2020-01-10T11:06:59.125447+00:00\",\n                                    \"tags\": [\n                                        \"Value1\",\n                                        \"Value2\"\n                                    ],\n                                    \"line_no\": 765,\n                                    \"message\": null,\n                                    \"xpath\": \"/Root/Test\"\n                                },\n                                {\n                                    \"category\": \"DEFAULT\",\n                                    \"description\": \"XML check with namespace matching.\",\n                                    \"meta_type\": \"assertion\",\n                                    \"type\": \"XMLCheck\",\n                                    \"utc_time\": \"2020-01-10T03:06:59.127250+00:00\",\n                                    \"namespaces\": {\n                                        \"a\": \"http://testplan\"\n                                    },\n                                    \"data\": [\n                                        [\n                                            \"Hello world!\",\n                                            null,\n                                            null,\n                                            \"REGEX(Hello*)\"\n                                        ]\n                                    ],\n                                    \"passed\": true,\n                                    \"xml\": \"<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n                <SOAP-ENV:Header/>\\n                <SOAP-ENV:Body>\\n                    <ns0:message xmlns:ns0=\\\"http://testplan\\\">Hello world!</ns0:message>\\n                </SOAP-ENV:Body>\\n            </SOAP-ENV:Envelope>\\n\",\n                                    \"machine_time\": \"2020-01-10T11:06:59.127259+00:00\",\n                                    \"tags\": [\n                                        \"re.compile('Hello*')\"\n                                    ],\n                                    \"line_no\": 784,\n                                    \"message\": null,\n                                    \"xpath\": \"//*/a:message\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n\n\nexport {\n  TESTPLAN_REPORT,\n  fakeReportAssertions,\n}\n","import React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport axios from 'axios';\n\nimport Toolbar from '../Toolbar/Toolbar';\nimport Nav from '../Nav/Nav';\nimport {\n  PropagateIndices,\n  UpdateSelectedState,\n  GetReportState,\n  GetCenterPane,\n  GetSelectedEntries,\n} from \"./reportUtils\";\nimport {COLUMN_WIDTH} from \"../Common/defaults\";\nimport {fakeReportAssertions} from \"../Common/fakeReport\";\n\n/**\n * BatchReport component:\n *   * fetch Testplan report.\n *   * display messages when loading report or error in report.\n *   * render toolbar, nav & assertion components.\n */\nclass BatchReport extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNavFilter = this.handleNavFilter.bind(this);\n    this.updateFilter = this.updateFilter.bind(this);\n    this.updateTagsDisplay = this.updateTagsDisplay.bind(this);\n    this.updateDisplayEmpty = this.updateDisplayEmpty.bind(this);\n    this.handleNavClick = this.handleNavClick.bind(this);\n\n    this.state = {\n      navWidth: COLUMN_WIDTH,\n      report: null,\n      testcaseUid: null,\n      loading: false,\n      error: null,\n      filter: null,\n      displayTags: false,\n      displayEmpty: true,\n      selectedUIDs: [],\n    };\n  }\n\n  /**\n   * Fetch the Testplan report.\n   *   * Get the UID from the URL.\n   *   * Handle UID errors.\n   *   * Make a GET request for the Testplan report.\n   *   * Handle error response.\n   * @public\n   */\n  getReport() {\n    // Inspect the UID to determine the report to render. As a special case,\n    // we will display a fake report for development purposes.\n    const uid = this.props.match.params.uid;\n    if (uid === \"_dev\") {\n      const processedReport = PropagateIndices(fakeReportAssertions);\n      setTimeout(\n        () => this.setState({\n          report: processedReport,\n          selectedUIDs: this.autoSelect(processedReport),\n          loading: false,\n        }),\n        1500);\n    } else {\n      axios.get(`/api/v1/reports/${uid}`)\n        .then(response => {\n          const processedReport = PropagateIndices(response.data);\n          this.setState({\n            report: processedReport,\n            selectedUIDs: this.autoSelect(processedReport),\n            loading: false,\n          });\n        })\n        .catch(error => this.setState({\n          error: error,\n          loading: false,\n        }));\n    }\n  }\n\n  /**\n   * Auto-select an entry in the report when it is first loaded.\n   */\n  autoSelect(reportEntry) {\n    const selection = [reportEntry];\n\n    // If the current report entry has only one child entry and that entry is\n    // not a testcase, we automatically expand it.\n    if ((reportEntry.entries.length === 1) &&\n        (reportEntry.entries[0].category!== \"testcase\")) {\n      return selection.concat(this.autoSelect(reportEntry.entries[0]));\n    } else {\n      return selection;\n    }\n  }\n\n  /**\n   * Fetch the Testplan report once the component has mounted.\n   * @public\n   */\n  componentDidMount() {\n    this.setState({loading: true}, this.getReport);\n  }\n\n  /**\n   * Handle filter expressions being typed into the filter box. Placeholder.\n   *\n   * @param {Object} e - keyup event.\n   * @public\n   */\n  handleNavFilter(e) { // eslint-disable-line no-unused-vars\n    // Save expressions to state.\n  }\n\n  /**\n   * Update the global filter state of the entry.\n   *\n   * @param {string} filter - null, all, pass or fail.\n   * @public\n   */\n  updateFilter(filter) {\n    this.setState({filter: filter});\n  }\n\n  updateTagsDisplay(displayTags) {\n    this.setState({displayTags: displayTags});\n  }\n\n  updateDisplayEmpty(displayEmpty) {\n    this.setState({displayEmpty: displayEmpty});\n  }\n\n  /**\n   * Handle a navigation entry being clicked.\n   */\n  handleNavClick(e, entry, depth) {\n    e.stopPropagation();\n    this.setState((state, props) => UpdateSelectedState(state, entry, depth));\n  }\n\n  render() {\n    const {reportStatus, reportFetchMessage} = GetReportState(this.state);\n\n    if (this.state.report && this.state.report.name) {\n      window.document.title = this.state.report.name;\n    }\n\n    const selectedEntries = GetSelectedEntries(\n      this.state.selectedUIDs, this.state.report\n    );\n    const centerPane = GetCenterPane(\n      this.state,\n      this.props,\n      reportFetchMessage,\n      this.props.match.params.uid,\n      selectedEntries,\n    );\n\n    return (\n      <div className={css(styles.batchReport)}>\n        <Toolbar\n          status={reportStatus}\n          report={this.state.report}\n          handleNavFilter={this.handleNavFilter}\n          updateFilterFunc={this.updateFilter}\n          updateEmptyDisplayFunc={this.updateDisplayEmpty}\n          updateTagsDisplayFunc={this.updateTagsDisplay}\n        />\n        <Nav\n          report={this.state.report}\n          selected={selectedEntries}\n          filter={this.state.filter}\n          displayEmpty={this.state.displayEmpty}\n          displayTags={this.state.displayTags}\n          handleNavClick={this.handleNavClick}\n        />\n        {centerPane}\n      </div>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  batchReport: {\n    /** overflow will hide dropdown div */\n    // overflow: 'hidden'\n  }\n});\n\nexport default BatchReport;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Badge} from 'reactstrap';\nimport {StyleSheet, css} from \"aphrodite\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {\n  faPlay,\n  faRedo,\n  faToggleOff,\n  faToggleOn\n} from '@fortawesome/free-solid-svg-icons';\nimport {BarLoader} from 'react-spinners';\n\nimport {\n  RED,\n  GREEN,\n  LIGHT_GREY,\n  MEDIUM_GREY,\n  CATEGORY_ICONS,\n  ENTRY_TYPES,\n  STATUS,\n  STATUS_CATEGORY,\n  RUNTIME_STATUS,\n} from \"../Common/defaults\";\n\n/**\n * Display interactive NavEntry information:\n *   * name.\n *   * case count (passed/failed).\n *   * type (displayed in badge).\n *   * Interactive status icon\n *   * Environment status icon (if required)\n */\nconst InteractiveNavEntry = (props) => {\n  const badgeStyle = `${STATUS_CATEGORY[props.status]}Badge`;\n\n  const statusIcon = getStatusIcon(\n    props.runtime_status, props.handlePlayClick\n  );\n  const envStatusIcon = getEnvStatusIcon(\n    props.envStatus, props.envCtrlCallback\n  );\n\n  return (\n    <div className='d-flex justify-content-between'>\n      <div className={\n        css(styles.entryName, styles[STATUS_CATEGORY[props.status]])\n        }>\n        {props.name}\n      </div>\n      <div className={css(styles.entryIcons)}>\n        <i className={css(styles.entryIcon)} title='passed/failed testcases'>\n          <span className={css(styles.passed)}>{props.caseCountPassed}</span>\n          /\n          <span className={css(styles.failed)}>{props.caseCountFailed}</span>\n        </i>\n        <Badge\n          className={css(styles.entryIcon, styles[badgeStyle])}\n          title={props.type}\n          pill\n        >\n          {CATEGORY_ICONS[props.type]}\n        </Badge>\n        {envStatusIcon}\n        {statusIcon}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Returns the appropriate component to display for an interactive entry.\n *\n * * When the entry is ready to run, render a play button.\n *\n * * When the entry is being run, render a \"loading\" bar. The bar has no\n *   relation to actual test progress, it's just a visual indicator that\n *   something is being run.\n *\n * * When the entry has been run, render a replay button.\n */\nconst getStatusIcon = (entryStatus, handlePlayClick) => {\n  switch (entryStatus) {\n    case 'ready':\n      return (\n        <FontAwesomeIcon\n          className={css(styles.entryButton)}\n          icon={faPlay}\n          title='Run tests'\n          onClick={handlePlayClick}\n        />\n      );\n\n    case 'running':\n      return (\n        <BarLoader\n          color={'#123abc'}\n          loading={true}\n          size={4}\n        />\n      );\n\n    case 'finished':\n      return (\n        <FontAwesomeIcon\n          className={css(styles.entryButton)}\n          icon={faRedo}\n          title='Run tests'\n          onClick={handlePlayClick}\n        />\n      );\n\n    default:\n      throw new Error(\"Unexpected status: \" + entryStatus);\n  }\n};\n\n/**\n * Returns the environment control component for entries that own an\n * environment. Returns null for entries that do not have an environment.\n */\nconst getEnvStatusIcon = (envStatus, envCtrlCallback) => {\n  switch (envStatus) {\n      case 'STOPPED':\n        return (\n          <FontAwesomeIcon\n            className={css(styles.entryButton)}\n            icon={faToggleOff}\n            title='Start environment'\n            onClick={(e) => envCtrlCallback(e, \"start\")}\n          />\n        );\n\n      case 'STARTING':\n        return (\n          <FontAwesomeIcon\n            className={css(styles.inactiveEntryButton)}\n            icon={faToggleOff}\n            title='Environment starting...'\n          />\n        );\n\n      case 'STARTED':\n        return (\n          <FontAwesomeIcon\n            className={css(styles.entryButton)}\n            icon={faToggleOn}\n            title='Start environment'\n            onClick={(e) => envCtrlCallback(e, \"stop\")}\n          />\n        );\n\n      case 'STOPPING':\n        return (\n          <FontAwesomeIcon\n            className={css(styles.inactiveEntryButton)}\n            icon={faToggleOn}\n            title='Environment stopping...'\n          />\n        );\n\n      default:\n          return null;\n  }\n};\n\nInteractiveNavEntry.propTypes = {\n  /** Entry name */\n  name: PropTypes.string,\n  /** Entry status */\n  status: PropTypes.oneOf(STATUS),\n  runtime_status: PropTypes.oneOf(RUNTIME_STATUS),\n  /** Entry type */\n  type: PropTypes.oneOf(ENTRY_TYPES),\n  /** Number of passing testcases entry has */\n  caseCountPassed: PropTypes.number,\n  /** Number of failing testcases entry has */\n  caseCountFailed: PropTypes.number,\n};\n\nconst styles = StyleSheet.create({\n  entryName: {\n    overflow: 'hidden',\n    fontSize: '1em',\n    fontWeight: 500,\n  },\n  entryIcons: {\n    paddingLeft: '1em',\n    display: 'flex',\n    \"flex-wrap\": \"nowrap\",\n    \"align-items\": \"center\",\n  },\n  entryIcon: {\n    fontSize: '0.6em',\n    margin: '0em 0.5em 0em 0.5em',\n  },\n  entryButton: {\n    textDecoration: 'none',\n    position: 'relative',\n    display: 'inline-block',\n    height: '2.4em',\n    width: '2.4em',\n    cursor: 'pointer',\n    color: 'black',\n    padding: '0.7em 0em 0.7em 0em',\n    transition: 'all 0.3s ease-out 0s',\n    ':hover': {\n        color: LIGHT_GREY\n    }\n  },\n  inactiveEntryButton: {\n    textDecoration: 'none',\n    position: 'relative',\n    display: 'inline-block',\n    height: '2.4em',\n    width: '2.4em',\n    cursor: 'pointer',\n    color: MEDIUM_GREY,\n    padding: '0.7em 0em 0.7em 0em',\n    transition: 'all 0.3s ease-out 0s',\n  },\n  passedBadge: {\n    backgroundColor: GREEN,\n    opacity: 0.5,\n  },\n  failedBadge: {\n    backgroundColor: RED,\n    opacity: 0.5,\n  },\n  passed: {\n    color: GREEN,\n  },\n  failed: {\n    color: RED,\n  },\n});\n\nexport default InteractiveNavEntry;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ListGroup} from 'reactstrap';\n\nimport InteractiveNavEntry from './InteractiveNavEntry';\nimport Column from './Column';\nimport {CreateNavButtons} from './navUtils.js';\nimport {\n  STATUS, RUNTIME_STATUS,\n  INTERACTIVE_COL_WIDTH\n} from \"../Common/defaults\";\n\n/**\n * Render a vertical list of all the currently selected entries children for\n * an interactive report.\n */\nconst InteractiveNavList = (props) => {\n  const navButtons = CreateNavButtons(\n    props,\n    (entry) => (\n      <InteractiveNavEntry\n        name={entry.name}\n        status={entry.status}\n        runtime_status={entry.runtime_status}\n        envStatus={entry.env_status}\n        type={entry.category}\n        caseCountPassed={entry.counter.passed}\n        caseCountFailed={entry.counter.failed}\n        handlePlayClick={(e) => props.handlePlayClick(e, entry)}\n        envCtrlCallback={\n          (e, action) => props.envCtrlCallback(e, entry, action)\n        }\n      />\n    ),\n    props.selectedUid,\n  );\n\n  return (\n    // Make the column a little wider for the interactive mode, to account for\n    // extra space used by the interactive buttons.\n    <Column width={INTERACTIVE_COL_WIDTH} >\n      <ListGroup>{navButtons}</ListGroup>\n    </Column>\n  );\n};\n\nInteractiveNavList.propTypes = {\n  /** Nav list entries to be displayed */\n  entries: PropTypes.arrayOf(PropTypes.shape({\n    uid: PropTypes.string,\n    name: PropTypes.string,\n    status: PropTypes.oneOf(STATUS),\n    runtime_status: PropTypes.oneOf(RUNTIME_STATUS),\n    counter: PropTypes.shape({\n      passed: PropTypes.number,\n      failed: PropTypes.number,\n    }),\n  })),\n  /** Number of entries in the breadcrumb menu */\n  breadcrumbLength: PropTypes.number,\n  /** Function to handle Nav entries being clicked (selected) */\n  handleNavClick: PropTypes.func,\n  /** Function to automatically select Nav entries */\n  autoSelect: PropTypes.func,\n  /** Entity filter */\n  filter: PropTypes.string,\n  /** Flag to display tags on navbar */\n  displayEmpty: PropTypes.bool,\n  /** Flag to display empty testcase on navbar */\n  displayTags: PropTypes.bool,\n};\n\nexport default InteractiveNavList;\n","/* Interactive navigation component. */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport NavBreadcrumbs from \"./NavBreadcrumbs\";\nimport InteractiveNavList from \"./InteractiveNavList\";\nimport {GetSelectedUid, GetNavEntries, GetNavBreadcrumbs} from \"./navUtils\";\n\n/**\n * Interactive Nav component.\n *\n * Performs similar function as the batch report Nav component, but for\n * interactive mode. Key differences:\n *\n *   * Does not auto-select testcases. Only the root Testplan report is\n *     first selected.\n *   * Adds extra buttons for running testcases interactively and controlling\n *     environments.\n *\n * This component and its sub-components are a WORK IN PROGRESS and is likely\n * to change. In particular, there may initially be some code duplication\n * with the main Nav component, which will need to be eliminated.\n */\nconst InteractiveNav = (props) => {\n  const navEntries = GetNavEntries(props.selected);\n  const breadCrumbEntries = GetNavBreadcrumbs(props.selected);\n\n  return (\n    <>\n      <NavBreadcrumbs\n        entries={breadCrumbEntries}\n        handleNavClick={props.handleNavClick}\n      />\n      <InteractiveNavList\n        entries={navEntries}\n        breadcrumbLength={breadCrumbEntries.length}\n        handleNavClick={props.handleNavClick}\n        autoSelect={() => undefined}\n        filter={null}\n        displayEmpty={true}\n        displayTags={false}\n        selectedUid={GetSelectedUid(props.selected)}\n        handlePlayClick={props.handlePlayClick}\n        envCtrlCallback={props.envCtrlCallback}\n      />\n    </>\n  );\n};\n\nInteractiveNav.propTypes = {\n  /** Testplan report */\n  report: PropTypes.object,\n};\n\nexport default InteractiveNav;\n","/**\n * Sample Testplan reports to be used in development & testing.\n */\nconst TESTPLAN_REPORT = {\n  \"category\": \"testplan\",\n  \"name\": \"Sample Testplan\",\n  \"status\": \"failed\",\n  \"uid\": \"520a92e4-325e-4077-93e6-55d7091a3f83\",\n  \"tags_index\": {},\n  \"status_override\": null,\n  \"meta\": {},\n  \"timer\": {\n    \"run\": {\n      \"start\": \"2018-10-15T14:30:10.998071+00:00\",\n      \"end\": \"2018-10-15T14:30:11.296158+00:00\"\n    }\n  },\n  \"entries\": [\n    {\n      \"name\": \"Primary\",\n      \"status\": \"failed\",\n      \"category\": \"multitest\",\n      \"description\": null,\n      \"status_override\": null,\n      \"uid\": \"21739167-b30f-4c13-a315-ef6ae52fd1f7\",\n      \"type\": \"TestGroupReport\",\n      \"logs\": [],\n      \"tags\": {\n        \"simple\": [\"server\"]\n      },\n      \"timer\": {\n        \"run\": {\n          \"start\": \"2018-10-15T14:30:11.009705+00:00\",\n          \"end\": \"2018-10-15T14:30:11.159661+00:00\"\n        }\n      },\n      \"entries\": [\n        {\n          \"status\": \"failed\",\n          \"category\": \"testsuite\",\n          \"name\": \"AlphaSuite\",\n          \"status_override\": null,\n          \"description\": null,\n          \"uid\": \"cb144b10-bdb0-44d3-9170-d8016dd19ee7\",\n          \"type\": \"TestGroupReport\",\n          \"logs\": [],\n          \"tags\": {\n            \"simple\": [\"server\"]\n          },\n          \"timer\": {\n            \"run\": {\n              \"start\": \"2018-10-15T14:30:11.009872+00:00\",\n              \"end\": \"2018-10-15T14:30:11.158224+00:00\"\n            }\n          },\n          \"entries\": [\n            {\n              \"category\": 'testcase',\n              \"name\": \"test_equality_passing\",\n              \"status\": \"passed\",\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"736706ef-ba65-475d-96c5-f2855f431028\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"tags\": {\n                \"colour\": [\"white\"]\n              },\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:11.010072+00:00\",\n                  \"end\": \"2018-10-15T14:30:11.132214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:11.010098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:11.010094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n            {\n              \"category\": 'testcase',\n              \"name\": \"test_equality_passing2\",\n              \"status\": \"failed\",\n              \"tags\": {},\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"78686a4d-7b94-4ae6-ab50-d9960a7fb714\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:11.510072+00:00\",\n                  \"end\": \"2018-10-15T14:30:11.632214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:11.510098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:11.510094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n          ],\n        },\n        {\n          \"status\": \"passed\",\n          \"category\": \"testsuite\",\n          \"name\": \"BetaSuite\",\n          \"status_override\": null,\n          \"description\": null,\n          \"uid\": \"6fc5c008-4d1a-454e-80b6-74bdc9bca49e\",\n          \"type\": \"TestGroupReport\",\n          \"logs\": [],\n          \"tags\": {\n            \"simple\": [\"client\"]\n          },\n          \"timer\": {\n            \"run\": {\n              \"start\": \"2018-10-15T14:30:11.009872+00:00\",\n              \"end\": \"2018-10-15T14:30:11.158224+00:00\"\n            }\n          },\n          \"entries\": [\n            {\n              \"category\": 'testcase',\n              \"name\": \"test_equality_passing\",\n              \"status\": \"passed\",\n              \"tags\": {},\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"8865a23d-1823-4c8d-ab37-58d24fc8ac05\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:11.010072+00:00\",\n                  \"end\": \"2018-10-15T14:30:11.132214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:11.010098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:11.010094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      \"name\": \"Secondary\",\n      \"status\": \"passed\",\n      \"category\": \"multitest\",\n      \"tags\": {},\n      \"description\": null,\n      \"status_override\": null,\n      \"uid\": \"8c3c7e6b-48e8-40cd-86db-8c8aed2592c8\",\n      \"type\": \"TestGroupReport\",\n      \"logs\": [],\n      \"timer\": {\n        \"run\": {\n          \"start\": \"2018-10-15T14:30:12.009705+00:00\",\n          \"end\": \"2018-10-15T14:30:12.159661+00:00\"\n        }\n      },\n      \"entries\": [\n        {\n          \"status\": \"passed\",\n          \"category\": \"testsuite\",\n          \"name\": \"GammaSuite\",\n          \"tags\": {},\n          \"status_override\": null,\n          \"description\": null,\n          \"uid\": \"08d4c671-d55d-49d4-96ba-dc654d12be26\",\n          \"type\": \"TestGroupReport\",\n          \"logs\": [],\n          \"timer\": {\n            \"run\": {\n              \"start\": \"2018-10-15T14:30:12.009872+00:00\",\n              \"end\": \"2018-10-15T14:30:12.158224+00:00\"\n            }\n          },\n          \"entries\": [\n            {\n              \"category\": 'testcase',\n              \"name\": \"test_equality_passing\",\n              \"status\": \"passed\",\n              \"tags\": {},\n              \"status_override\": null,\n              \"description\": null,\n              \"uid\": \"f73bd6ea-d378-437b-a5db-00d9e427f36a\",\n              \"type\": \"TestCaseReport\",\n              \"logs\": [],\n              \"timer\": {\n                \"run\": {\n                  \"start\": \"2018-10-15T14:30:12.010072+00:00\",\n                  \"end\": \"2018-10-15T14:30:12.132214+00:00\"\n                }\n              },\n              \"entries\": [\n                {\n                  \"category\": \"DEFAULT\",\n                  \"machine_time\": \"2018-10-15T15:30:12.010098+00:00\",\n                  \"description\": \"passing equality\",\n                  \"line_no\": 24,\n                  \"label\": \"==\",\n                  \"second\": 1,\n                  \"meta_type\": \"assertion\",\n                  \"passed\": true,\n                  \"type\": \"Equal\",\n                  \"utc_time\": \"2018-10-15T14:30:12.010094+00:00\",\n                  \"first\": 1\n                }\n              ],\n            },\n          ],\n        }\n      ],\n    },\n  ],\n};\n\nvar fakeReportAssertions = {\"status\": \"failed\", \"uid\": \"94a616f8-4400-4ca4-b213-32664701ca8a\", \"tags_index\": {}, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:42.707149+00:00\", \"end\": \"2019-02-12T17:41:43.534854+00:00\"}}, \"status_override\": null, \"meta\": {}, \"entries\": [{\"status\": \"failed\", \"category\": \"multitest\", \"name\": \"Assertions Test\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:42.795281+00:00\", \"end\": \"2019-02-12T17:41:43.334400+00:00\"}}, \"status_override\": null, \"part\": null, \"entries\": [{\"status\": \"failed\", \"category\": \"testsuite\", \"name\": \"SampleSuite\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:42.795390+00:00\", \"end\": \"2019-02-12T17:41:43.332348+00:00\"}}, \"status_override\": null, \"part\": null, \"entries\": [{\"status\": \"failed\", \"name\": \"test_basic_assertions\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:42.795489+00:00\", \"end\": \"2019-02-12T17:41:43.060889+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:42.795536+00:00\", \"description\": null, \"line_no\": 25, \"label\": \"==\", \"second\": \"foo\", \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Equal\", \"utc_time\": \"2019-02-12T17:41:42.795530+00:00\", \"first\": \"foo\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.019771+00:00\", \"description\": \"Description for failing equality\", \"line_no\": 28, \"label\": \"==\", \"second\": 2, \"meta_type\": \"assertion\", \"passed\": false, \"type\": \"Equal\", \"utc_time\": \"2019-02-12T17:41:43.019761+00:00\", \"first\": 1}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.021937+00:00\", \"description\": null, \"line_no\": 30, \"label\": \"!=\", \"second\": \"bar\", \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"NotEqual\", \"utc_time\": \"2019-02-12T17:41:43.021930+00:00\", \"first\": \"foo\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.023470+00:00\", \"description\": null, \"line_no\": 31, \"label\": \">\", \"second\": 2, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Greater\", \"utc_time\": \"2019-02-12T17:41:43.023464+00:00\", \"first\": 5}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.025466+00:00\", \"description\": null, \"line_no\": 32, \"label\": \">=\", \"second\": 2, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"GreaterEqual\", \"utc_time\": \"2019-02-12T17:41:43.025459+00:00\", \"first\": 2}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.027089+00:00\", \"description\": null, \"line_no\": 33, \"label\": \">=\", \"second\": 1, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"GreaterEqual\", \"utc_time\": \"2019-02-12T17:41:43.027083+00:00\", \"first\": 2}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.028544+00:00\", \"description\": null, \"line_no\": 34, \"label\": \"<\", \"second\": 20, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Less\", \"utc_time\": \"2019-02-12T17:41:43.028537+00:00\", \"first\": 10}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.029897+00:00\", \"description\": null, \"line_no\": 35, \"label\": \"<=\", \"second\": 10, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"LessEqual\", \"utc_time\": \"2019-02-12T17:41:43.029890+00:00\", \"first\": 10}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.031373+00:00\", \"description\": null, \"line_no\": 36, \"label\": \"<=\", \"second\": 30, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"LessEqual\", \"utc_time\": \"2019-02-12T17:41:43.031367+00:00\", \"first\": 10}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.033139+00:00\", \"description\": null, \"line_no\": 41, \"label\": \"==\", \"second\": 15, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Equal\", \"utc_time\": \"2019-02-12T17:41:43.033133+00:00\", \"first\": 15}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.034645+00:00\", \"description\": null, \"line_no\": 42, \"label\": \"!=\", \"second\": 20, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"NotEqual\", \"utc_time\": \"2019-02-12T17:41:43.034639+00:00\", \"first\": 10}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.036234+00:00\", \"description\": null, \"line_no\": 43, \"label\": \"<\", \"second\": 3, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Less\", \"utc_time\": \"2019-02-12T17:41:43.036228+00:00\", \"first\": 2}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.037659+00:00\", \"description\": null, \"line_no\": 44, \"label\": \">\", \"second\": 2, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Greater\", \"utc_time\": \"2019-02-12T17:41:43.037653+00:00\", \"first\": 3}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.039108+00:00\", \"description\": null, \"line_no\": 45, \"label\": \"<=\", \"second\": 15, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"LessEqual\", \"utc_time\": \"2019-02-12T17:41:43.039101+00:00\", \"first\": 10}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.040526+00:00\", \"description\": null, \"line_no\": 46, \"label\": \">=\", \"second\": 10, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"GreaterEqual\", \"utc_time\": \"2019-02-12T17:41:43.040520+00:00\", \"first\": 15}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.042097+00:00\", \"description\": null, \"abs_tol\": 0.0, \"line_no\": 50, \"rel_tol\": 0.1, \"label\": \"~=\", \"second\": 95, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"IsClose\", \"utc_time\": \"2019-02-12T17:41:43.042090+00:00\", \"first\": 100}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.043757+00:00\", \"description\": null, \"abs_tol\": 0.0, \"line_no\": 51, \"rel_tol\": 0.01, \"label\": \"~=\", \"second\": 95, \"meta_type\": \"assertion\", \"passed\": false, \"type\": \"IsClose\", \"utc_time\": \"2019-02-12T17:41:43.043751+00:00\", \"first\": 100}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.045339+00:00\", \"description\": null, \"line_no\": 56, \"meta_type\": \"entry\", \"message\": \"This is a log message, it will be displayed along with other assertion details.\", \"type\": \"Log\", \"utc_time\": \"2019-02-12T17:41:43.045333+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.046710+00:00\", \"description\": \"Boolean Truthiness check\", \"expr\": true, \"line_no\": 61, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"IsTrue\", \"utc_time\": \"2019-02-12T17:41:43.046704+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.048126+00:00\", \"description\": \"Boolean Falseness check\", \"expr\": false, \"line_no\": 62, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"IsFalse\", \"utc_time\": \"2019-02-12T17:41:43.048120+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.049460+00:00\", \"description\": \"This is an explicit failure.\", \"line_no\": 64, \"meta_type\": \"assertion\", \"passed\": false, \"type\": \"Fail\", \"utc_time\": \"2019-02-12T17:41:43.049454+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.050888+00:00\", \"container\": \"foobar\", \"description\": \"Passing membership\", \"line_no\": 67, \"member\": \"foo\", \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Contain\", \"utc_time\": \"2019-02-12T17:41:43.050882+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.052594+00:00\", \"container\": \"{'a': 1, 'b': 2}\", \"description\": \"Failing membership\", \"line_no\": 71, \"member\": 10, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"NotContain\", \"utc_time\": \"2019-02-12T17:41:43.052579+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.053943+00:00\", \"actual\": [1, 2, 3, 4, 5, 6, 7, 8], \"description\": \"Comparison of slices\", \"data\": [[\"slice(2, 4, None)\", [2, 3], [], [3, 4], [3, 4]], [\"slice(6, 8, None)\", [6, 7], [], [7, 8], [7, 8]]], \"line_no\": 79, \"included_indices\": [], \"meta_type\": \"assertion\", \"passed\": true, \"expected\": [\"a\", \"b\", 3, 4, \"c\", \"d\", 7, 8], \"type\": \"EqualSlices\", \"utc_time\": \"2019-02-12T17:41:43.053936+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.055991+00:00\", \"actual\": [1, 2, 3, 4, 5, 6, 7, 8], \"description\": \"Comparison of slices (exclusion)\", \"data\": [[\"slice(0, 2, None)\", [2, 3, 4, 5, 6, 7], [4, 5, 6, 7], [3, 4, 5, 6, 7, 8], [3, 4, \"c\", \"d\", \"e\", \"f\"]], [\"slice(4, 8, None)\", [0, 1, 2, 3], [0, 1], [1, 2, 3, 4], [\"a\", \"b\", 3, 4]]], \"line_no\": 91, \"included_indices\": [2, 3], \"meta_type\": \"assertion\", \"passed\": true, \"expected\": [\"a\", \"b\", 3, 4, \"c\", \"d\", \"e\", \"f\"], \"type\": \"EqualExcludeSlices\", \"utc_time\": \"2019-02-12T17:41:43.055984+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.057544+00:00\", \"ignore_space_change\": false, \"description\": null, \"unified\": false, \"type\": \"LineDiff\", \"line_no\": 98, \"second\": [\"abc\\n\", \"xyz\\n\", \"\\n\"], \"meta_type\": \"assertion\", \"context\": false, \"ignore_whitespaces\": false, \"delta\": [], \"ignore_blank_lines\": true, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.057524+00:00\", \"first\": [\"abc\\n\", \"xyz\\n\"]}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.059150+00:00\", \"ignore_space_change\": true, \"description\": null, \"unified\": 3, \"type\": \"LineDiff\", \"line_no\": 102, \"second\": [\"1\\n\", \"1\\n\", \"1\\n\", \"abc \\n\", \"xy\\t\\tz\\n\", \"2\\n\", \"2\\n\", \"2\\n\"], \"meta_type\": \"assertion\", \"context\": false, \"ignore_whitespaces\": false, \"delta\": [], \"ignore_blank_lines\": false, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.059145+00:00\", \"first\": [\"1\\r\\n\", \"1\\r\\n\", \"1\\r\\n\", \"abc\\r\\n\", \"xy z\\r\\n\", \"2\\r\\n\", \"2\\r\\n\", \"2\\r\\n\"]}], \"uid\": \"22758cc5-8a89-472b-bf67-b64dbc2c0b40\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"passed\", \"name\": \"test_raised_exceptions\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.112235+00:00\", \"end\": \"2019-02-12T17:41:43.122266+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.112284+00:00\", \"description\": null, \"exception_match\": true, \"pattern\": null, \"line_no\": 112, \"expected_exceptions\": [\"KeyError\"], \"meta_type\": \"assertion\", \"raised_exception\": [\"<type 'exceptions.KeyError'>\", \"'bar'\"], \"func\": null, \"type\": \"ExceptionRaised\", \"func_match\": true, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.112279+00:00\", \"pattern_match\": true}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.113904+00:00\", \"description\": \"Exception raised with custom pattern.\", \"exception_match\": true, \"pattern\": \"foobar\", \"line_no\": 121, \"expected_exceptions\": [\"ValueError\"], \"meta_type\": \"assertion\", \"raised_exception\": [\"<type 'exceptions.ValueError'>\", \"abc foobar xyz\"], \"func\": null, \"type\": \"ExceptionRaised\", \"func_match\": true, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.113897+00:00\", \"pattern_match\": true}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.115702+00:00\", \"description\": \"Exception raised with custom func.\", \"exception_match\": true, \"pattern\": null, \"line_no\": 139, \"expected_exceptions\": [\"MyException\"], \"meta_type\": \"assertion\", \"raised_exception\": [\"<class '__main__.MyException'>\", \"\"], \"func\": \"<function custom_func at 0x7f1636de7f50>\", \"type\": \"ExceptionRaised\", \"func_match\": true, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.115690+00:00\", \"pattern_match\": true}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.117589+00:00\", \"description\": null, \"exception_match\": false, \"pattern\": null, \"line_no\": 146, \"expected_exceptions\": [\"TypeError\"], \"meta_type\": \"assertion\", \"raised_exception\": [\"<type 'exceptions.KeyError'>\", \"'bar'\"], \"func\": null, \"type\": \"ExceptionNotRaised\", \"func_match\": true, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.117579+00:00\", \"pattern_match\": true}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.119128+00:00\", \"description\": \"Exception not raised with custom pattern.\", \"exception_match\": true, \"pattern\": \"foobar\", \"line_no\": 157, \"expected_exceptions\": [\"ValueError\"], \"meta_type\": \"assertion\", \"raised_exception\": [\"<type 'exceptions.ValueError'>\", \"abc\"], \"func\": null, \"type\": \"ExceptionNotRaised\", \"func_match\": true, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.119120+00:00\", \"pattern_match\": null}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.120596+00:00\", \"description\": \"Exception not raised with custom func.\", \"exception_match\": true, \"pattern\": null, \"line_no\": 165, \"expected_exceptions\": [\"MyException\"], \"meta_type\": \"assertion\", \"raised_exception\": [\"<class '__main__.MyException'>\", \"\"], \"func\": \"<function custom_func at 0x7f1636de7f50>\", \"type\": \"ExceptionNotRaised\", \"func_match\": false, \"passed\": true, \"utc_time\": \"2019-02-12T17:41:43.120588+00:00\", \"pattern_match\": true}], \"uid\": \"ddb9ea4b-1d95-4948-b427-9abafd315b8d\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"failed\", \"name\": \"test_assertion_group\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.130541+00:00\", \"end\": \"2019-02-12T17:41:43.138126+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.130589+00:00\", \"description\": \"Equality assertion outside the group\", \"line_no\": 173, \"label\": \"==\", \"second\": 1, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Equal\", \"utc_time\": \"2019-02-12T17:41:43.130585+00:00\", \"first\": 1}, {\"meta_type\": \"assertion\", \"type\": \"Group\", \"description\": \"Custom group description\", \"passed\": false, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.132415+00:00\", \"description\": \"Assertion within a group\", \"line_no\": 176, \"label\": \"!=\", \"second\": 3, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"NotEqual\", \"utc_time\": \"2019-02-12T17:41:43.132399+00:00\", \"first\": 2}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.133860+00:00\", \"description\": null, \"line_no\": 177, \"label\": \">\", \"second\": 3, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Greater\", \"utc_time\": \"2019-02-12T17:41:43.133854+00:00\", \"first\": 5}, {\"meta_type\": \"assertion\", \"type\": \"Group\", \"description\": \"This is a sub group\", \"passed\": false, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.135357+00:00\", \"description\": \"Assertion within sub group\", \"line_no\": 181, \"label\": \"<\", \"second\": 3, \"meta_type\": \"assertion\", \"passed\": false, \"type\": \"Less\", \"utc_time\": \"2019-02-12T17:41:43.135351+00:00\", \"first\": 6}]}]}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.136700+00:00\", \"description\": \"Final assertion outside all groups\", \"line_no\": 184, \"label\": \"==\", \"second\": \"foo\", \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"Equal\", \"utc_time\": \"2019-02-12T17:41:43.136694+00:00\", \"first\": \"foo\"}], \"uid\": \"38ba8dc7-52dd-4005-ba8d-05bbad231a49\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"failed\", \"name\": \"test_regex_namespace\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.145240+00:00\", \"end\": \"2019-02-12T17:41:43.162524+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.145337+00:00\", \"description\": \"string pattern match\", \"pattern\": \"foo\", \"line_no\": 196, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [[0, 3]], \"type\": \"RegexMatch\", \"utc_time\": \"2019-02-12T17:41:43.145332+00:00\", \"string\": \"foobar\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.146933+00:00\", \"description\": \"SRE match\", \"pattern\": \"foo\", \"line_no\": 201, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [[0, 3]], \"type\": \"RegexMatch\", \"utc_time\": \"2019-02-12T17:41:43.146927+00:00\", \"string\": \"foobar\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.148410+00:00\", \"description\": null, \"pattern\": \"first line.*second\", \"line_no\": 212, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [[0, 17]], \"type\": \"RegexMatch\", \"utc_time\": \"2019-02-12T17:41:43.148404+00:00\", \"string\": \"first line\\nsecond line\\nthird line\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.150042+00:00\", \"description\": null, \"pattern\": \"baz\", \"line_no\": 217, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [], \"type\": \"RegexMatchNotExists\", \"utc_time\": \"2019-02-12T17:41:43.150037+00:00\", \"string\": \"foobar\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.151596+00:00\", \"description\": null, \"pattern\": \"foobar\", \"line_no\": 222, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [], \"type\": \"RegexMatchNotExists\", \"utc_time\": \"2019-02-12T17:41:43.151590+00:00\", \"string\": \"first line\\nsecond line\\nthird line\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.153301+00:00\", \"description\": null, \"pattern\": \"second\", \"line_no\": 225, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [[11, 17]], \"type\": \"RegexSearch\", \"utc_time\": \"2019-02-12T17:41:43.153294+00:00\", \"string\": \"first line\\nsecond line\\nthird line\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.154688+00:00\", \"description\": \"Passing search empty\", \"pattern\": \"foobar\", \"line_no\": 230, \"meta_type\": \"assertion\", \"passed\": true, \"match_indexes\": [], \"type\": \"RegexSearchNotExists\", \"utc_time\": \"2019-02-12T17:41:43.154681+00:00\", \"string\": \"first line\\nsecond line\\nthird line\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.155980+00:00\", \"description\": \"Failing search_empty\", \"pattern\": \"second\", \"line_no\": 233, \"meta_type\": \"assertion\", \"passed\": false, \"match_indexes\": [[11, 17]], \"type\": \"RegexSearchNotExists\", \"utc_time\": \"2019-02-12T17:41:43.155974+00:00\", \"string\": \"first line\\nsecond line\\nthird line\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.157637+00:00\", \"description\": null, \"string\": \"foo foo foo bar bar foo bar\", \"pattern\": \"foo\", \"line_no\": 243, \"condition_match\": true, \"meta_type\": \"assertion\", \"condition\": \"<lambda>\", \"passed\": true, \"type\": \"RegexFindIter\", \"utc_time\": \"2019-02-12T17:41:43.157630+00:00\", \"match_indexes\": [[0, 3], [4, 7], [8, 11], [20, 23]]}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.159271+00:00\", \"description\": null, \"string\": \"foo foo foo bar bar foo bar\", \"pattern\": \"foo\", \"line_no\": 250, \"condition_match\": true, \"meta_type\": \"assertion\", \"condition\": \"(VAL > 2 and VAL < 5)\", \"passed\": true, \"type\": \"RegexFindIter\", \"utc_time\": \"2019-02-12T17:41:43.159265+00:00\", \"match_indexes\": [[0, 3], [4, 7], [8, 11], [20, 23]]}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.160987+00:00\", \"description\": null, \"string\": \"first line\\nsecond line\\nthird line\", \"pattern\": \"\\\\w+ line$\", \"line_no\": 257, \"meta_type\": \"assertion\", \"passed\": true, \"type\": \"RegexMatchLine\", \"utc_time\": \"2019-02-12T17:41:43.160981+00:00\", \"match_indexes\": [[0, 0, 10], [1, 0, 11], [2, 0, 10]]}], \"uid\": \"bbc6f5aa-2f4d-4784-be1f-419aec688ba3\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"failed\", \"name\": \"test_table_namespace\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.176339+00:00\", \"end\": \"2019-02-12T17:41:43.266173+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.176922+00:00\", \"description\": \"Table Match: list of list vs list of list\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 0, \"line_no\": 284, \"data\": [[0, [\"Bob\", 32], {}, {}, {}], [1, [\"Susan\", 24], {}, {}, {}], [2, [\"Rick\", 67], {}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"name\", \"age\"], \"passed\": true, \"include_columns\": null, \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.176916+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.179172+00:00\", \"description\": \"Table Match: list of dict vs list of dict\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 0, \"line_no\": 289, \"data\": [[0, [32, \"Bob\"], {}, {}, {}], [1, [24, \"Susan\"], {}, {}, {}], [2, [67, \"Rick\"], {}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"age\", \"name\"], \"passed\": true, \"include_columns\": null, \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.179166+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.181633+00:00\", \"description\": \"Table Match: list of dict vs list of list\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 0, \"line_no\": 294, \"data\": [[0, [32, \"Bob\"], {}, {}, {}], [1, [24, \"Susan\"], {}, {}, {}], [2, [67, \"Rick\"], {}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"age\", \"name\"], \"passed\": true, \"include_columns\": null, \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.181627+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.183720+00:00\", \"description\": \"Table Diff: list of list vs list of list\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 0, \"line_no\": 299, \"data\": [], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"name\", \"age\"], \"passed\": true, \"include_columns\": null, \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.183714+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.185375+00:00\", \"description\": \"Table Diff: list of dict vs list of dict\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 0, \"line_no\": 304, \"data\": [], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"age\", \"name\"], \"passed\": true, \"include_columns\": null, \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.185368+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.187247+00:00\", \"description\": \"Table Diff: list of dict vs list of list\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 0, \"line_no\": 309, \"data\": [], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"age\", \"name\"], \"passed\": true, \"include_columns\": null, \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.187239+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.189243+00:00\", \"description\": \"Table Match: simple comparators\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 0, \"line_no\": 338, \"data\": [[0, [\"Bob\", 32], {}, {}, {\"age\": \"<lambda>\", \"name\": \"REGEX(\\\\w{3})\"}], [1, [\"Susan\", 24], {}, {}, {}], [2, [\"Rick\", 67], {\"name\": \"<lambda>\"}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"name\", \"age\"], \"passed\": false, \"include_columns\": null, \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.189235+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.191430+00:00\", \"description\": \"Table Diff: simple comparators\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 0, \"line_no\": 343, \"data\": [[2, [\"Rick\", 67], {\"name\": \"<lambda>\"}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"name\", \"age\"], \"passed\": false, \"include_columns\": null, \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.191421+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.194193+00:00\", \"description\": \"Table Match: readable comparators\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 0, \"line_no\": 361, \"data\": [[0, [\"Bob\", 32], {}, {}, {\"age\": \"(VAL > 30 and VAL < 40)\", \"name\": \"REGEX(\\\\w{3})\"}], [1, [\"Susan\", 24], {}, {}, {}], [2, [\"Rick\", 67], {\"name\": \"VAL in ['David', 'Helen', 'Pablo']\"}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"name\", \"age\"], \"passed\": false, \"include_columns\": null, \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.194183+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.196663+00:00\", \"description\": \"Table Diff: readable comparators\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 0, \"line_no\": 366, \"data\": [[2, [\"Rick\", 67], {\"name\": \"VAL in ['David', 'Helen', 'Pablo']\"}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"name\", \"age\"], \"passed\": false, \"include_columns\": null, \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.196657+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.198817+00:00\", \"description\": \"Table Match: Trimmed columns\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 0, \"line_no\": 383, \"data\": [[0, [0, 0], {}, {}, {}], [1, [2, 1], {}, {}, {}], [2, [4, 2], {}, {}, {}], [3, [6, 3], {}, {}, {}], [4, [8, 4], {}, {}, {}], [5, [10, 5], {}, {}, {}], [6, [12, 6], {}, {}, {}], [7, [14, 7], {}, {}, {}], [8, [16, 8], {}, {}, {}], [9, [18, 9], {}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"column_2\", \"column_1\"], \"passed\": true, \"include_columns\": [\"column_1\", \"column_2\"], \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.198811+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.202946+00:00\", \"description\": \"Table Diff: Trimmed columns\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 0, \"line_no\": 391, \"data\": [], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"column_2\", \"column_1\"], \"passed\": true, \"include_columns\": [\"column_1\", \"column_2\"], \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.202939+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.207724+00:00\", \"description\": \"Table Match: Trimmed rows\", \"exclude_columns\": null, \"report_fails_only\": false, \"fail_limit\": 2, \"line_no\": 428, \"data\": [[0, [0, 4473], {}, {}, {}], [1, [10, 3158], {}, {}, {}], [2, [20, 1768], {}, {}, {}], [3, [30, 4409], {}, {}, {}], [4, [40, 3683], {}, {}, {}], [5, [25, 1111], {\"amount\": 35}, {}, {}], [6, [20, 2222], {\"product_id\": 1234}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"amount\", \"product_id\"], \"passed\": false, \"include_columns\": null, \"message\": null, \"type\": \"TableMatch\", \"utc_time\": \"2019-02-12T17:41:43.207717+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.212960+00:00\", \"description\": \"Table Diff: Trimmed rows\", \"exclude_columns\": null, \"report_fails_only\": true, \"fail_limit\": 2, \"line_no\": 437, \"data\": [[5, [25, 1111], {\"amount\": 35}, {}, {}], [6, [20, 2222], {\"product_id\": 1234}, {}, {}]], \"strict\": false, \"meta_type\": \"assertion\", \"columns\": [\"amount\", \"product_id\"], \"passed\": false, \"include_columns\": null, \"message\": null, \"type\": \"TableDiff\", \"utc_time\": \"2019-02-12T17:41:43.212949+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.215324+00:00\", \"description\": null, \"column\": \"symbol\", \"type\": \"ColumnContain\", \"line_no\": 454, \"report_fails_only\": false, \"meta_type\": \"assertion\", \"limit\": null, \"passed\": false, \"values\": [\"AAPL\", \"AMZN\"], \"data\": [[0, \"AAPL\", true], [1, \"GOOG\", false], [2, \"FB\", false], [3, \"AMZN\", true], [4, \"MSFT\", false]], \"utc_time\": \"2019-02-12T17:41:43.215318+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.236233+00:00\", \"description\": null, \"column\": \"symbol\", \"type\": \"ColumnContain\", \"line_no\": 467, \"report_fails_only\": true, \"meta_type\": \"assertion\", \"limit\": 20, \"passed\": false, \"values\": [\"AAPL\", \"AMZN\"], \"data\": [[1, \"GOOG\", false], [2, \"FB\", false], [4, \"MSFT\", false], [6, \"GOOG\", false], [7, \"FB\", false], [9, \"MSFT\", false], [11, \"GOOG\", false], [12, \"FB\", false], [14, \"MSFT\", false], [16, \"GOOG\", false], [17, \"FB\", false], [19, \"MSFT\", false], [21, \"GOOG\", false], [22, \"FB\", false], [24, \"MSFT\", false], [26, \"GOOG\", false], [27, \"FB\", false], [29, \"MSFT\", false], [31, \"GOOG\", false], [32, \"FB\", false]], \"utc_time\": \"2019-02-12T17:41:43.236220+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.241786+00:00\", \"description\": \"Table Log: list of dicts\", \"line_no\": 472, \"display_index\": false, \"meta_type\": \"entry\", \"columns\": [\"age\", \"name\"], \"indices\": [0, 1, 2], \"table\": [{\"age\": 32, \"name\": \"Bob\"}, {\"age\": 24, \"name\": \"Susan\"}, {\"age\": 67, \"name\": \"Rick\"}], \"type\": \"TableLog\", \"utc_time\": \"2019-02-12T17:41:43.241777+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.243735+00:00\", \"description\": \"Table Log: list of lists\", \"line_no\": 473, \"display_index\": false, \"meta_type\": \"entry\", \"columns\": [\"name\", \"age\"], \"indices\": [0, 1, 2], \"table\": [{\"age\": 32, \"name\": \"Bob\"}, {\"age\": 24, \"name\": \"Susan\"}, {\"age\": 67, \"name\": \"Rick\"}], \"type\": \"TableLog\", \"utc_time\": \"2019-02-12T17:41:43.243729+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.246144+00:00\", \"description\": \"Table Log: many rows\", \"line_no\": 479, \"display_index\": false, \"meta_type\": \"entry\", \"columns\": [\"symbol\", \"amount\"], \"indices\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], \"table\": [{\"symbol\": \"AAPL\", \"amount\": 12}, {\"symbol\": \"GOOG\", \"amount\": 21}, {\"symbol\": \"FB\", \"amount\": 32}, {\"symbol\": \"AMZN\", \"amount\": 5}, {\"symbol\": \"MSFT\", \"amount\": 42}, {\"symbol\": \"AAPL\", \"amount\": 12}, {\"symbol\": \"GOOG\", \"amount\": 21}, {\"symbol\": \"FB\", \"amount\": 32}, {\"symbol\": \"AMZN\", \"amount\": 5}, {\"symbol\": \"MSFT\", \"amount\": 42}, {\"symbol\": \"AAPL\", \"amount\": 12}, {\"symbol\": \"GOOG\", \"amount\": 21}, {\"symbol\": \"FB\", \"amount\": 32}, {\"symbol\": \"AMZN\", \"amount\": 5}, {\"symbol\": \"MSFT\", \"amount\": 42}, {\"symbol\": \"AAPL\", \"amount\": 12}, {\"symbol\": \"GOOG\", \"amount\": 21}, {\"symbol\": \"FB\", \"amount\": 32}, {\"symbol\": \"AMZN\", \"amount\": 5}, {\"symbol\": \"MSFT\", \"amount\": 42}], \"type\": \"TableLog\", \"utc_time\": \"2019-02-12T17:41:43.246138+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.252173+00:00\", \"description\": \"Table Log: many columns\", \"line_no\": 490, \"display_index\": false, \"meta_type\": \"entry\", \"columns\": [\"col_0\", \"col_1\", \"col_2\", \"col_3\", \"col_4\", \"col_5\", \"col_6\", \"col_7\", \"col_8\", \"col_9\", \"col_10\", \"col_11\", \"col_12\", \"col_13\", \"col_14\", \"col_15\", \"col_16\", \"col_17\", \"col_18\", \"col_19\"], \"indices\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"table\": [{\"col_18\": \"row 0 col 18\", \"col_19\": \"row 0 col 19\", \"col_14\": \"row 0 col 14\", \"col_15\": \"row 0 col 15\", \"col_16\": \"row 0 col 16\", \"col_17\": \"row 0 col 17\", \"col_10\": \"row 0 col 10\", \"col_11\": \"row 0 col 11\", \"col_12\": \"row 0 col 12\", \"col_13\": \"row 0 col 13\", \"col_8\": \"row 0 col 8\", \"col_9\": \"row 0 col 9\", \"col_2\": \"row 0 col 2\", \"col_3\": \"row 0 col 3\", \"col_0\": \"row 0 col 0\", \"col_1\": \"row 0 col 1\", \"col_6\": \"row 0 col 6\", \"col_7\": \"row 0 col 7\", \"col_4\": \"row 0 col 4\", \"col_5\": \"row 0 col 5\"}, {\"col_18\": \"row 1 col 18\", \"col_19\": \"row 1 col 19\", \"col_14\": \"row 1 col 14\", \"col_15\": \"row 1 col 15\", \"col_16\": \"row 1 col 16\", \"col_17\": \"row 1 col 17\", \"col_10\": \"row 1 col 10\", \"col_11\": \"row 1 col 11\", \"col_12\": \"row 1 col 12\", \"col_13\": \"row 1 col 13\", \"col_8\": \"row 1 col 8\", \"col_9\": \"row 1 col 9\", \"col_2\": \"row 1 col 2\", \"col_3\": \"row 1 col 3\", \"col_0\": \"row 1 col 0\", \"col_1\": \"row 1 col 1\", \"col_6\": \"row 1 col 6\", \"col_7\": \"row 1 col 7\", \"col_4\": \"row 1 col 4\", \"col_5\": \"row 1 col 5\"}, {\"col_18\": \"row 2 col 18\", \"col_19\": \"row 2 col 19\", \"col_14\": \"row 2 col 14\", \"col_15\": \"row 2 col 15\", \"col_16\": \"row 2 col 16\", \"col_17\": \"row 2 col 17\", \"col_10\": \"row 2 col 10\", \"col_11\": \"row 2 col 11\", \"col_12\": \"row 2 col 12\", \"col_13\": \"row 2 col 13\", \"col_8\": \"row 2 col 8\", \"col_9\": \"row 2 col 9\", \"col_2\": \"row 2 col 2\", \"col_3\": \"row 2 col 3\", \"col_0\": \"row 2 col 0\", \"col_1\": \"row 2 col 1\", \"col_6\": \"row 2 col 6\", \"col_7\": \"row 2 col 7\", \"col_4\": \"row 2 col 4\", \"col_5\": \"row 2 col 5\"}, {\"col_18\": \"row 3 col 18\", \"col_19\": \"row 3 col 19\", \"col_14\": \"row 3 col 14\", \"col_15\": \"row 3 col 15\", \"col_16\": \"row 3 col 16\", \"col_17\": \"row 3 col 17\", \"col_10\": \"row 3 col 10\", \"col_11\": \"row 3 col 11\", \"col_12\": \"row 3 col 12\", \"col_13\": \"row 3 col 13\", \"col_8\": \"row 3 col 8\", \"col_9\": \"row 3 col 9\", \"col_2\": \"row 3 col 2\", \"col_3\": \"row 3 col 3\", \"col_0\": \"row 3 col 0\", \"col_1\": \"row 3 col 1\", \"col_6\": \"row 3 col 6\", \"col_7\": \"row 3 col 7\", \"col_4\": \"row 3 col 4\", \"col_5\": \"row 3 col 5\"}, {\"col_18\": \"row 4 col 18\", \"col_19\": \"row 4 col 19\", \"col_14\": \"row 4 col 14\", \"col_15\": \"row 4 col 15\", \"col_16\": \"row 4 col 16\", \"col_17\": \"row 4 col 17\", \"col_10\": \"row 4 col 10\", \"col_11\": \"row 4 col 11\", \"col_12\": \"row 4 col 12\", \"col_13\": \"row 4 col 13\", \"col_8\": \"row 4 col 8\", \"col_9\": \"row 4 col 9\", \"col_2\": \"row 4 col 2\", \"col_3\": \"row 4 col 3\", \"col_0\": \"row 4 col 0\", \"col_1\": \"row 4 col 1\", \"col_6\": \"row 4 col 6\", \"col_7\": \"row 4 col 7\", \"col_4\": \"row 4 col 4\", \"col_5\": \"row 4 col 5\"}, {\"col_18\": \"row 5 col 18\", \"col_19\": \"row 5 col 19\", \"col_14\": \"row 5 col 14\", \"col_15\": \"row 5 col 15\", \"col_16\": \"row 5 col 16\", \"col_17\": \"row 5 col 17\", \"col_10\": \"row 5 col 10\", \"col_11\": \"row 5 col 11\", \"col_12\": \"row 5 col 12\", \"col_13\": \"row 5 col 13\", \"col_8\": \"row 5 col 8\", \"col_9\": \"row 5 col 9\", \"col_2\": \"row 5 col 2\", \"col_3\": \"row 5 col 3\", \"col_0\": \"row 5 col 0\", \"col_1\": \"row 5 col 1\", \"col_6\": \"row 5 col 6\", \"col_7\": \"row 5 col 7\", \"col_4\": \"row 5 col 4\", \"col_5\": \"row 5 col 5\"}, {\"col_18\": \"row 6 col 18\", \"col_19\": \"row 6 col 19\", \"col_14\": \"row 6 col 14\", \"col_15\": \"row 6 col 15\", \"col_16\": \"row 6 col 16\", \"col_17\": \"row 6 col 17\", \"col_10\": \"row 6 col 10\", \"col_11\": \"row 6 col 11\", \"col_12\": \"row 6 col 12\", \"col_13\": \"row 6 col 13\", \"col_8\": \"row 6 col 8\", \"col_9\": \"row 6 col 9\", \"col_2\": \"row 6 col 2\", \"col_3\": \"row 6 col 3\", \"col_0\": \"row 6 col 0\", \"col_1\": \"row 6 col 1\", \"col_6\": \"row 6 col 6\", \"col_7\": \"row 6 col 7\", \"col_4\": \"row 6 col 4\", \"col_5\": \"row 6 col 5\"}, {\"col_18\": \"row 7 col 18\", \"col_19\": \"row 7 col 19\", \"col_14\": \"row 7 col 14\", \"col_15\": \"row 7 col 15\", \"col_16\": \"row 7 col 16\", \"col_17\": \"row 7 col 17\", \"col_10\": \"row 7 col 10\", \"col_11\": \"row 7 col 11\", \"col_12\": \"row 7 col 12\", \"col_13\": \"row 7 col 13\", \"col_8\": \"row 7 col 8\", \"col_9\": \"row 7 col 9\", \"col_2\": \"row 7 col 2\", \"col_3\": \"row 7 col 3\", \"col_0\": \"row 7 col 0\", \"col_1\": \"row 7 col 1\", \"col_6\": \"row 7 col 6\", \"col_7\": \"row 7 col 7\", \"col_4\": \"row 7 col 4\", \"col_5\": \"row 7 col 5\"}, {\"col_18\": \"row 8 col 18\", \"col_19\": \"row 8 col 19\", \"col_14\": \"row 8 col 14\", \"col_15\": \"row 8 col 15\", \"col_16\": \"row 8 col 16\", \"col_17\": \"row 8 col 17\", \"col_10\": \"row 8 col 10\", \"col_11\": \"row 8 col 11\", \"col_12\": \"row 8 col 12\", \"col_13\": \"row 8 col 13\", \"col_8\": \"row 8 col 8\", \"col_9\": \"row 8 col 9\", \"col_2\": \"row 8 col 2\", \"col_3\": \"row 8 col 3\", \"col_0\": \"row 8 col 0\", \"col_1\": \"row 8 col 1\", \"col_6\": \"row 8 col 6\", \"col_7\": \"row 8 col 7\", \"col_4\": \"row 8 col 4\", \"col_5\": \"row 8 col 5\"}, {\"col_18\": \"row 9 col 18\", \"col_19\": \"row 9 col 19\", \"col_14\": \"row 9 col 14\", \"col_15\": \"row 9 col 15\", \"col_16\": \"row 9 col 16\", \"col_17\": \"row 9 col 17\", \"col_10\": \"row 9 col 10\", \"col_11\": \"row 9 col 11\", \"col_12\": \"row 9 col 12\", \"col_13\": \"row 9 col 13\", \"col_8\": \"row 9 col 8\", \"col_9\": \"row 9 col 9\", \"col_2\": \"row 9 col 2\", \"col_3\": \"row 9 col 3\", \"col_0\": \"row 9 col 0\", \"col_1\": \"row 9 col 1\", \"col_6\": \"row 9 col 6\", \"col_7\": \"row 9 col 7\", \"col_4\": \"row 9 col 4\", \"col_5\": \"row 9 col 5\"}], \"type\": \"TableLog\", \"utc_time\": \"2019-02-12T17:41:43.252162+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.262985+00:00\", \"description\": \"Table Log: long cells\", \"line_no\": 504, \"display_index\": false, \"meta_type\": \"entry\", \"columns\": [\"Name\", \"Age\", \"Address\"], \"indices\": [0, 1, 2, 3, 4, 5], \"table\": [{\"Age\": \"33\", \"Name\": \"Bob Stevens\", \"Address\": \"89 Trinsdale Avenue, LONDON, E8 0XW\"}, {\"Age\": \"21\", \"Name\": \"Susan Evans\", \"Address\": \"100 Loop Road, SWANSEA, U8 12JK\"}, {\"Age\": \"88\", \"Name\": \"Trevor Dune\", \"Address\": \"28 Kings Lane, MANCHESTER, MT16 2YT\"}, {\"Age\": \"38\", \"Name\": \"Belinda Baggins\", \"Address\": \"31 Prospect Hill, DOYNTON, BS30 9DN\"}, {\"Age\": \"89\", \"Name\": \"Cosimo Hornblower\", \"Address\": \"65 Prospect Hill, SURREY, PH33 4TY\"}, {\"Age\": \"31\", \"Name\": \"Sabine Wurfel\", \"Address\": \"88 Clasper Way, HEXWORTHY, PL20 4BG\"}], \"type\": \"TableLog\", \"utc_time\": \"2019-02-12T17:41:43.262975+00:00\"}], \"uid\": \"78dd1eab-07f3-44b6-b94c-dafe0293ae77\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"failed\", \"name\": \"test_dict_namespace\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.295194+00:00\", \"end\": \"2019-02-12T17:41:43.304266+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.295236+00:00\", \"description\": \"Simple dict match\", \"comparison\": [[0, \"foo\", \"Passed\", [\"int\", \"1\"], [\"int\", \"1\"]], [0, \"bar\", \"Failed\", [\"int\", \"2\"], [\"int\", \"5\"]], [0, \"extra-key\", \"Failed\", [null, \"ABSENT\"], [\"int\", \"10\"]]], \"line_no\": 524, \"expected_description\": null, \"actual_description\": null, \"meta_type\": \"assertion\", \"include_keys\": null, \"passed\": false, \"exclude_keys\": null, \"type\": \"DictMatch\", \"utc_time\": \"2019-02-12T17:41:43.295231+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.297024+00:00\", \"description\": \"Nested dict match\", \"comparison\": [[0, \"foo\", \"Failed\", \"\", \"\"], [1, \"alpha\", \"Failed\", \"\", \"\"], [1, \"\", \"Passed\", [\"int\", \"1\"], [\"int\", \"1\"]], [1, \"\", \"Passed\", [\"int\", \"2\"], [\"int\", \"2\"]], [1, \"\", \"Failed\", [\"int\", \"3\"], [null, null]], [1, \"beta\", \"Failed\", \"\", \"\"], [2, \"color\", \"Failed\", [\"str\", \"red\"], [\"str\", \"blue\"]]], \"line_no\": 542, \"expected_description\": null, \"actual_description\": null, \"meta_type\": \"assertion\", \"include_keys\": null, \"passed\": false, \"exclude_keys\": null, \"type\": \"DictMatch\", \"utc_time\": \"2019-02-12T17:41:43.297017+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.299092+00:00\", \"description\": \"Dict match: Custom comparators\", \"comparison\": [[0, \"baz\", \"Passed\", [\"str\", \"hello world\"], [\"REGEX\", \"\\\\w+ world\"]], [0, \"foo\", \"Passed\", \"\", \"\"], [0, \"\", \"Passed\", [\"int\", \"1\"], [\"int\", \"1\"]], [0, \"\", \"Passed\", [\"int\", \"2\"], [\"int\", \"2\"]], [0, \"\", \"Passed\", [\"int\", \"3\"], [\"func\", \"<lambda>\"]], [0, \"bar\", \"Passed\", \"\", \"\"], [1, \"color\", \"Passed\", [\"str\", \"blue\"], [\"func\", \"VAL in ['blue', 'red', 'yellow']\"]]], \"line_no\": 560, \"expected_description\": null, \"actual_description\": null, \"meta_type\": \"assertion\", \"include_keys\": null, \"passed\": true, \"exclude_keys\": null, \"type\": \"DictMatch\", \"utc_time\": \"2019-02-12T17:41:43.299084+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.300822+00:00\", \"description\": null, \"has_keys\": [\"foo\", \"alpha\"], \"line_no\": 570, \"meta_type\": \"assertion\", \"absent_keys_diff\": [\"bar\"], \"passed\": false, \"has_keys_diff\": [\"alpha\"], \"type\": \"DictCheck\", \"absent_keys\": [\"bar\", \"beta\"], \"utc_time\": \"2019-02-12T17:41:43.300815+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.302500+00:00\", \"description\": null, \"flattened_dict\": [[0, \"baz\", [\"str\", \"hello world\"]], [0, \"foo\", \"\"], [0, \"\", [\"int\", \"1\"]], [0, \"\", [\"int\", \"2\"]], [0, \"\", [\"int\", \"3\"]], [0, \"bar\", \"\"], [1, \"color\", [\"str\", \"blue\"]]], \"line_no\": 579, \"meta_type\": \"entry\", \"type\": \"DictLog\", \"utc_time\": \"2019-02-12T17:41:43.302494+00:00\"}], \"uid\": \"451c82db-0939-40c5-ae6c-b2750c6fca52\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"failed\", \"name\": \"test_fix_namespace\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.309758+00:00\", \"end\": \"2019-02-12T17:41:43.316489+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.309890+00:00\", \"description\": null, \"comparison\": [[0, 555, \"Failed\", \"\", \"\"], [0, \"\", \"Failed\", \"\", \"\"], [1, 600, \"Passed\", [\"str\", \"A\"], [\"str\", \"A\"]], [1, 601, \"Failed\", [\"str\", \"A\"], [\"str\", \"B\"]], [1, 683, \"Passed\", \"\", \"\"], [1, \"\", \"Passed\", \"\", \"\"], [2, 688, \"Passed\", [\"str\", \"a\"], [\"str\", \"a\"]], [2, 689, \"Passed\", [\"str\", \"a\"], [\"REGEX\", \"[a-z]\"]], [1, \"\", \"Passed\", \"\", \"\"], [2, 688, \"Passed\", [\"str\", \"b\"], [\"str\", \"b\"]], [2, 689, \"Passed\", [\"str\", \"b\"], [\"str\", \"b\"]], [0, \"\", \"Failed\", \"\", \"\"], [1, 600, \"Failed\", [\"str\", \"B\"], [\"str\", \"C\"]], [1, 601, \"Passed\", [\"str\", \"B\"], [\"str\", \"B\"]], [1, 683, \"Passed\", \"\", \"\"], [1, \"\", \"Passed\", \"\", \"\"], [2, 688, \"Passed\", [\"str\", \"c\"], [\"str\", \"c\"]], [2, 689, \"Passed\", [\"str\", \"c\"], [\"func\", \"VAL in ('c', 'd')\"]], [1, \"\", \"Passed\", \"\", \"\"], [2, 688, \"Passed\", [\"str\", \"d\"], [\"str\", \"d\"]], [2, 689, \"Passed\", [\"str\", \"d\"], [\"str\", \"d\"]], [0, 36, \"Passed\", [\"int\", \"6\"], [\"int\", \"6\"]], [0, 38, \"Passed\", [\"int\", \"5\"], [\"func\", \"VAL >= 4\"]], [0, 22, \"Passed\", [\"int\", \"5\"], [\"int\", \"5\"]], [0, 55, \"Passed\", [\"int\", \"2\"], [\"int\", \"2\"]]], \"line_no\": 667, \"expected_description\": null, \"actual_description\": null, \"meta_type\": \"assertion\", \"include_keys\": null, \"passed\": false, \"exclude_keys\": null, \"type\": \"FixMatch\", \"utc_time\": \"2019-02-12T17:41:43.309884+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.312797+00:00\", \"description\": null, \"has_keys\": [26, 22, 11], \"line_no\": 675, \"meta_type\": \"assertion\", \"absent_keys_diff\": [555], \"passed\": false, \"has_keys_diff\": [26, 11], \"type\": \"FixCheck\", \"absent_keys\": [444, 555], \"utc_time\": \"2019-02-12T17:41:43.312789+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.314860+00:00\", \"description\": null, \"flattened_dict\": [[0, 555, \"\"], [0, \"\", \"\"], [1, 624, [\"int\", \"1\"]], [1, 556, [\"str\", \"USD\"]], [0, \"\", \"\"], [1, 624, [\"int\", \"2\"]], [1, 556, [\"str\", \"EUR\"]], [0, 36, [\"int\", \"6\"]], [0, 38, [\"int\", \"5\"]], [0, 22, [\"int\", \"5\"]], [0, 55, [\"int\", \"2\"]]], \"line_no\": 688, \"meta_type\": \"entry\", \"type\": \"FixLog\", \"utc_time\": \"2019-02-12T17:41:43.314849+00:00\"}], \"uid\": \"7b72fe93-ef07-4ed8-bc9a-114a8cc0ff4f\", \"type\": \"TestCaseReport\", \"logs\": []}, {\"status\": \"passed\", \"name\": \"test_xml_namespace\", \"tags\": {}, \"description\": null, \"timer\": {\"run\": {\"start\": \"2019-02-12T17:41:43.321328+00:00\", \"end\": \"2019-02-12T17:41:43.327366+00:00\"}}, \"suite_related\": false, \"status_override\": null, \"entries\": [{\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.321541+00:00\", \"description\": \"Simple XML check for existence of xpath.\", \"xpath\": \"/Root/Test\", \"xml\": \"<Root>\\n                <Test>Foo</Test>\\n            </Root>\\n\", \"data\": [], \"line_no\": 710, \"tags\": null, \"meta_type\": \"assertion\", \"passed\": true, \"message\": \"xpath: `/Root/Test` exists in the XML.\", \"type\": \"XMLCheck\", \"namespaces\": null, \"utc_time\": \"2019-02-12T17:41:43.321534+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.323547+00:00\", \"description\": \"XML check for tags in the given xpath.\", \"xpath\": \"/Root/Test\", \"xml\": \"<Root>\\n                <Test>Value1</Test>\\n                <Test>Value2</Test>\\n            </Root>\\n\", \"data\": [[\"Value1\", null, null, null], [\"Value2\", null, null, null]], \"line_no\": 724, \"tags\": [\"Value1\", \"Value2\"], \"meta_type\": \"assertion\", \"passed\": true, \"message\": null, \"type\": \"XMLCheck\", \"namespaces\": null, \"utc_time\": \"2019-02-12T17:41:43.323539+00:00\"}, {\"category\": \"DEFAULT\", \"machine_time\": \"2019-02-12T17:41:43.325653+00:00\", \"description\": \"XML check with namespace matching.\", \"xpath\": \"//*/a:message\", \"xml\": \"<SOAP-ENV:Envelope xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n                <SOAP-ENV:Header/>\\n                <SOAP-ENV:Body>\\n                    <ns0:message xmlns:ns0=\\\"http://testplan\\\">Hello world!</ns0:message>\\n                </SOAP-ENV:Body>\\n            </SOAP-ENV:Envelope>\\n\", \"data\": [[\"Hello world!\", null, null, \"REGEX(Hello*)\"]], \"line_no\": 743, \"tags\": [\"<_sre.SRE_Pattern object at 0x7f163091e030>\"], \"meta_type\": \"assertion\", \"passed\": true, \"message\": null, \"type\": \"XMLCheck\", \"namespaces\": {\"a\": \"http://testplan\"}, \"utc_time\": \"2019-02-12T17:41:43.325645+00:00\"}], \"uid\": \"0d45f100-da7b-46be-a6a5-3188c425b764\", \"type\": \"TestCaseReport\", \"logs\": []}], \"uid\": \"c01e19ca-dfdc-4c34-9b0f-a28b9acd896a\", \"type\": \"TestGroupReport\", \"logs\": []}], \"uid\": \"0c10b29b-7cc2-4ebb-a25c-e44e991f21f3\", \"type\": \"TestGroupReport\", \"logs\": []}], \"name\": \"Assertions Example\"};\n\n/**\n * Fake interactive report. All entries start with a status of \"ready\".\n */\nconst FakeInteractiveReport = {\n  counter: {passed: 0, failed: 0},\n  entries: [{\n    counter: {passed: 0, failed: 0},\n    category: \"multitest\",\n    description: null,\n    entries: [{\n      counter: {passed: 0, failed: 0},\n      category: \"testsuite\",\n      description: null,\n      entries: [{\n        counter: {passed: 0, failed: 0},\n        description: null,\n        entries: [],\n        logs: [],\n        name: \"test_interactive\",\n        name_type_index: new Set(),\n        status: 'unknown',\n        runtime_status: 'ready',\n        status_override: null,\n        suite_related: false,\n        tags: {},\n        tags_index: {},\n        timer: {},\n        type: \"TestCaseReport\",\n        uid: \"ddd\",\n      }],\n      logs: [],\n      name: \"Interactive Suite\",\n      name_type_index: new Set(),\n      part: null,\n      status: 'unknown',\n      runtime_status: 'ready',\n      status_override: null,\n      tags: {},\n      tags_index: {},\n      timer: {},\n      type: \"TestGroupReport\",\n      uid: \"ccc\",\n    }],\n    logs: [],\n    name: \"Interactive MTest\",\n    name_type_index: new Set(),\n    part: null,\n    status: 'unknown',\n    runtime_status: 'ready',\n    status_override: null,\n    tags: {},\n    tags_index: {},\n    timer: {},\n    type: \"TestGroupReport\",\n    uid: \"bbb\",\n  }],\n  meta: {},\n  name: \"Fake Interactive Report\",\n  name_type_index: new Set(),\n  status: 'unknown',\n  runtime_status: 'ready',\n  status_override: null,\n  tags_index: {},\n  timer: null,\n  uid: \"aaa\",\n};\n\nexport {\n  TESTPLAN_REPORT,\n  fakeReportAssertions,\n  FakeInteractiveReport,\n}\n","/**\n * InteractiveReport: Renders an Interactive report, which is used to control\n * test environments and run tests interactively. Requires the Testplan\n * interactive API backend to be running.\n */\nimport React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\nimport axios from 'axios';\n\nimport {INTERACTIVE_COL_WIDTH} from \"../Common/defaults\";\nimport Toolbar from '../Toolbar/Toolbar.js';\nimport InteractiveNav from '../Nav/InteractiveNav.js';\nimport {FakeInteractiveReport} from '../Common/sampleReports.js';\nimport {\n  PropagateIndices,\n  UpdateSelectedState,\n  GetReportState,\n  GetCenterPane,\n  GetSelectedEntries,\n} from './reportUtils.js';\n\n/**\n * Interactive report viewer. As opposed to a batch report, an interactive\n * report starts off with no test results and fills up with results as\n * the tests are run interactively. Tests can be run by clicking buttons in\n * the UI.\n */\nclass InteractiveReport extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      navWidth: INTERACTIVE_COL_WIDTH,\n      report: null,\n      selectedUIDs: [],\n      loading: false,\n      error: null,\n    };\n    this.handleNavClick = this.handleNavClick.bind(this);\n    this.handlePlayClick = this.handlePlayClick.bind(this);\n    this.envCtrlCallback = this.envCtrlCallback.bind(this);\n    this.getReport = this.getReport.bind(this);\n  }\n\n  /**\n   * Fetch the Testplan report once the component has mounted.\n   * @public\n   */\n  componentDidMount() {\n    this.setState({loading: true}, this.getReport);\n  }\n\n  /**\n   * Fetch the Testplan interactive report and start polling for updates.\n   *\n   * If running in dev mode we just display a fake report.\n   */\n  getReport() {\n    if (this.props.dev) {\n      setTimeout(\n        () => this.setState({\n          report: FakeInteractiveReport,\n          selectedUIDs: this.autoSelect(FakeInteractiveReport),\n          loading: false,\n        }),\n        1500,\n      );\n    } else {\n      axios.get('/api/v1/interactive/report')\n      .then(response => {\n        if (!this.state.report ||\n            this.state.report.hash !== response.data.hash) {\n          this.getTests().then(tests => {\n            const rawReport = {...response.data, entries: tests};\n            const processedReport = PropagateIndices(rawReport);\n            this.setState(\n              (state, props) => ({\n                report: processedReport,\n                selectedUIDs: state.selectedUIDs.length > 0 ?\n                  state.selectedUIDs : this.autoSelect(processedReport),\n                loading: false,\n              })\n            );\n          });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({error: error, loading: false});\n      });\n\n      // We poll for updates to the report every second.\n      if (this.props.poll_ms) {\n        setTimeout(this.getReport, this.props.poll_ms);\n      }\n    }\n  }\n\n  /**\n   * Get the top-level Tests, including their suites and testcases, from the\n   * backend.\n   */\n  getTests() {\n    return axios.get(\n      \"/api/v1/interactive/report/tests\"\n    ).then(response => {\n      return Promise.all(response.data.map(\n        newTest => {\n          const existingTest = (\n            this.state.report && this.state.report.entries.find(\n              entry => entry.uid === newTest.uid\n            )\n          );\n\n          if (!existingTest ||\n              existingTest.hash !== newTest.hash) {\n            return this.getSuites(newTest, existingTest).then(\n              suites => ({...newTest, entries: suites})\n            );\n          } else {\n            return existingTest;\n          }\n        }\n      ));\n    });\n  }\n\n  /**\n   * Get the suites owned by a particular test from the backend.\n   */\n  getSuites(newTest, existingTest) {\n    return axios.get(\n      `/api/v1/interactive/report/tests/${newTest.uid}/suites`\n    ).then(response => {\n      return Promise.all(response.data.map(\n        newSuite => {\n          const existingSuite = existingTest && existingTest.entries.find(\n            entry => entry.uid === newSuite.uid\n          );\n\n          if (!existingSuite ||\n              existingSuite.hash !== newSuite.hash) {\n            return this.getTestCases(newTest, newSuite, existingSuite).then(\n              testcases => ({...newSuite, entries: testcases})\n            );\n          } else {\n            return existingSuite;\n          }\n        }\n      ));\n    });\n  }\n\n  /**\n   * Get the testcases owned by a particular test suite from the backend.\n   */\n  getTestCases(test, newSuite, existingSuite) {\n    return axios.get(\n      `/api/v1/interactive/report/tests/${test.uid}/suites/${newSuite.uid}/` +\n      `testcases`\n    ).then(response => {\n      return Promise.all(response.data.map((newTestCase) => {\n        switch (newTestCase.category) {\n        case \"testcase\":\n          return newTestCase;\n\n        case \"parametrization\":\n          const existingParametrization = (\n            existingSuite && existingSuite.entries.find(\n              entry => entry.uid === newTestCase\n            )\n          );\n\n          if (\n            !existingParametrization ||\n            existingParametrization.hash !== newTestCase.hash\n          ) {\n            return this.getParametrizations(test, newSuite, newTestCase).then(\n              parametrizations => ({...newTestCase, entries: parametrizations})\n            );\n          } else {\n            return existingParametrization;\n          }\n\n        default:\n          throw new Error(\n            \"Unexpected testcase category: \" + newTestCase.category\n          );\n        }\n      }));\n    });\n  }\n\n  /**\n   * Get the parametrizations owned by a particular testcase from the backend.\n   */\n  getParametrizations(test, suite, testcase) {\n    return axios.get(\n      `/api/v1/interactive/report/tests/${test.uid}/suites/${suite.uid}/` +\n      `testcases/${testcase.uid}/parametrizations`\n    ).then(response => response.data);\n  }\n\n  /**\n   * Auto-select an entry in the report when it is first loaded.\n   */\n  autoSelect(reportEntry) {\n    return [reportEntry.uid];\n  }\n\n  /**\n   * Request to update an entry in the report via PUT.\n   */\n  putUpdatedReportEntry(updatedReportEntry) {\n    const apiUrl = this.getApiUrl(updatedReportEntry);\n    axios.put(apiUrl, updatedReportEntry).then(\n      response => this.setShallowReportEntry(response.data)\n    ).catch(\n      error => this.setState({error: error})\n    );\n  }\n\n  /**\n   * Get the API URL for requesting to update the state of a report entry.\n   */\n  getApiUrl(updatedReportEntry) {\n    const api_prefix = \"/api/v1/interactive\";\n\n    switch (updatedReportEntry.parent_uids.length) {\n      case 0:\n        return api_prefix + \"/report\";\n\n      case 1: {\n        const test_uid = updatedReportEntry.uid;\n        return api_prefix + `/report/tests/${test_uid}`;\n      }\n\n      case 2: {\n        const test_uid = updatedReportEntry.parent_uids[1];\n        const suite_uid = updatedReportEntry.uid;\n\n        return api_prefix + `/report/tests/${test_uid}/suites/${suite_uid}`;\n      }\n\n      case 3: {\n        const test_uid = updatedReportEntry.parent_uids[1];\n        const suite_uid = updatedReportEntry.parent_uids[2];\n        const testcase_uid = updatedReportEntry.uid;\n\n        return api_prefix + (\n          `/report/tests/${test_uid}`\n          + `/suites/${suite_uid}`\n          + `/testcases/${testcase_uid}`\n        );\n      }\n\n      case 4: {\n        const test_uid = updatedReportEntry.parent_uids[1];\n        const suite_uid = updatedReportEntry.parent_uids[2];\n        const testcase_uid = updatedReportEntry.parent_uids[3];\n        const param_uid = updatedReportEntry.uid;\n\n        return api_prefix + (\n          `/report/tests/${test_uid}`\n          + `/suites/${suite_uid}`\n          + `/testcases/${testcase_uid}`\n          + `/parametrizations/${param_uid}`\n        );\n      }\n\n      default:\n        throw new Error(\n          \"Unexpected number of parent entries: \"\n          + updatedReportEntry.parent_uids\n        );\n    }\n  }\n\n  /**\n   * Update an entry in the report.\n   */\n  setShallowReportEntry(shallowReportEntry) {\n    this.setState((state, props) => ({\n      report: this.updateReportEntryRecur(\n        shallowReportEntry, state.report,\n      ),\n    }));\n  }\n\n  /**\n   * Update a single entry in the report tree recursively. This function\n   * returns a new report object, it does not mutate the current report.\n   */\n  updateReportEntryRecur(shallowReportEntry, currEntry, depth=0) {\n    if (depth < shallowReportEntry.parent_uids.length) {\n      if (currEntry.uid === shallowReportEntry.parent_uids[depth]) {\n        return {\n          ...currEntry,\n          entries: currEntry.entries.map(\n            entry => this.updateReportEntryRecur(\n              shallowReportEntry,\n              entry,\n              depth + 1,\n            )\n          ),\n        };\n      } else {\n        return currEntry;\n      }\n    } else if (depth === shallowReportEntry.parent_uids.length) {\n      if (shallowReportEntry.uid === currEntry.uid) {\n        return this.unshallowReportEntry(shallowReportEntry, currEntry);\n      } else {\n        return currEntry;\n      }\n    } else if (depth > shallowReportEntry.parent_uids.length) {\n      throw new Error(\"Recursed too far down...\");\n    }\n  }\n\n  /**\n   * Convert a shallow report entry to an \"unshallow\" one with embedded\n   * entries, by stealing the entries (and some other metadata) from\n   * the current entry.\n   */\n  unshallowReportEntry(shallowReportEntry, currReportEntry) {\n    const newEntry = {\n      ...shallowReportEntry,\n      entries: currReportEntry.entries,\n      tags: currReportEntry.tags,\n      tags_index: currReportEntry.tags_index,\n      name_type_index: currReportEntry.name_type_index,\n      counter: currReportEntry.counter,\n    };\n    delete newEntry.entry_uids;\n\n    return newEntry;\n  }\n\n  /**\n   * Handle a navigation entry being clicked. Update the current selection\n   * state and displayed assertions.\n   */\n  handleNavClick(e, entry, depth) {\n    e.stopPropagation();\n    this.setState((state, props) => UpdateSelectedState(state, entry, depth));\n  }\n\n  /* Handle the play button being clicked on a Nav entry. */\n  handlePlayClick(e, reportEntry) {\n    e.stopPropagation();\n    const updatedReportEntry = {\n      ...this.shallowReportEntry(reportEntry), runtime_status: \"running\"\n    };\n    this.putUpdatedReportEntry(updatedReportEntry);\n  }\n\n  /**\n   * Handle an environment toggle button being clicked on a Nav entry.\n   *\n   * @param {object} e - Click event\n   * @param {ReportNode} reportEntry - entry in the report whose environment\n   *                                   has been toggled.\n   * @param {string} action - What action to take on the environment, expected\n   *                          to be one of \"start\" or \"stop\".\n   */\n  envCtrlCallback(e, reportEntry, action) {\n    e.stopPropagation();\n    const updatedReportEntry = {\n      ...this.shallowReportEntry(reportEntry),\n      env_status: this.actionToEnvStatus(action),\n    };\n    this.putUpdatedReportEntry(updatedReportEntry);\n  }\n\n  /**\n   * Convert an environment action into a requested environment status.\n   *\n   * @param {string} action - environment action, one of \"start\" or \"stop\".\n   * @return {string} env_status value to use in API request.\n   */\n  actionToEnvStatus(action) {\n    switch (action) {\n      case \"start\":\n        return \"STARTING\";\n\n      case \"stop\":\n        return \"STOPPING\";\n\n      default:\n        throw new Error(\"Invalid action: \" + action);\n    }\n  }\n\n  /**\n   * Shallow copy of a report entry, by replacing the \"entries\" attribute\n   * with an array of entry UIDs.\n   */\n  shallowReportEntry(reportEntry) {\n    const {entries, ...shallowEntry} = reportEntry;\n    shallowEntry.entry_uids = entries.map((entry) => entry.uid);\n    return shallowEntry;\n  }\n\n  /**\n   * Render the InteractiveReport component based on its current state.\n   */\n  render() {\n    const noop = () => undefined;\n    const {reportStatus, reportFetchMessage} = GetReportState(this.state);\n    const selectedEntries = GetSelectedEntries(\n      this.state.selectedUIDs, this.state.report\n    );\n    const centerPane = GetCenterPane(\n      this.state,\n      this.props,\n      reportFetchMessage,\n      null,\n      selectedEntries,\n    );\n\n    return (\n      <div className={css(styles.batchReport)}>\n        <Toolbar\n          status={reportStatus}\n          handleNavFilter={noop}\n          updateFilterFunc={noop}\n          updateEmptyDisplayFunc={noop}\n          updateTagsDisplayFunc={noop}\n        />\n        <InteractiveNav\n          report={this.state.report}\n          selected={selectedEntries}\n          filter={null}\n          displayEmpty={true}\n          displayTags={false}\n          handleNavClick={this.handleNavClick}\n          handlePlayClick={this.handlePlayClick}\n          envCtrlCallback={this.envCtrlCallback}\n        />\n        {centerPane}\n      </div>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({interactiveReport: {}});\n\nexport default InteractiveReport;\n\n","/**\n * EmptyReport: Render an empty report skeleton and display an error message.\n * Used as the default option when no other report URL filter is matched.\n */\nimport React from 'react';\nimport {StyleSheet, css} from 'aphrodite';\n\nimport Message from '../Common/Message';\nimport Toolbar from '../Toolbar/Toolbar';\nimport Nav from '../Nav/Nav';\nimport {COLUMN_WIDTH} from \"../Common/defaults\";\n\nconst EmptyReport = (props) => {\n  let message;\n  if (props.message) {\n    message = props.message;\n  } else {\n    message = \"404: Page Not Found\";\n  }\n\n  const centerPane = (\n    <Message\n      message={message}\n      left={COLUMN_WIDTH}\n    />\n  );\n\n  const noop = () => undefined;\n\n  return (\n    <div className={css(styles.emptyReport)}>\n      <Toolbar\n        status={undefined}\n        handleNavFilter={noop}\n        updateFilterFunc={noop}\n        updateEmptyDisplayFunc={noop}\n        updateTagsDisplayFunc={noop}\n      />\n      <Nav\n        report={null}\n        saveAssertions={noop}\n        filter={undefined}\n        displayEmpty={true}\n        displayTags={false}\n      />\n      {centerPane}\n    </div>\n  );\n};\n\nconst styles = StyleSheet.create({ emptyReport: {} });\n\nexport default EmptyReport;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BatchReport from './Report/BatchReport';\nimport InteractiveReport from './Report/InteractiveReport';\nimport EmptyReport from './Report/EmptyReport';\nimport {POLL_MS} from './Common/defaults.js';\n\n// import registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n/**\n * This single App provides multiple functions controlled via the URL path\n * accessed. We are using React-Router to control which type of report is\n * rendered and to extract the report UID from the URL when necessary.\n */\nconst AppRouter = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/testplan/:uid\" component={BatchReport} />\n      <Route path=\"/interactive/_dev\">\n        <InteractiveReport dev={true} />\n      </Route>\n      <Route path=\"/interactive\">\n        <InteractiveReport dev={false} poll_ms={POLL_MS} />\n      </Route>\n      <Route component={EmptyReport} />\n    </Switch>\n  </Router>\n);\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}